{"version":3,"file":"89820-9ea31079540e1e5d08e8.js","mappings":"yGAAA,SAAWA,GACT,IAAIC,EAAgB,CAClBC,QAAS,uBACTC,MAAO,UAELC,EAAS,6FASTC,EAAY,eAAiBD,EAAOE,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GAEjCI,EAAY,CACdP,QAAS,wBACTQ,YAAY,EACZP,MAAO,YAETH,EAAMW,UAAUC,MAAQ,CACtB,aAAc,CACZV,QAAS,kDACTQ,YAAY,EACZG,OAAQ,CACN,sBAAuB,CACrBX,QAAS,UACTQ,YAAY,EACZP,MAAO,YAET,yBAA0B,CACxBD,QAAS,UACTC,MAAO,eAET,MAAS,CACPD,QAASK,EACTM,OAAQ,CACN,OAAUT,EACV,oBAAqB,CACnBF,QAAS,IACTC,MAAO,cAIb,iBAAkBF,EAClB,WArCkB,CACtBC,QAAS,yBACTC,MAAO,cAoCH,OAAUC,IAGd,iBAAkBH,EAClB,WA9CY,CACZC,QAAS,4BACTC,MAAO,cA6CP,cAAiB,CAAC,CAEhBD,QAAS,2BACTC,MAAO,WACN,CACDD,QAAS,eACTC,MAAO,UACPU,OAAQ,CACN,aAAcJ,KAGlB,OAAU,CACRP,QAAS,kBACTC,MAAO,YAET,OAAUC,EACV,MAAS,CAAC,CAIRF,QAAS,8EACTC,MAAO,cACPU,OAAQ,CACN,aAAcJ,IAEf,CACDP,QAAS,KACTC,MAAO,gBAET,WAAc,CACZD,QAAS,kCACTC,MAAO,UAET,YAAe,CACbD,QAAS,KACTC,MAAO,YAxFb,CA2FGH","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-regex.js"],"sourcesContent":["(function (Prism) {\n  var specialEscape = {\n    pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n    alias: 'escape'\n  };\n  var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n  var charSet = {\n    pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n    alias: 'class-name'\n  };\n  var charSetWithoutDot = {\n    pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n    alias: 'class-name'\n  };\n  var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n  var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n  var groupName = {\n    pattern: /(<|')[^<>']+(?=[>']$)/,\n    lookbehind: true,\n    alias: 'variable'\n  };\n  Prism.languages.regex = {\n    'char-class': {\n      pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n      lookbehind: true,\n      inside: {\n        'char-class-negation': {\n          pattern: /(^\\[)\\^/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        'char-class-punctuation': {\n          pattern: /^\\[|\\]$/,\n          alias: 'punctuation'\n        },\n        'range': {\n          pattern: range,\n          inside: {\n            'escape': escape,\n            'range-punctuation': {\n              pattern: /-/,\n              alias: 'operator'\n            }\n          }\n        },\n        'special-escape': specialEscape,\n        'char-set': charSetWithoutDot,\n        'escape': escape\n      }\n    },\n    'special-escape': specialEscape,\n    'char-set': charSet,\n    'backreference': [{\n      // a backreference which is not an octal escape\n      pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n      alias: 'keyword'\n    }, {\n      pattern: /\\\\k<[^<>']+>/,\n      alias: 'keyword',\n      inside: {\n        'group-name': groupName\n      }\n    }],\n    'anchor': {\n      pattern: /[$^]|\\\\[ABbGZz]/,\n      alias: 'function'\n    },\n    'escape': escape,\n    'group': [{\n      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n      pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n      alias: 'punctuation',\n      inside: {\n        'group-name': groupName\n      }\n    }, {\n      pattern: /\\)/,\n      alias: 'punctuation'\n    }],\n    'quantifier': {\n      pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n      alias: 'number'\n    },\n    'alternation': {\n      pattern: /\\|/,\n      alias: 'keyword'\n    }\n  };\n})(Prism);"],"names":["Prism","specialEscape","pattern","alias","escape","rangeChar","source","range","RegExp","groupName","lookbehind","languages","regex","inside"],"sourceRoot":""}