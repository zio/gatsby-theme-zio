{"version":3,"file":"54512-4be90ae777818fbd39ac.js","mappings":"yGAEA,SAAWA,GAGT,IAGIC,EAAiB,CAAC,KAAM,WAAY,cAAe,aAAc,KAAM,WAIvEC,EAPe,CAAC,MAAO,MAAO,MAAO,MAAO,QAAS,SAAU,SAAU,QAAS,eAAgB,UAAW,OAAQ,YAO7FC,OAAOF,EADd,CAAC,WAEtBD,EAAMI,UAAUC,OAAS,CACvB,QAAW,CACTC,QAAS,gBACTC,YAAY,GAEd,eAAgB,CAEdD,QAAS,IAAIE,OAAO,OAASP,EAAeQ,KAAK,KAAO,qBACxDF,YAAY,EACZG,OAAQ,CACN,YAAa,CACXJ,QAAS,YACTK,MAAO,aAET,YAAe,UAGnB,iBAAkB,CAChBL,QAAS,aACTI,OAAQ,CACN,YAAa,CACXJ,QAAS,gCACTK,MAAO,aAET,cAAe,CACbL,QAAS,qCACTM,QAAQ,EACRD,MAAO,cAET,YAAe,sBAGnB,gBAAiB,CAAC,CAChBL,QAAS,eAETI,OAAQ,CACN,YAAe,UACf,iBAAkB,CAChBJ,QAAS,+BACTK,MAAO,YAGV,CACDL,QAAS,mBAETC,YAAY,EACZG,OAAQ,CACN,iBAAkB,CAChBJ,QAAS,+BACTK,MAAO,aAIb,QAAW,IAAIH,OAAO,SAAWN,EAASO,KAAK,KAAO,OAAQ,KAC9D,SAAY,wBACZ,OAAU,oFACV,SAAY,mDACZ,YAAe,iBApEnB,CAsEGT","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-promql.js"],"sourcesContent":["// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n(function (Prism) {\n  // PromQL Aggregation Operators\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n  var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n  var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n  // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n  var offsetModifier = ['offset'];\n  var keywords = aggregations.concat(vectorMatching, offsetModifier);\n  Prism.languages.promql = {\n    'comment': {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true\n    },\n    'vector-match': {\n      // Match the comma-separated label lists inside vector matching:\n      pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n      lookbehind: true,\n      inside: {\n        'label-key': {\n          pattern: /\\b[^,]+\\b/,\n          alias: 'attr-name'\n        },\n        'punctuation': /[(),]/\n      }\n    },\n    'context-labels': {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        'label-key': {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n          alias: 'attr-name'\n        },\n        'label-value': {\n          pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n          greedy: true,\n          alias: 'attr-value'\n        },\n        'punctuation': /\\{|\\}|=~?|![=~]|,/\n      }\n    },\n    'context-range': [{\n      pattern: /\\[[\\w\\s:]+\\]/,\n      // [1m]\n      inside: {\n        'punctuation': /\\[|\\]|:/,\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }, {\n      pattern: /(\\boffset\\s+)\\w+/,\n      // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }],\n    'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n    'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n    'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n    'punctuation': /[{};()`,.[\\]]/\n  };\n})(Prism);"],"names":["Prism","vectorMatching","keywords","concat","languages","promql","pattern","lookbehind","RegExp","join","inside","alias","greedy"],"sourceRoot":""}