{"version":3,"file":"70468-331bd7e846284a0bfa37.js","mappings":"yGACA,SAAWA,GAMT,IAAIC,EAAQ,sDAAsDC,OASlE,SAASC,EAAOC,EAASC,GACvB,OAAOC,OAAOF,EAAQG,QAAQ,WAAYN,GAAQI,GAGpDL,EAAMQ,UAAUC,MAAQ,CACtB,QAAW,CACTL,QAAS,QAEX,OAAU,CACRA,QAAS,MACTM,QAAQ,GAEV,OAAU,CACRN,QAAS,0BACTM,QAAQ,GAEV,QAAW,CACTN,QAASD,EAAO,yCAAyCD,QACzDS,YAAY,GAEd,gBAAiB,CACfP,QAASD,EAAO,2CAA2CD,QAC3DS,YAAY,EACZC,MAAO,WAET,kBAAmB,CACjBR,QAASD,EAAO,mCAAmCD,QACnDS,YAAY,EACZC,MAAO,WAET,KAAQ,CAAC,CACPR,QAASD,EAAO,mEAAmED,QACnFS,YAAY,EACZC,MAAO,WACN,CACDR,QAASD,EAAO,0DAA0DD,QAC1ES,YAAY,EACZC,MAAO,cAQT,QAAW,CACTR,QAASD,EAAO,qPAAqPD,QACrQS,YAAY,GAId,KAAQ,CAENP,QAASD,EAAO,2EAA2ED,QAC3FS,YAAY,GAId,OAAU,CACRP,QAASD,EAAO,2FAA2FD,OAAQ,KACnHS,YAAY,GAId,YAAe,iBAOf,gBAAiB,CACfP,QAAS,0BACTQ,MAAO,aAGXZ,EAAMQ,UAAUK,IAAMb,EAAMQ,UAAUC,MA3FxC,CA4FGT","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-kumir.js"],"sourcesContent":["/* eslint-disable regexp/no-dupe-characters-character-class */\n(function (Prism) {\n  /**\n   * Regular expression for characters that are not allowed in identifiers.\n   *\n   * @type {string}\n   */\n  var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n  /**\n   * Surround a regular expression for IDs with patterns for non-ID sequences.\n   *\n   * @param {string} pattern A regular expression for identifiers.\n   * @param {string} [flags] The regular expression flags.\n   * @returns {RegExp} A wrapped regular expression for identifiers.\n   */\n\n  function wrapId(pattern, flags) {\n    return RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n  }\n\n  Prism.languages.kumir = {\n    'comment': {\n      pattern: /\\|.*/\n    },\n    'prolog': {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'string': {\n      pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n      greedy: true\n    },\n    'boolean': {\n      pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n      lookbehind: true\n    },\n    'operator-word': {\n      pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'system-variable': {\n      pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'type': [{\n      pattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source),\n      lookbehind: true,\n      alias: 'builtin'\n    }, {\n      pattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),\n      lookbehind: true,\n      alias: 'important'\n    }],\n\n    /**\n     * Should be performed after searching for type names because of \"таб\".\n     * \"таб\" is a reserved word, but never used without a preceding type name.\n     * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n     */\n    'keyword': {\n      pattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),\n      lookbehind: true\n    },\n\n    /** Should be performed after searching for reserved words. */\n    'name': {\n      // eslint-disable-next-line regexp/no-super-linear-backtracking\n      pattern: wrapId(/(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),\n      lookbehind: true\n    },\n\n    /** Should be performed after searching for names. */\n    'number': {\n      pattern: wrapId(/(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source, 'i'),\n      lookbehind: true\n    },\n\n    /** Should be performed after searching for words. */\n    'punctuation': /:=|[(),:;\\[\\]]/,\n\n    /**\n     * Should be performed after searching for\n     * - numeric constants (because of \"+\" and \"-\");\n     * - punctuation marks (because of \":=\" and \"=\").\n     */\n    'operator-char': {\n      pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n      alias: 'operator'\n    }\n  };\n  Prism.languages.kum = Prism.languages.kumir;\n})(Prism);"],"names":["Prism","nonId","source","wrapId","pattern","flags","RegExp","replace","languages","kumir","greedy","lookbehind","alias","kum"],"sourceRoot":""}