{"version":3,"file":"97904-6687ae2438e5a63689b9.js","mappings":"wGAAAA,MAAMC,UAAUC,SAAW,CACzB,QAAW,CACTC,QAAS,gCACTC,QAAQ,GAEV,KAAQ,CACND,QAAS,8BACTC,QAAQ,GAEV,OAAU,CACRD,QAAS,sCACTC,QAAQ,GAEV,aAAc,uCACd,SAAY,CACVD,QAAS,iCACTE,YAAY,GAEd,OAAU,oHACV,QAAW,qBACX,aAAc,mBACd,SAAY,CACVF,QAAS,sBACTE,YAAY,GAEd,IAAO,CACLF,QAAS,8BACTE,YAAY,EACZC,OAAQ,CACN,SAAY,WAGhB,QAAW,mRACX,SAAY,uGACZ,YAAe,gBAEjBN,MAAMC,UAAUM,aAAa,WAAY,SAAU,CACjD,kBAAmB,CACjBJ,QAAS,2EACTC,QAAQ,EACRE,OAAQ,CACN,uBAAwB,CACtBH,QAAS,QACTK,MAAO,UAET,cAAiB,CACfL,QAAS,mEACTE,YAAY,EACZC,OAAQ,CACN,4BAA6B,CAC3BH,QAAS,YACTK,MAAO,OAETC,KAAMT,MAAMC,UAAUC,WAG1B,OAAU,cAIhBF,MAAMC,UAAUS,IAAMV,MAAMC,UAAUC","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-rescript.js"],"sourcesContent":["Prism.languages.rescript = {\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\r\\n\\\\]|\\\\(?:.|\\w+))'/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  'class-name': /\\b[A-Z]\\w*|@[a-z.]*|#[A-Za-z]\\w*|#\\d/,\n  'function': {\n    pattern: /[a-zA-Z]\\w*(?=\\()|(\\.)[a-z]\\w*/,\n    lookbehind: true\n  },\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'attr-value': /[A-Za-z]\\w*(?==)/,\n  'constant': {\n    pattern: /(\\btype\\s+)[a-z]\\w*/,\n    lookbehind: true\n  },\n  'tag': {\n    pattern: /(<)[a-z]\\w*|(?:<\\/)[a-z]\\w*/,\n    lookbehind: true,\n    inside: {\n      'operator': /<|>|\\//\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|begin|bool|class|constraint|do|done|downto|else|end|exception|external|float|for|fun|function|if|in|include|inherit|initializer|int|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|string|switch|then|to|try|type|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]?|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/,\n  'punctuation': /[(){}[\\],;.]/\n};\nPrism.languages.insertBefore('rescript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.rescript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.res = Prism.languages.rescript;"],"names":["Prism","languages","rescript","pattern","greedy","lookbehind","inside","insertBefore","alias","rest","res"],"sourceRoot":""}