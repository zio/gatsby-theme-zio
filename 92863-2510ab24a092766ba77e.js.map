{"version":3,"file":"92863-2510ab24a092766ba77e.js","mappings":"wGAAC,IAAUA,EACLC,EACAC,EAFKF,EA2DTG,MAzDID,EAAI,CAAC,MAAO,MAAO,MAAO,MAAO,QAAS,SAAU,SAAU,QAAS,eAAgB,UAAW,OAAQ,YAAYE,OADtHH,EAAI,CAAC,KAAM,WAAY,cAAe,aAAc,KAAM,WACsE,CAAC,WACrID,EAAEK,UAAUC,OAAS,CACnBC,QAAS,CACPC,QAAS,gBACTC,YAAY,GAEd,eAAgB,CACdD,QAAS,IAAIE,OAAO,OAAST,EAAEU,KAAK,KAAO,qBAC3CF,YAAY,EACZG,OAAQ,CACN,YAAa,CACXJ,QAAS,YACTK,MAAO,aAETC,YAAa,UAGjB,iBAAkB,CAChBN,QAAS,aACTI,OAAQ,CACN,YAAa,CACXJ,QAAS,gCACTK,MAAO,aAET,cAAe,CACbL,QAAS,qCACTO,QAAQ,EACRF,MAAO,cAETC,YAAa,sBAGjB,gBAAiB,CAAC,CAChBN,QAAS,eACTI,OAAQ,CACNE,YAAa,UACb,iBAAkB,CAChBN,QAAS,+BACTK,MAAO,YAGV,CACDL,QAAS,mBACTC,YAAY,EACZG,OAAQ,CACN,iBAAkB,CAChBJ,QAAS,+BACTK,MAAO,aAIbG,QAAS,IAAIN,OAAO,SAAWR,EAAES,KAAK,KAAO,OAAQ,KACrDM,SAAU,wBACVC,OAAQ,oFACRC,SAAU,mDACVL,YAAa","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-promql.min.js"],"sourcesContent":["!function (t) {\n  var n = [\"on\", \"ignoring\", \"group_right\", \"group_left\", \"by\", \"without\"],\n      a = [\"sum\", \"min\", \"max\", \"avg\", \"group\", \"stddev\", \"stdvar\", \"count\", \"count_values\", \"bottomk\", \"topk\", \"quantile\"].concat(n, [\"offset\"]);\n  t.languages.promql = {\n    comment: {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: !0\n    },\n    \"vector-match\": {\n      pattern: new RegExp(\"((?:\" + n.join(\"|\") + \")\\\\s*)\\\\([^)]*\\\\)\"),\n      lookbehind: !0,\n      inside: {\n        \"label-key\": {\n          pattern: /\\b[^,]+\\b/,\n          alias: \"attr-name\"\n        },\n        punctuation: /[(),]/\n      }\n    },\n    \"context-labels\": {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        \"label-key\": {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n          alias: \"attr-name\"\n        },\n        \"label-value\": {\n          pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n          greedy: !0,\n          alias: \"attr-value\"\n        },\n        punctuation: /\\{|\\}|=~?|![=~]|,/\n      }\n    },\n    \"context-range\": [{\n      pattern: /\\[[\\w\\s:]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]|:/,\n        \"range-duration\": {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: \"number\"\n        }\n      }\n    }, {\n      pattern: /(\\boffset\\s+)\\w+/,\n      lookbehind: !0,\n      inside: {\n        \"range-duration\": {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: \"number\"\n        }\n      }\n    }],\n    keyword: new RegExp(\"\\\\b(?:\" + a.join(\"|\") + \")\\\\b\", \"i\"),\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n    operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n    punctuation: /[{};()`,.[\\]]/\n  };\n}(Prism);"],"names":["t","n","a","Prism","concat","languages","promql","comment","pattern","lookbehind","RegExp","join","inside","alias","punctuation","greedy","keyword","function","number","operator"],"sourceRoot":""}