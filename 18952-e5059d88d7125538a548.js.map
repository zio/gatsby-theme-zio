{"version":3,"file":"18952-e5059d88d7125538a548.js","mappings":"wGAAAA,MAAMC,UAAUC,KAAOF,MAAMC,UAAUE,OAAO,QAAS,CACrD,OAAU,CAERC,QAAS,yBACTC,QAAQ,GAEV,aAAc,CAAC,CACbD,QAAS,mFACTE,YAAY,GAEd,cAEA,QAAW,gUACX,SAAY,CACVF,QAAS,wCACTC,QAAQ,GAEV,SAAY,oEAEdL,MAAMC,UAAUM,aAAa,OAAQ,SAAU,CAC7C,uBAAwB,CACtBH,QAAS,yBACTC,QAAQ,EACRG,OAAQ,CACN,cAAiB,CACfJ,QAAS,gCACTE,YAAY,EACZE,OAAQ,CACN,4BAA6B,CAC3BJ,QAAS,aACTK,MAAO,eAET,WAAc,CACZL,QAAS,UACTI,OAAQR,MAAMC,UAAUC,QAI9B,OAAU,cAIhBF,MAAMC,UAAUM,aAAa,OAAQ,aAAc,CACjD,MAAS,CACPH,QAAS,kCACTC,QAAQ,EACRG,OAAQ,CACN,cAAe,YACf,eAAgB,CACdJ,QAAS,uBACTE,YAAY,EACZG,MAAO,iBACPD,OAAQR,MAAMC,UAAUS,OAE1B,kBAAmB,eAIzBV,MAAMC,UAAUM,aAAa,OAAQ,UAAW,CAC9C,aAAgB,CACdH,QAAS,8BACTK,MAAO,YAET,SAAY,CACVL,QAAS,YACTK,MAAO,UAET,YAAe,CACbL,QAAS,mBACTK,MAAO","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-haxe.js"],"sourcesContent":["Prism.languages.haxe = Prism.languages.extend('clike', {\n  'string': {\n    // Strings can be multi-line\n    pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n    greedy: true\n  },\n  'class-name': [{\n    pattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n    lookbehind: true\n  }, // based on naming convention\n  /\\b[A-Z]\\w*/],\n  // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n  'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n  'function': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n    greedy: true\n  },\n  'operator': /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n});\nPrism.languages.insertBefore('haxe', 'string', {\n  'string-interpolation': {\n    pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{?|\\}$/,\n            alias: 'punctuation'\n          },\n          'expression': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.haxe\n          }\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n  'regex': {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n    greedy: true,\n    inside: {\n      'regex-flags': /\\b[a-z]+$/,\n      'regex-source': {\n        pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-delimiter': /^~\\/|\\/$/\n    }\n  }\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n  'preprocessor': {\n    pattern: /#(?:else|elseif|end|if)\\b.*/,\n    alias: 'property'\n  },\n  'metadata': {\n    pattern: /@:?[\\w.]+/,\n    alias: 'symbol'\n  },\n  'reification': {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: 'important'\n  }\n});"],"names":["Prism","languages","haxe","extend","pattern","greedy","lookbehind","insertBefore","inside","alias","regex"],"sourceRoot":""}