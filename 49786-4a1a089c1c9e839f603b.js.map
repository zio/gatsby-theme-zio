{"version":3,"file":"49786-4a1a089c1c9e839f603b.js","mappings":"yGAAA,SAAWA,GAET,IAAIC,EAAsB,uCAAuCC,OAC7DC,EAAoB,WAAWD,OAE/BE,EAAcD,EADO,cAAcD,OAEnCG,EAAc,gCAAgCH,OA8BlDF,EAAMM,UAAUC,SAAW,CACzB,QAAW,CAGTC,QAAS,sBACTC,QAAQ,GAEV,KAAQ,CAEND,QAAS,UACTE,OAAQ,CACN,SAAY,CAEVF,QAAS,gCACTG,YAAY,KAIlB,iBAAkB,CAEhBH,QAAS,IAAII,OAAO,OAASR,EAAc,IAAMH,EAAsB,KACvES,OAAQ,CACN,SAAY,CACVF,QAAS,IAAII,OAAO,UAAYT,EAAoB,KACpDQ,YAAY,EACZE,MAAO,YAET,mBAAoB,CAClBL,QAAS,KACTK,MAAO,WAET,iBAAkB,CAChBL,QAAS,IAAII,OAAO,gBACpBF,OAAQ,CACN,SAAY,CACVF,QAAS,IAAII,OAAO,QAAQV,OAASC,GACrCQ,YAAY,EACZE,MAAO,UAET,YAAe,WAKvB,mBAAoB,CAElBL,QAAS,IAAII,OAAO,OAASR,EAAc,IAAMH,EAAsB,KACvES,OAAQ,CACN,WAAc,CACZF,QAAS,IAAII,OAAO,UAAYT,EAAoB,KACpDQ,YAAY,EACZE,MAAO,YAET,qBAAsB,CACpBL,QAAS,KACTK,MAAO,WAET,eAtFkB,CACtBL,QAAS,aACTE,OAAQ,CACN,OAAU,CACRF,QAAS,mBACTG,YAAY,EACZE,MAAO,UAET,KAAQ,CACNL,QAAS,WACTG,YAAY,EACZE,MAAO,UAET,kBAAmB,CACjBL,QAAS,KACTK,MAAO,YAET,iCAAkC,CAChCL,QAAS,KACTK,MAAO,YAET,iBAAkB,CAChBL,QAAS,cACTG,YAAY,EACZE,MAAO,YAET,YAAe,WA+DjB,cAAe,CAGbL,QAAS,6BACTE,OAAQ,CACN,MAAS,CACPF,QAAS,YACTG,YAAY,EACZE,MAAO,YAET,iBAAkB,CAEhBL,QAAS,aACTE,OAAQ,CACN,YAAe,OACf,KAAQ,CACNF,QAAS,IAAII,OAAO,SAASV,OAASG,EAAc,KAAKH,QACzDS,YAAY,EACZE,MAAO,UAET,SAAY,IACZ,SAAY,CACVL,QAAS,MACTK,MAAO,YAIb,gBAAiB,CACfL,QAAS,KACTK,MAAO,cA7HjB,CAkIGb","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-cooklang.js"],"sourcesContent":["(function (Prism) {\n  // see https://github.com/cooklang/spec/blob/main/EBNF.md\n  var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source;\n  var multi_token_infix = /[^{}@#]+/.source;\n  var multi_token_suffix = /\\{[^}#@]*\\}/.source;\n  var multi_token = multi_token_infix + multi_token_suffix;\n  var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\n  var amount_group_impl = {\n    pattern: /\\{[^{}]*\\}/,\n    inside: {\n      'amount': {\n        pattern: /([\\{|])[^{}|*%]+/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      'unit': {\n        pattern: /(%)[^}]+/,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'servings-scaler': {\n        pattern: /\\*/,\n        alias: 'operator'\n      },\n      'servings-alternative-separator': {\n        pattern: /\\|/,\n        alias: 'operator'\n      },\n      'unit-separator': {\n        pattern: /(?:%|(\\*)%)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'punctuation': /[{}]/\n    }\n  };\n  Prism.languages.cooklang = {\n    'comment': {\n      // [- comment -]\n      // -- comment\n      pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n      greedy: true\n    },\n    'meta': {\n      // >> key: value\n      pattern: />>.*:.*/,\n      inside: {\n        'property': {\n          // key:\n          pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n          lookbehind: true\n        }\n      }\n    },\n    'cookware-group': {\n      // #...{...}, #...\n      pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\n      inside: {\n        'cookware': {\n          pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n          lookbehind: true,\n          alias: 'variable'\n        },\n        'cookware-keyword': {\n          pattern: /^#/,\n          alias: 'keyword'\n        },\n        'quantity-group': {\n          pattern: new RegExp(/\\{[^{}@#]*\\}/),\n          inside: {\n            'quantity': {\n              pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n              lookbehind: true,\n              alias: 'number'\n            },\n            'punctuation': /[{}]/\n          }\n        }\n      }\n    },\n    'ingredient-group': {\n      // @...{...}, @...\n      pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\n      inside: {\n        'ingredient': {\n          pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n          lookbehind: true,\n          alias: 'variable'\n        },\n        'ingredient-keyword': {\n          pattern: /^@/,\n          alias: 'keyword'\n        },\n        'amount-group': amount_group_impl\n      }\n    },\n    'timer-group': {\n      // ~timer{...}\n      // eslint-disable-next-line regexp/sort-alternatives\n      pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n      inside: {\n        'timer': {\n          pattern: /(^~)[^{]+/,\n          lookbehind: true,\n          alias: 'variable'\n        },\n        'duration-group': {\n          // {...}\n          pattern: /\\{[^{}]*\\}/,\n          inside: {\n            'punctuation': /[{}]/,\n            'unit': {\n              pattern: new RegExp(/(%\\s*)/.source + timer_units + /\\b/.source),\n              lookbehind: true,\n              alias: 'symbol'\n            },\n            'operator': /%/,\n            'duration': {\n              pattern: /\\d+/,\n              alias: 'number'\n            }\n          }\n        },\n        'timer-keyword': {\n          pattern: /^~/,\n          alias: 'keyword'\n        }\n      }\n    }\n  };\n})(Prism);"],"names":["Prism","single_token_suffix","source","multi_token_infix","multi_token","timer_units","languages","cooklang","pattern","greedy","inside","lookbehind","RegExp","alias"],"sourceRoot":""}