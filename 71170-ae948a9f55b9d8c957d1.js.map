{"version":3,"file":"71170-ae948a9f55b9d8c957d1.js","mappings":"yGAAA,SAAWA,GAIT,IAFA,IAAIC,EAAgB,8CAA8CC,OAEzDC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAgBA,EAAcG,QAAQ,WAAW,WAC/C,OAAOH,KAIXA,EAAgBA,EAAcG,QAAQ,UAAW,MACjDJ,EAAMK,UAAUC,IAAM,CACpB,QAAWC,OAAON,GAClB,OAAU,CACRO,QAAS,sBACTC,QAAQ,GAEV,UAAa,CAAC,CACZD,QAASD,OAAO,6DAA6DL,OAAOE,QAAQ,cAAc,WACxG,OAAOH,MAETQ,QAAQ,EACRC,MAAO,YACPC,OAAQ,CACN,QAAWJ,OAAON,GAClB,OAAU,CACRO,QAAS,sBACTC,QAAQ,GAEV,SAAY,IACZ,YAAe,mBAEhB,CACDD,QAAS,wFACTE,MAAO,cAET,QAAW,0/DACX,OAAU,6GACV,MAAS,CACPF,QAAS,kBACTE,MAAO,eAET,SAAY,8FACZ,YAAe,+CA3CnB,CA6CGV","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-coq.js"],"sourcesContent":["(function (Prism) {\n  // https://github.com/coq/coq\n  var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source;\n\n  for (var i = 0; i < 2; i++) {\n    commentSource = commentSource.replace(/<self>/g, function () {\n      return commentSource;\n    });\n  }\n\n  commentSource = commentSource.replace(/<self>/g, '[]');\n  Prism.languages.coq = {\n    'comment': RegExp(commentSource),\n    'string': {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    'attribute': [{\n      pattern: RegExp(/#\\[(?:[^\\[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(/<comment>/g, function () {\n        return commentSource;\n      })),\n      greedy: true,\n      alias: 'attr-name',\n      inside: {\n        'comment': RegExp(commentSource),\n        'string': {\n          pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n          greedy: true\n        },\n        'operator': /=/,\n        'punctuation': /^#\\[|\\]$|[,()]/\n      }\n    }, {\n      pattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n      alias: 'attr-name'\n    }],\n    'keyword': /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n    'number': /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n    'punct': {\n      pattern: /@\\{|\\{\\||\\[=|:>/,\n      alias: 'punctuation'\n    },\n    'operator': /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n    'punctuation': /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n  };\n})(Prism);"],"names":["Prism","commentSource","source","i","replace","languages","coq","RegExp","pattern","greedy","alias","inside"],"sourceRoot":""}