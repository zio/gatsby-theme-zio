{"version":3,"file":"61178-a04f34102c5e918d94c6.js","mappings":"wGACAA,MAAMC,UAAUC,MAAQ,CACtB,QAAW,CACTC,QAAS,mBACTC,QAAQ,GAEV,KAAQ,CACND,QAAS,+CACTC,QAAQ,GAEV,OAAU,CAAC,CACTD,QAAS,sCACTC,QAAQ,GACP,CACDD,QAAS,8BACTC,QAAQ,IAEV,OAAU,CACV,uCACA,oEACA,qDACA,UAAa,CACXD,QAAS,SACTE,MAAO,YAET,MAAS,CACPF,QAAS,SACTE,MAAO,YAET,gBAAiB,CACfF,QAAS,SACTE,MAAO,YAET,QAAW,CACTF,QAAS,OACTE,MAAO,UAIT,QAAW,gSACX,QAAW,qBACX,4BAA6B,CAC3BF,QAAS,yBACTE,MAAO,eAGT,SAAY,wGACZ,YAAe","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-ocaml.js"],"sourcesContent":["// https://ocaml.org/manual/lex.html\nPrism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};"],"names":["Prism","languages","ocaml","pattern","greedy","alias"],"sourceRoot":""}