{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/overview/handling-resources","result":{"data":{"mdx":{"id":"8b2d8ebf-dd48-5fb7-bc9f-6869dea97d89","slug":"overview/handling_resources","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"overview_handling_resources\",\n  \"title\": \"Handling Resources\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This section looks at some common ways to safely handle resources using ZIO.\"), mdx(\"p\", null, \"ZIO's resource management features work across synchronous, asynchronous, concurrent, and other effect types and provide strong guarantees even in the case of failure, interruption, or defects.\"), mdx(\"h2\", null, \"Finalizing\"), mdx(\"p\", null, \"ZIO provides similar functionality to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#ensuring\"), \" method. \"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \" operation guarantees that if an effect begins executing and then terminates (for whatever reason), then the finalizer will begin executing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val finalizer: UIO[Unit] = \\n  ZIO.succeed(println(\\\"Finalizing!\\\"))\\n// finalizer: UIO[Unit] = zio.ZIO$Succeed@1ce238cc\\n\\nval finalized: IO[String, Unit] = \\n  ZIO.fail(\\\"Failed!\\\").ensuring(finalizer)\\n// finalized: IO[String, Unit] = zio.ZIO$Suspend@6da9f208\\n\")), mdx(\"p\", null, \"The finalizer is not allowed to fail, which means that it must handle any errors internally.\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", finalizers can be nested and the failure of any inner finalizer will not affect outer finalizers. Nested finalizers will be executed in reverse order and linearly (not in parallel).\"), mdx(\"p\", null, \"Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \" works across all types of effects, including asynchronous and concurrent effects.\"), mdx(\"h2\", null, \"Acquire Release\"), mdx(\"p\", null, \"A common use for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" is safely acquiring and releasing resources, such as new socket connections or opened files:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val handle = openFile(name)\\n\\ntry {\\n  processFile(handle)\\n} finally closeFile(handle)\\n\")), mdx(\"p\", null, \"ZIO encapsulates this common pattern with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#acquireRelease\"), \", which allows you to specify an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"acquire\"), \" effect, which acquires a resource; a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"release\"), \" effect, which releases it; and a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"use\"), \" effect, which uses the resource.\"), mdx(\"p\", null, \"The release effect is guaranteed to be executed by the runtime system, even in the presence of errors or interruption.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val groupedFileData: IO[IOException, Unit] = \\n  ZIO.acquireReleaseWith(openFile(\\\"data.json\\\"))(closeFile) { file =>\\n    for {\\n      data    <- decodeData(file)\\n      grouped <- groupData(data)\\n    } yield grouped\\n  }\\n\")), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquireRelease\"), \" has compositional semantics, so if one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquireRelease\"), \" is nested inside another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquireRelease\"), \", and the outer resource is acquired, then the outer release will always be called, even if, for example, the inner release fails.\"), mdx(\"h2\", null, \"Next Steps\"), mdx(\"p\", null, \"If you are comfortable with resource handling, the next step is to learn about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"basic_concurrency.md\"\n  }, \"basic concurrency\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/overview/handling_resources.md"}},"staticQueryHashes":[]}