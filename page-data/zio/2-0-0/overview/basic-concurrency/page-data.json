{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/overview/basic-concurrency","result":{"data":{"mdx":{"id":"797508b1-c8a8-54d2-9372-6a7364e0e2b8","slug":"overview/basic_concurrency","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"overview_basic_concurrency\",\n  \"title\": \"Basic Concurrency\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ZIO has low-level support for concurrency using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fibers\"), \". While fibers are very powerful, they are low-level. To improve productivity, ZIO provides high-level operations built on fibers.\"), mdx(\"p\", null, \"When you can, you should always use high-level operations, rather than working with fibers directly. For the sake of completeness, this section introduces both fibers and some of the high-level operations built on them.\"), mdx(\"h2\", null, \"Fibers\"), mdx(\"p\", null, \"ZIO's concurrency is built on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fibers\"), \", which are lightweight \\\"green threads\\\" implemented by the ZIO runtime system.\"), mdx(\"p\", null, \"Unlike operating system threads, fibers consume almost no memory, have growable and shrinkable stacks, don't waste resources blocking, and will be garbage collected automatically if they are suspended and unreachable.\"), mdx(\"p\", null, \"Fibers are scheduled by the ZIO runtime and will cooperatively yield to each other, which enables multitasking, even when operating in a single-threaded environment (like JavaScript, or even the JVM when configured with one thread).\"), mdx(\"p\", null, \"All effects in ZIO are executed by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"some\"), \" fiber. If you did not create the fiber, then the fiber was created by some operation you are using (if the operation is concurrent or parallel), or by the ZIO runtime system.\"), mdx(\"p\", null, \"Even if you only write \\\"single-threaded\\\" code, with no parallel or concurrent operations, then there will be at least one fiber: the \\\"main\\\" fiber that executes your effect.\"), mdx(\"h3\", null, \"The Fiber Data Type\"), mdx(\"p\", null, \"Every ZIO fiber is responsible for executing some effect, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" data type in ZIO represents a \\\"handle\\\" on that running computation. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" data type is most similar to Scala's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" data type.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber[E, A]\"), \" data type in ZIO has two type parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"E\"), \" Failure Type\"), \". The fiber may fail with a value of this type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"A\"), \" Success Type\"), \". The fiber may succeed with a value of this type.\")), mdx(\"p\", null, \"Fibers do not have an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" type parameter, because they model effects that are already running, and which already had their required environment provided to them.\"), mdx(\"h3\", null, \"Forking Effects\"), mdx(\"p\", null, \"The most fundamental way of creating a fiber is to take an existing effect and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fork\"), \" it. Conceptually, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"forking\"), \" an effect begins executing the effect on a new fiber, giving you a reference to the newly-created \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \".\"), mdx(\"p\", null, \"The following code creates a single fiber, which executes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fib(100)\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fib(n: Long): UIO[Long] = ZIO.succeed {\\n  if (n <= 1) ZIO.succeed(n)\\n  else fib(n - 1).zipWith(fib(n - 2))(_ + _)\\n}.flatten\\n\\nval fib100Fiber: UIO[Fiber[Nothing, Long]] = \\n  for {\\n    fiber <- fib(100).fork\\n  } yield fiber\\n\")), mdx(\"h3\", null, \"Joining Fibers\"), mdx(\"p\", null, \"One of the methods on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#join\"), \", which returns an effect. The effect returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#join\"), \" will succeed or fail as per the fiber:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber   <- ZIO.succeed(\\\"Hi!\\\").fork\\n  message <- fiber.join\\n} yield message\\n\")), mdx(\"h3\", null, \"Awaiting Fibers\"), mdx(\"p\", null, \"Another method on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#await\"), \", which returns an effect containing an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Exit\"), \" value, which provides full information on how the fiber completed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber <- ZIO.succeed(\\\"Hi!\\\").fork\\n  exit  <- fiber.await\\n} yield exit\\n\")), mdx(\"h3\", null, \"Interrupting Fibers\"), mdx(\"p\", null, \"A fiber whose result is no longer needed may be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"interrupted\"), \", which immediately terminates the fiber, safely releasing all resources and running all finalizers.\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#interrupt\"), \" returns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Exit\"), \" describing how the fiber completed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber <- ZIO.succeed(\\\"Hi!\\\").forever.fork\\n  exit  <- fiber.interrupt\\n} yield exit\\n\")), mdx(\"p\", null, \"By design, the effect returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#interrupt\"), \" does not resume until the fiber has completed. If this behavior is not desired, you can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fork\"), \" the interruption itself:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber <- ZIO.succeed(\\\"Hi!\\\").forever.fork\\n  _     <- fiber.interrupt.fork // I don't care!\\n} yield ()\\n\")), mdx(\"h3\", null, \"Composing Fibers\"), mdx(\"p\", null, \"ZIO lets you compose fibers with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#zip\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#zipWith\"), \". \"), mdx(\"p\", null, \"These methods combine two fibers into a single fiber that produces the results of both. If either fiber fails, then the composed fiber will fail.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber1 <- ZIO.succeed(\\\"Hi!\\\").fork\\n  fiber2 <- ZIO.succeed(\\\"Bye!\\\").fork\\n  fiber   = fiber1.zip(fiber2)\\n  tuple  <- fiber.join\\n} yield tuple\\n\")), mdx(\"p\", null, \"Another way fibers compose is with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#orElse\"), \". If the first fiber succeeds, the composed fiber will succeed with its result; otherwise, the composed fiber will complete with the exit value of the second fiber (whether success or failure).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  fiber1 <- ZIO.fail(\\\"Uh oh!\\\").fork\\n  fiber2 <- ZIO.succeed(\\\"Hurray!\\\").fork\\n  fiber   = fiber1.orElse(fiber2)\\n  message  <- fiber.join\\n} yield message\\n\")), mdx(\"h2\", null, \"Parallelism\"), mdx(\"p\", null, \"ZIO provides many operations for performing effects in parallel. These methods are all named with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Par\"), \" suffix that helps you identify opportunities to parallelize your code.\"), mdx(\"p\", null, \"For example, the ordinary \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#zip\"), \" method zips two effects together sequentially. But there is also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#zipPar\"), \" method, which zips two effects together in parallel.\"), mdx(\"p\", null, \"The following table summarizes some of the sequential operations and their corresponding parallel versions:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Sequential\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Parallel\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Zips two effects into one\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zip\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Zips two effects into one\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipWith\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipWithPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Zips multiple effects into one\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#tupled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#tupledPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Collects from many effects\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.collectAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.collectAllPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Effectfully loop over values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.foreach\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.foreachPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Reduces many values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.reduceAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.reduceAllPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Merges many values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.mergeAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.mergeAllPar\"))))), mdx(\"p\", null, \"For all parallel operations, if one effect fails, others will be interrupted to minimize unnecessary computation.\"), mdx(\"p\", null, \"If the fail-fast behavior is not desired, potentially failing effects can be first converted into infallible effects using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#either\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#option\"), \" methods.\"), mdx(\"h2\", null, \"Racing\"), mdx(\"p\", null, \"ZIO lets you race multiple effects in parallel, returning the first successful result:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  winner <- ZIO.succeed(\\\"Hello\\\").race(ZIO.succeed(\\\"Goodbye\\\"))\\n} yield winner\\n\")), mdx(\"p\", null, \"If you want the first success or failure, rather than the first success, then you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left.either race right.either\"), \", for any effects \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \".\"), mdx(\"h2\", null, \"Timeout\"), mdx(\"p\", null, \"ZIO lets you timeout any effect using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#timeout\"), \" method, which returns a new effect that succeeds with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option\"), \". A value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \" indicates the timeout elapsed before the effect completed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"ZIO.succeed(\\\"Hello\\\").timeout(10.seconds)\\n\")), mdx(\"p\", null, \"If an effect times out, then instead of continuing to execute in the background, it will be interrupted so no resources will be wasted.\"), mdx(\"h2\", null, \"Next Steps\"), mdx(\"p\", null, \"If you are comfortable with basic concurrency, the next step is to learn about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"testing_effects.md\"\n  }, \"testing effects\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/overview/basic_concurrency.md"}},"staticQueryHashes":[]}