{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-metrics","result":{"data":{"mdx":{"id":"86c59a5c-37cd-5be0-aeee-9e6ec4fffeeb","slug":"resources/ecosystem/officials/zio-metrics","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-metrics\",\n  \"title\": \"ZIO Metrics\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-metrics\"\n  }, \"ZIO Metrcis\"), \" is a high-performance, purely-functional library for adding instrumentation to any application, with a simple web client and JMX support.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Metrics is a pure-ZIO StatsD/DogStatsD client and a thin wrapper over both \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/prometheus/client_java\"\n  }, \"Prometheus\")), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://metrics.dropwizard.io/4.2.0/manual/core.html\"\n  }, \"Dropwizard\")), \" instrumentation libraries allowing us to measure the behavior of our application in a performant purely functional manner.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to one of the following lines in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// Prometheus\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-prometheus\\\" % \\\"1.0.12\\\"\\n\\n// Dropwizard\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-dropwizard\\\" % \\\"1.0.12\\\"\\n\\n// StatsD/DogStatsD\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-statsd\\\" % \\\"1.0.12\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this example we are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio-metrics-prometheus\"), \" module. Other that initializing default exporters, we register a counter to the registry:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.Runtime\\nimport zio.console.{Console, putStrLn}\\nimport zio.metrics.prometheus._\\nimport zio.metrics.prometheus.exporters._\\nimport zio.metrics.prometheus.helpers._\\n\\nobject ZIOMetricsExample extends scala.App {\\n\\n  val myApp =\\n    for {\\n      r <- getCurrentRegistry()\\n      _ <- initializeDefaultExports(r)\\n      c <- counter.register(\\\"ServiceA\\\", Array(\\\"Request\\\", \\\"Region\\\"))\\n      _ <- c.inc(1.0, Array(\\\"GET\\\", \\\"us-west-*\\\"))\\n      _ <- c.inc(2.0, Array(\\\"POST\\\", \\\"eu-south-*\\\"))\\n      _ <- c.inc(3.0, Array(\\\"GET\\\", \\\"eu-south-*\\\"))\\n      s <- http(r, 9090)\\n      _ <- putStrLn(s\\\"The application's metric endpoint: http://localhost:${s.getPort}/\\\")\\n    } yield s\\n\\n  Runtime\\n    .unsafeFromLayer(\\n      Registry.live ++ Exporters.live ++ Console.live\\n    )\\n    .unsafeRun(myApp)\\n}\\n\")), mdx(\"p\", null, \"Now, the application's metrics are accessible via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:9090\"), \" endpoint.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-metrics.md"}},"staticQueryHashes":[]}