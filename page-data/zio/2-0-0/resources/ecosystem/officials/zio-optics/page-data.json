{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-optics","result":{"data":{"mdx":{"id":"50d82084-a02f-517b-a392-bcf57d346b94","slug":"resources/ecosystem/officials/zio-optics","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-optics\",\n  \"title\": \"ZIO Optics\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-optics\"\n  }, \"ZIO Optics\"), \" is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"When we are working with immutable nested data structures, updating and reading operations could be tedious with lots of boilerplates. Optics is a functional programming construct that makes these operations more clear and readable.\"), mdx(\"p\", null, \"Key features of ZIO Optics:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Unified Optic Data Type\"), \" \\u2014 All the data types like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Lens\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Prism\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optional\"), \", and so forth are type aliases for the core \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optic\"), \" data type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Composability\"), \" \\u2014 We can compose optics to create more advanced ones.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Embracing the Tremendous Power of Concretion\"), \" \\u2014 Using concretion instead of unnecessary abstractions, makes the API more ergonomic and easy to use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Integration with ZIO Data Types\"), \" \\u2014 It supports effectful and transactional optics that works with ZIO data structures like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TMap\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Helpful Error Channel\"), \" \\u2014 Like ZIO, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optics\"), \" data type has error channels to include failure details.\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-optics\\\" % \\\"0.1.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this example, we are going to update a nested data structure using ZIO Optics:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.optics._\\n\\ncase class Developer(name: String, manager: Manager)\\ncase class Manager(name: String, rating: Rating)\\ncase class Rating(upvotes: Int, downvotes: Int)\\n\\nval developerLens = Lens[Developer, Manager](\\n  get = developer => Right(developer.manager),\\n  set = manager => developer => Right(developer.copy(manager = manager))\\n)\\n\\nval managerLens = Lens[Manager, Rating](\\n  get = manager => Right(manager.rating),\\n  set = rating => manager => Right(manager.copy(rating = rating))\\n)\\n\\nval ratingLens = Lens[Rating, Int](\\n  get = rating => Right(rating.upvotes),\\n  set = upvotes => rating => Right(rating.copy(upvotes = upvotes))\\n)\\n\\n// Composing lenses\\nval optic = developerLens >>> managerLens >>> ratingLens\\n\\nval jane    = Developer(\\\"Jane\\\", Manager(\\\"Steve\\\", Rating(0, 0)))\\nval updated = optic.update(jane)(_ + 1)\\n\\nprintln(updated)\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=-km5ohYhJa4\"\n  }, \"Zymposium - Optics\"), \" by Adam Fraser and Kit Langton (June 2021) \\u2014 Optics are great tools for working with parts of larger data structures and come up in disguise in many places such as ZIO Test assertions.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-optics.md"}},"staticQueryHashes":[]}