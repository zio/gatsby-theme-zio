{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-schema","result":{"data":{"mdx":{"id":"559de93c-43fe-59cf-a36c-9ff7017793a2","slug":"resources/ecosystem/officials/zio-schema","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-schema\",\n  \"title\": \"ZIO Schema\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-schema\"\n  }, \"ZIO Schema\"), \" is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zio.dev\"\n  }, \"ZIO\"), \"-based library for modeling the schema of data structures as first-class values.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them as first-class values.\"), mdx(\"p\", null, \"Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth.\"), mdx(\"p\", null, \"With schema descriptions that can be automatically derived for case classes and sealed traits, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Schema\"), \" will be going to provide powerful features for free (Note that the project is in the development stage and all these features are not supported yet):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Codecs for any supported protocol (JSON, protobuf, etc.), so data structures can be serialized and deserialized in a principled way\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Diffing, patching, merging, and other generic-data-based operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Migration of data structures from one schema to another compatible schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Derivation of arbitrary type classes (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Eq\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Show\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ord\"), \", etc.) from the structure of the data\")), mdx(\"p\", null, \"When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Schema\"), \" lets us focus on data modeling and automatically tackle all the low-level, messy details for us.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-schema\\\" % \\\"0.0.6\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this simple example first, we create a schema for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" and then run the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"diff\"), \" operation on two instances of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" data type, and finally we encode a Person instance using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Protobuf\"), \" protocol:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.putStrLn\\nimport zio.schema.codec.ProtobufCodec._\\nimport zio.schema.{DeriveSchema, Schema}\\nimport zio.stream.ZStream\\nimport zio.{Chunk, ExitCode, URIO}\\n\\nfinal case class Person(name: String, age: Int, id: String)\\nobject Person {\\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\\n}\\n\\nPerson.schema\\n\\nimport zio.schema.syntax._\\n\\nPerson(\\\"Alex\\\", 31, \\\"0123\\\").diff(Person(\\\"Alex\\\", 31, \\\"124\\\"))\\n\\ndef toHex(chunk: Chunk[Byte]): String =\\n  chunk.toArray.map(\\\"%02X\\\".format(_)).mkString\\n\\nzio.Runtime.default.unsafeRun(\\n  ZStream\\n    .succeed(Person(\\\"Thomas\\\", 23, \\\"2354\\\"))\\n    .transduce(\\n      encoder(Person.schema)\\n    )\\n    .runCollect\\n    .flatMap(x => putStrLn(s\\\"Encoded data with protobuf codec: ${toHex(x)}\\\"))\\n)\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=GfNiDaL5aIM\"\n  }, \"Zymposium - ZIO Schema\"), \" by John A. De Goes, Adam Fraser and Kit Langton (May 2021)\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-schema.md"}},"staticQueryHashes":[]}