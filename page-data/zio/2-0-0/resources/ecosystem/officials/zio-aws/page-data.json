{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-aws","result":{"data":{"mdx":{"id":"1fad229f-7f46-5d90-9871-64fbe1739934","slug":"resources/ecosystem/officials/zio-aws","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-aws\",\n  \"title\": \"ZIO AWS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-aws\"\n  }, \"ZIO AWS\"), \" is a low-level AWS wrapper for ZIO for all the AWS services using the AWS Java SDK v2.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"The goal is to have access to all AWS functionality for cases when only simple, direct access is needed from a ZIO application, or to be used as a building block for higher-level wrappers around specific services.\"), mdx(\"p\", null, \"Key features of ZIO AWS:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Common configuration layer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ZIO module layer per AWS service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wrapper for all operations on all services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTTP service implementations for functional Scala HTTP libraries, injected through ZIO\\u2019s module system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ZStream wrapper around paginated operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Service-specific extra configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More idiomatic Scala request and response types wrapping the Java classes\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"There are tones of artifacts \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zio.github.io/zio-aws/docs/artifacts.html\"\n  }, \"published\"), \" for each AWS service. We can pick whichever services we need.\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"The following example uses the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ElasticBeanstalk\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"EC2\"), \" APIs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-aws-core\\\"             % \\\"5.17.102.7\\\",\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-aws-ec2\\\"              % \\\"5.17.102.7\\\",\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-aws-elasticbeanstalk\\\" % \\\"5.17.102.7\\\",\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-aws-netty\\\"            % \\\"5.17.102.7\\\"\\n\")), mdx(\"p\", null, \"And here is the example code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.aws.core.AwsError\\nimport zio.aws.core.config.AwsConfig\\nimport zio.aws.ec2.Ec2\\nimport zio.aws.ec2.model._\\nimport zio.aws.ec2.model.primitives._\\nimport zio.aws.elasticbeanstalk.ElasticBeanstalk\\nimport zio.aws.elasticbeanstalk.model._\\nimport zio.aws.elasticbeanstalk.model.primitives._\\nimport zio.aws.netty.NettyHttpClient\\nimport zio._\\nimport zio.stream._\\n\\nobject ZIOAWSExample extends ZIOAppDefault {\\n  val program: ZIO[Console & Ec2 & ElasticBeanstalk, AwsError, Unit] =\\n    for {\\n      appsResult <- ElasticBeanstalk.describeApplications(\\n        DescribeApplicationsRequest(applicationNames = Some(List(ApplicationName(\\\"my-service\\\"))))\\n      )\\n      app <- appsResult.getApplications.map(_.headOption)\\n      _ <- app match {\\n        case Some(appDescription) =>\\n          for {\\n            applicationName <- appDescription.getApplicationName\\n            _ <- Console\\n              .printLine(\\n                s\\\"Got application description for $applicationName\\\"\\n              )\\n              .ignore\\n\\n            envStream = ElasticBeanstalk.describeEnvironments(\\n              DescribeEnvironmentsRequest(applicationName =\\n                Some(applicationName)\\n              )\\n            )\\n\\n            _ <- envStream.run(Sink.foreach { env =>\\n              env.getEnvironmentName.flatMap { environmentName =>\\n                (for {\\n                  environmentId <- env.getEnvironmentId\\n                  _ <- Console\\n                    .printLine(\\n                      s\\\"Getting the EB resources of $environmentName\\\"\\n                    )\\n                    .ignore\\n\\n                  resourcesResult <-\\n                    ElasticBeanstalk.describeEnvironmentResources(\\n                      DescribeEnvironmentResourcesRequest(environmentId =\\n                        Some(environmentId)\\n                      )\\n                    )\\n                  resources <- resourcesResult.getEnvironmentResources\\n                  _ <- Console\\n                    .printLine(\\n                      s\\\"Getting the EC2 instances in $environmentName\\\"\\n                    )\\n                    .ignore\\n                  instances <- resources.getInstances\\n                  instanceIds <- ZIO.foreach(instances)(_.getId)\\n                  _ <- Console\\n                    .printLine(\\n                      s\\\"Instance IDs are ${instanceIds.mkString(\\\", \\\")}\\\"\\n                    )\\n                    .ignore\\n\\n                  reservationsStream = Ec2.describeInstances(\\n                    DescribeInstancesRequest(instanceIds = Some(instanceIds.map(id => zio.aws.ec2.model.primitives.InstanceId(ResourceId.unwrap(id)))))\\n                  )\\n                  _ <- reservationsStream.run(Sink.foreach { reservation =>\\n                    reservation.getInstances\\n                      .flatMap { instances =>\\n                        ZIO.foreach(instances) { instance =>\\n                          for {\\n                            id <- instance.getInstanceId\\n                            typ <- instance.getInstanceType\\n                            launchTime <- instance.getLaunchTime\\n                            _ <- Console.printLine(s\\\"  instance $id:\\\").ignore\\n                            _ <- Console.printLine(s\\\"    type: $typ\\\").ignore\\n                            _ <- Console\\n                              .printLine(\\n                                s\\\"    launched at: $launchTime\\\"\\n                              )\\n                              .ignore\\n                          } yield ()\\n                        }\\n                      }\\n                  })\\n                } yield ()).catchAll { error =>\\n                  Console\\n                    .printLineError(\\n                      s\\\"Failed to get info for $environmentName: $error\\\"\\n                    )\\n                    .ignore\\n                }\\n              }\\n            })\\n          } yield ()\\n        case None =>\\n          ZIO.unit\\n      }\\n    } yield ()\\n\\n  override def run: URIO[ZEnv with ZIOAppArgs, ExitCode] = {\\n    val httpClient = NettyHttpClient.default\\n    val awsConfig = httpClient >>> AwsConfig.default\\n    val aws = awsConfig >>> (Ec2.live ++ ElasticBeanstalk.live)\\n\\n    program\\n      .provideCustomLayer(aws)\\n      .either\\n      .flatMap {\\n        case Left(error) =>\\n          Console.printLineError(s\\\"AWS error: $error\\\").ignore.as(ExitCode.failure)\\n        case Right(_) =>\\n          ZIO.unit.as(ExitCode.success)\\n      }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-aws.md"}},"staticQueryHashes":[]}