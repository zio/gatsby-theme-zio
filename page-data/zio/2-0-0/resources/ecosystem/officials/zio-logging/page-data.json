{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-logging","result":{"data":{"mdx":{"id":"a4169c28-14a7-56fa-ab9d-db496f67e775","slug":"resources/ecosystem/officials/zio-logging","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-logging\",\n  \"title\": \"ZIO Logging\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-logging\"\n  }, \"ZIO Logging\"), \" is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"When we are writing our applications using ZIO effects, to log easy way we need a ZIO native solution for logging. ZIO Logging is an environmental effect for adding logging into our ZIO applications.\"), mdx(\"p\", null, \"Key features of ZIO Logging:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Native\"), \" \\u2014 Other than it is a type-safe and purely functional solution, it leverages ZIO's features.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Multi-Platform\"), \" - It supports both JVM and JS platforms.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Composable\"), \" \\u2014 Loggers are composable together via contraMap.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pluggable Backends\"), \" \\u2014 Support multiple backends like ZIO Console, SLF4j, JS Console, JS HTTP endpoint.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Logger Context\"), \" \\u2014 It has a first citizen \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Logger Context\"), \" implemented on top of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FiberRef\"), \". The Logger Context maintains information like logger name, filters, correlation id, and so forth across different fibers. It supports \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Mapped Diagnostic Context (MDC)\"), \" which manages contextual information across fibers in a concurrent environment.\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-logging\\\" % \\\"0.5.14\\\" \\n\")), mdx(\"p\", null, \"There are also some optional dependencies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-slf4j\"), \" \\u2014 SLF4j integration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-slf4j-bridge\"), \" \\u2014 Using ZIO Logging for SLF4j loggers, usually third-party non-ZIO libraries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-jsconsole\"), \" \\u2014 Scala.js console integration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-jshttp\"), \" \\u2014 Scala.js HTTP Logger which sends logs to a backend via Ajax POST\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of ZIO Logging which demonstrates a simple application of ZIO logging along with its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Logger Context\"), \" feature:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.clock.Clock\\nimport zio.duration.durationInt\\nimport zio.logging._\\nimport zio.random.Random\\nimport zio.{ExitCode, NonEmptyChunk, ZIO}\\n\\nobject ZIOLoggingExample extends zio.App {\\n\\n  val myApp: ZIO[Logging with Clock with Random, Nothing, Unit] =\\n    for {\\n      _ <- log.info(\\\"Hello from ZIO logger\\\")\\n      _ <-\\n        ZIO.foreachPar(NonEmptyChunk(\\\"UserA\\\", \\\"UserB\\\", \\\"UserC\\\")) { user =>\\n          log.locally(UserId(Some(user))) {\\n            for {\\n              _ <- log.info(\\\"User validation\\\")\\n              _ <- zio.random\\n                .nextIntBounded(1000)\\n                .flatMap(t => ZIO.sleep(t.millis))\\n              _ <- log.info(\\\"Connecting to the database\\\")\\n              _ <- zio.random\\n                .nextIntBounded(100)\\n                .flatMap(t => ZIO.sleep(t.millis))\\n              _ <- log.info(\\\"Releasing resources.\\\")\\n            } yield ()\\n          }\\n\\n        }\\n    } yield ()\\n\\n  type UserId = String\\n  def UserId: LogAnnotation[Option[UserId]] = LogAnnotation[Option[UserId]](\\n    name = \\\"user-id\\\",\\n    initialValue = None,\\n    combine = (_, r) => r,\\n    render = _.map(userId => s\\\"[user-id: $userId]\\\")\\n      .getOrElse(\\\"undefined-user-id\\\")\\n  )\\n\\n  val env =\\n    Logging.console(\\n      logLevel = LogLevel.Info,\\n      format =\\n        LogFormat.ColoredLogFormat((ctx, line) => s\\\"${ctx(UserId)} $line\\\")\\n    ) >>> Logging.withRootLoggerName(\\\"MyZIOApp\\\")\\n\\n  override def run(args: List[String]) =\\n    myApp.provideCustom(env).as(ExitCode.success)\\n}\\n\")), mdx(\"p\", null, \"The output should be something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"2021-07-09 00:14:47.457+0000  info [MyZIOApp] undefined-user-id Hello from ZIO logger\\n2021-07-09 00:14:47.807+0000  info [MyZIOApp] [user-id: UserA] User validation\\n2021-07-09 00:14:47.808+0000  info [MyZIOApp] [user-id: UserC] User validation\\n2021-07-09 00:14:47.818+0000  info [MyZIOApp] [user-id: UserB] User validation\\n2021-07-09 00:14:48.290+0000  info [MyZIOApp] [user-id: UserC] Connecting to the database\\n2021-07-09 00:14:48.299+0000  info [MyZIOApp] [user-id: UserA] Connecting to the database\\n2021-07-09 00:14:48.321+0000  info [MyZIOApp] [user-id: UserA] Releasing resources.\\n2021-07-09 00:14:48.352+0000  info [MyZIOApp] [user-id: UserC] Releasing resources.\\n2021-07-09 00:14:48.820+0000  info [MyZIOApp] [user-id: UserB] Connecting to the database\\n2021-07-09 00:14:48.882+0000  info [MyZIOApp] [user-id: UserB] Releasing resources.\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-logging.md"}},"staticQueryHashes":[]}