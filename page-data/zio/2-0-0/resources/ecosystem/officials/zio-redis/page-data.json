{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-redis","result":{"data":{"mdx":{"id":"2e46a05b-9bf4-58f9-bea2-9544e9ece3fd","slug":"resources/ecosystem/officials/zio-redis","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-redis\",\n  \"title\": \"ZIO Redis\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-redis\"\n  }, \"ZIO Redis\"), \" is a ZIO native Redis client.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Redis is in the experimental phase of development, but its goals are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Type Safety\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Minimum Dependency\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Native\"))), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"Since the ZIO Redis is in the experimental phase, it is not released yet.\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"To execute our ZIO Redis effect, we should provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RedisExecutor\"), \" layer to that effect. To create this layer we should also provide the following layers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Logging\"), \" \\u2014 For simplicity, we ignored the logging functionality.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"RedisConfig\"), \" \\u2014 Using default one, will connect to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"localhost:6379\"), \" Redis instance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Codec\"), \" \\u2014 In this example, we are going to use the built-in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"StringUtf8Codec\"), \" codec.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.{Console, putStrLn}\\nimport zio.duration._\\nimport zio.logging.Logging\\nimport zio.redis._\\nimport zio.redis.codec.StringUtf8Codec\\nimport zio.schema.codec.Codec\\nimport zio.{ExitCode, URIO, ZIO, ZLayer}\\n\\nobject ZIORedisExample extends zio.App {\\n\\n  val myApp: ZIO[Console with RedisExecutor, RedisError, Unit] = for {\\n    _ <- set(\\\"myKey\\\", 8L, Some(1.minutes))\\n    v <- get[String, Long](\\\"myKey\\\")\\n    _ <- putStrLn(s\\\"Value of myKey: $v\\\").orDie\\n    _ <- hSet(\\\"myHash\\\", (\\\"k1\\\", 6), (\\\"k2\\\", 2))\\n    _ <- rPush(\\\"myList\\\", 1, 2, 3, 4)\\n    _ <- sAdd(\\\"mySet\\\", \\\"a\\\", \\\"b\\\", \\\"a\\\", \\\"c\\\")\\n  } yield ()\\n\\n  val layer: ZLayer[Any, RedisError.IOError, RedisExecutor] =\\n    Logging.ignore ++ ZLayer.succeed(RedisConfig.Default) ++ ZLayer.succeed(StringUtf8Codec) >>> RedisExecutor.live\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.provideCustom(layer).exitCode\\n}\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=yqFt3b3RBkI\"\n  }, \"ZIO Redis\"), \" by Dejan Mijic \\u2014 Redis is one of the most commonly used in-memory data structure stores. In this talk, Dejan will introduce ZIO Redis, a purely functional, strongly typed client library backed by ZIO, with excellent performance and extensive support for nearly all of Redis' features. He will explain the library design using the bottom-up approach - from communication protocol to public APIs. Finally, he will wrap the talk by demonstrating the client's usage and discussing its performance characteristics.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-redis.md"}},"staticQueryHashes":[]}