{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-s3","result":{"data":{"mdx":{"id":"2c8b4d9f-7e69-572e-af65-c32af0d4f6e8","slug":"resources/ecosystem/officials/zio-s3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-s3\",\n  \"title\": \"ZIO S3\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-s3\"\n  }, \"ZIO S3\"), \" is an S3 client for ZIO.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-s3\\\" % \\\"0.3.5\\\" \\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of creating a bucket and adding an object into it. To run this example, we need to run an instance of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Minio\"), \" which is object storage compatible with S3:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker run -p 9000:9000 -e MINIO_ACCESS_KEY=MyKey -e MINIO_SECRET_KEY=MySecret minio/minio  server --compat /data\\n\")), mdx(\"p\", null, \"In this example we create a bucket and then add a JSON object to it and then retrieve that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\\nimport software.amazon.awssdk.regions.Region\\nimport zio.console.putStrLn\\nimport zio.s3._\\nimport zio.stream.{ZStream, ZTransducer}\\nimport zio.{Chunk, ExitCode, URIO}\\n\\nimport java.net.URI\\n\\nobject ZIOS3Example extends zio.App {\\n\\n  val myApp = for {\\n    _ <- createBucket(\\\"docs\\\")\\n    json = Chunk.fromArray(\\\"\\\"\\\"{  \\\"id\\\" : 1 , \\\"name\\\" : \\\"A1\\\" }\\\"\\\"\\\".getBytes)\\n    _ <- putObject(\\n      bucketName = \\\"docs\\\",\\n      key = \\\"doc1\\\",\\n      contentLength = json.length,\\n      content = ZStream.fromChunk(json),\\n      options = UploadOptions.fromContentType(\\\"application/json\\\")\\n    )\\n    _ <- getObject(\\\"docs\\\", \\\"doc1\\\")\\n      .transduce(ZTransducer.utf8Decode)\\n      .foreach(putStrLn(_))\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp\\n      .provideCustom(\\n        live(\\n          Region.CA_CENTRAL_1,\\n          AwsBasicCredentials.create(\\\"MyKey\\\", \\\"MySecret\\\"),\\n          Some(URI.create(\\\"http://localhost:9000\\\"))\\n        )\\n      )\\n      .exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-s3.md"}},"staticQueryHashes":[]}