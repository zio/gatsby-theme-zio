{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-kafka","result":{"data":{"mdx":{"id":"221eb8f1-8802-558f-9f86-65089ad1e8c6","slug":"resources/ecosystem/officials/zio-kafka","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-kafka\",\n  \"title\": \"ZIO Kafka\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-kafka\"\n  }, \"ZIO Kafka\"), \" is a Kafka client for ZIO. It provides a purely functional, streams-based interface to the Kafka client and integrates effortlessly with ZIO and ZIO Streams.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Apache Kafka is a distributed event streaming platform that acts as a distributed publish-subscribe messaging system. It enables us to build distributed streaming data pipelines and event-driven applications.\"), mdx(\"p\", null, \"Kafka has a mature Java client for producing and consuming events, but it has a low-level API. ZIO Kafka is a ZIO native client for Apache Kafka. It has a high-level streaming API on top of the Java client. So we can produce and consume events using the declarative concurrency model of ZIO Streams.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-kafka\\\" % \\\"0.15.0\\\" \\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's write a simple Kafka producer and consumer using ZIO Kafka with ZIO Streams. Before everything, we need a running instance of Kafka. We can do that by saving the following docker-compose script in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" file and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-docker\"\n  }, \"version: '2'\\nservices:\\n  zookeeper:\\n    image: confluentinc/cp-zookeeper:latest\\n    environment:\\n      ZOOKEEPER_CLIENT_PORT: 2181\\n      ZOOKEEPER_TICK_TIME: 2000\\n    ports:\\n      - 22181:2181\\n  \\n  kafka:\\n    image: confluentinc/cp-kafka:latest\\n    depends_on:\\n      - zookeeper\\n    ports:\\n      - 29092:29092\\n    environment:\\n      KAFKA_BROKER_ID: 1\\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\\n      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\\n\")), mdx(\"p\", null, \"Now, we can run our ZIO Kafka Streaming application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.console.putStrLn\\nimport zio.duration.durationInt\\nimport zio.kafka.consumer.{Consumer, ConsumerSettings, _}\\nimport zio.kafka.producer.{Producer, ProducerSettings}\\nimport zio.kafka.serde._\\nimport zio.stream.ZStream\\n\\nobject ZIOKafkaProducerConsumerExample extends zio.App {\\n  val producer =\\n    ZStream\\n      .repeatEffect(zio.random.nextIntBetween(0, Int.MaxValue))\\n      .schedule(Schedule.fixed(2.seconds))\\n      .mapZIO { random =>\\n        Producer.produce[Any, Long, String](\\n          topic = \\\"random\\\",\\n          key = random % 4,\\n          value = random.toString,\\n          keySerializer = Serde.long,\\n          valueSerializer = Serde.string\\n        )\\n      }\\n      .drain\\n\\n  val consumer =\\n    Consumer\\n      .subscribeAnd(Subscription.topics(\\\"random\\\"))\\n      .plainStream(Serde.long, Serde.string)\\n      .tap(r => putStrLn(r.value))\\n      .map(_.offset)\\n      .aggregateAsync(Consumer.offsetBatches)\\n      .mapZIO(_.commit)\\n      .drain\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    producer\\n      .merge(consumer)\\n      .runDrain\\n      .provideCustom(appLayer)\\n      .exitCode\\n\\n  def producerLayer = ZLayer.fromManaged(\\n    Producer.make(\\n      settings = ProducerSettings(List(\\\"localhost:29092\\\"))\\n    )\\n  )\\n\\n  def consumerLayer = ZLayer.fromManaged(\\n    Consumer.make(\\n      ConsumerSettings(List(\\\"localhost:29092\\\")).withGroupId(\\\"group\\\")\\n    )\\n  )\\n\\n  def appLayer = producerLayer ++ consumerLayer\\n}\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=GECv1ONieLw\"\n  }, \"ZIO WORLD - ZIO Kafka\"), \" by Aleksandar Skrbic (March 2020) \\u2014 Aleksandar Skrbic presented ZIO Kafka, a critical library for the modern Scala developer, which hides some of the complexities of Kafka.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-kafka.md"}},"staticQueryHashes":[]}