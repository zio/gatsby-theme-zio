{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-sqs","result":{"data":{"mdx":{"id":"d4bcd371-75fa-565a-9913-7901fc69d9dd","slug":"resources/ecosystem/officials/zio-sqs","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-sqs\",\n  \"title\": \"ZIO SQS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-sqs\"\n  }, \"ZIO SQS\"), \" is a ZIO-powered client for AWS SQS. It is built on top of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics.html\"\n  }, \"AWS SDK for Java 2.0\"), \" via the automatically generated wrappers from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-aws\"\n  }, \"zio-aws\"), \".\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO SQS enables us to produce and consume elements to/from the Amazon SQS service. It is integrated with ZIO Streams, so we can produce and consume elements in a streaming fashion, element by element or micro-batching.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-sqs\\\" % \\\"0.4.2\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this example we produce a stream of events to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyQueue\"), \" and then consume them from that queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.github.vigoo.zioaws\\nimport io.github.vigoo.zioaws.core.config.CommonAwsConfig\\nimport io.github.vigoo.zioaws.sqs.Sqs\\nimport software.amazon.awssdk.auth.credentials.{\\n  AwsBasicCredentials,\\n  StaticCredentialsProvider\\n}\\nimport software.amazon.awssdk.regions.Region\\nimport zio.clock.Clock\\nimport zio.sqs.producer.{Producer, ProducerEvent}\\nimport zio.sqs.serialization.Serializer\\nimport zio.sqs.{SqsStream, SqsStreamSettings, Utils}\\nimport zio.stream.ZStream\\nimport zio.{ExitCode, RIO, URIO, ZLayer, _}\\n\\nobject ProducerConsumerExample extends zio.App {\\n  val queueName = \\\"MyQueue\\\"\\n\\n  val client: ZLayer[Any, Throwable, Sqs] = zioaws.netty.default ++\\n    ZLayer.succeed(\\n      CommonAwsConfig(\\n        region = Some(Region.of(\\\"ap-northeast-2\\\")),\\n        credentialsProvider = StaticCredentialsProvider.create(\\n          AwsBasicCredentials.create(\\\"key\\\", \\\"key\\\")\\n        ),\\n        endpointOverride = None,\\n        commonClientConfig = None\\n      )\\n    ) >>>\\n    zioaws.core.config.configured() >>>\\n    zioaws.sqs.live\\n\\n  val stream: ZStream[Any, Nothing, ProducerEvent[String]] =\\n    ZStream.iterate(0)(_ + 1).map(_.toString).map(ProducerEvent(_))\\n\\n  val program: RIO[Sqs with Clock, Unit] = for {\\n    _        <- Utils.createQueue(queueName)\\n    queueUrl <- Utils.getQueueUrl(queueName)\\n    producer = Producer.make(queueUrl, Serializer.serializeString)\\n    _ <- producer.use { p =>\\n      p.sendStream(stream).runDrain\\n    }\\n    _ <- SqsStream(\\n      queueUrl,\\n      SqsStreamSettings(stopWhenQueueEmpty = true, waitTimeSeconds = Some(3))\\n    ).foreach(msg => UIO(println(msg.body)))\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    program.provideCustom(client).exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-sqs.md"}},"staticQueryHashes":[]}