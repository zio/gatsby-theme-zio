{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-query","result":{"data":{"mdx":{"id":"394fe8e6-40b9-51f9-b9af-e56a335ab72e","slug":"resources/ecosystem/officials/zio-query","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-query\",\n  \"title\": \"ZIO Query\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-query\"\n  }, \"ZIO Query\"), \" is a library for writing optimized queries to data sources in a high-level compositional style. It can add efficient pipelining, batching, and caching to any data source.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Some key features of ZIO Query:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Batching\"), \" \\u2014 ZIO Query detects parts of composite queries that can be executed in parallel without changing the semantics of the query.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pipelining\"), \" \\u2014 ZIO Query detects parts of composite queries that can be combined together for fewer individual requests to the data source.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Caching\"), \" \\u2014 ZIO Query can transparently cache read queries to minimize the cost of fetching the same item repeatedly in the scope of a query.\"))), mdx(\"p\", null, \"Assume we have the following database access layer APIs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def getAllUserIds: ZIO[Any, Nothing, List[Int]] = {\\n  // Get all user IDs e.g. SELECT id FROM users\\n  ZIO.succeed(???)\\n}\\n\\ndef getUserNameById(id: Int): ZIO[Any, Nothing, String] = {\\n  // Get user by ID e.g. SELECT name FROM users WHERE id = $id\\n  ZIO.succeed(???)\\n}\\n\")), mdx(\"p\", null, \"We can get their corresponding usernames from the database by the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val userNames = for {\\n  ids   <- getAllUserIds\\n  names <- ZIO.foreachPar(ids)(getUserNameById)\\n} yield names\\n\")), mdx(\"p\", null, \"It works, but this is not performant. It is going to query the underlying database \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"N + 1\"), \" times.\"), mdx(\"p\", null, \"In this case, ZIO Query helps us to write an optimized query that is going to perform two queries (one for getting user IDs and one for getting all usernames).\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-query\\\" % \\\"0.2.9\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Here is an example of using ZIO Query, which optimizes multiple database queries by batching all of them in one query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.putStrLn\\nimport zio.query.{CompletedRequestMap, DataSource, Request, ZQuery}\\nimport zio.{Chunk, ExitCode, Task, URIO, ZIO}\\n\\nimport scala.collection.immutable.AbstractSeq\\n\\nobject ZQueryExample extends zio.App {\\n  case class GetUserName(id: Int) extends Request[Nothing, String]\\n\\n  lazy val UserDataSource: DataSource.Batched[Any, GetUserName] =\\n    new DataSource.Batched[Any, GetUserName] {\\n      val identifier: String = \\\"UserDataSource\\\"\\n\\n      def run(requests: Chunk[GetUserName]): ZIO[Any, Nothing, CompletedRequestMap] = {\\n        val resultMap = CompletedRequestMap.empty\\n        requests.toList match {\\n          case request :: Nil =>\\n            val result: Task[String] = {\\n              // get user by ID e.g. SELECT name FROM users WHERE id = $id\\n              ZIO.succeed(???)\\n            }\\n\\n            result.either.map(resultMap.insert(request))\\n\\n          case batch: Seq[GetUserName] =>\\n            val result: Task[List[(Int, String)]] = {\\n              // get multiple users at once e.g. SELECT id, name FROM users WHERE id IN ($ids)\\n              ZIO.succeed(???)\\n            }\\n\\n            result.fold(\\n              err =>\\n                requests.foldLeft(resultMap) { case (map, req) =>\\n                  map.insert(req)(Left(err))\\n                },\\n              _.foldLeft(resultMap) { case (map, (id, name)) =>\\n                map.insert(GetUserName(id))(Right(name))\\n              }\\n            )\\n        }\\n      }\\n    }\\n\\n  def getUserNameById(id: Int): ZQuery[Any, Nothing, String] =\\n    ZQuery.fromRequest(GetUserName(id))(UserDataSource)\\n\\n  val query: ZQuery[Any, Nothing, List[String]] =\\n    for {\\n      ids <- ZQuery.succeed(1 to 10)\\n      names <- ZQuery.foreachPar(ids)(id => getUserNameById(id)).map(_.toList)\\n    } yield (names)\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    query.run\\n      .tap(usernames => putStrLn(s\\\"Usernames: $usernames\\\"))\\n      .exitCode\\n}\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=rUUxDXJMzJo\"\n  }, \"Wicked Fast API Calls with ZIO Query\"), \" by Adam Fraser (July 2020) (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=rUUxDXJMzJo\"\n  }, \"https://www.youtube.com/watch?v=rUUxDXJMzJo\"), \")\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-query.md"}},"staticQueryHashes":[]}