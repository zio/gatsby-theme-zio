{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/officials/zio-rocksdb","result":{"data":{"mdx":{"id":"3500deeb-aaca-56aa-9eb3-3d71a49e769d","slug":"resources/ecosystem/officials/zio-rocksdb","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-rocksdb\",\n  \"title\": \"ZIO RocksDB\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-rocksdb\"\n  }, \"ZIO RocksDB\"), \" is a ZIO-based interface to RocksDB.\"), mdx(\"p\", null, \"Rocksdb is an embeddable persistent key-value store that is optimized for fast storage. ZIO RocksDB provides us a functional ZIO wrapper around its Java API.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-rocksdb\\\" % \\\"0.3.0\\\" \\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"An example of writing and reading key/value pairs and also using transactional operations when using RocksDB:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console._\\nimport zio.rocksdb.{RocksDB, Transaction, TransactionDB}\\nimport zio.{URIO, ZIO}\\n\\nimport java.nio.charset.StandardCharsets._\\n\\nobject ZIORocksDBExample extends zio.App {\\n\\n  private def bytesToString(bytes: Array[Byte]): String = new String(bytes, UTF_8)\\n  private def bytesToInt(bytes: Array[Byte]): Int = bytesToString(bytes).toInt\\n\\n  val job1: ZIO[Console with RocksDB, Throwable, Unit] =\\n    for {\\n      _ <- RocksDB.put(\\n        \\\"Key\\\".getBytes(UTF_8),\\n        \\\"Value\\\".getBytes(UTF_8)\\n      )\\n      result <- RocksDB.get(\\\"Key\\\".getBytes(UTF_8))\\n      stringResult = result.map(bytesToString)\\n      _ <- putStrLn(s\\\"value: $stringResult\\\")\\n    } yield ()\\n\\n\\n  val job2: ZIO[Console with TransactionDB, Throwable, Unit] =\\n    for {\\n      key <- ZIO.succeed(\\\"COUNT\\\".getBytes(UTF_8))\\n      _ <- TransactionDB.put(key, 0.toString.getBytes(UTF_8))\\n      _ <- ZIO.foreachPar(0 until 10) { _ =>\\n        TransactionDB.atomically {\\n          Transaction.getForUpdate(key, exclusive = true) >>= { iCount =>\\n            Transaction.put(key, iCount.map(bytesToInt).map(_ + 1).getOrElse(-1).toString.getBytes(UTF_8))\\n          }\\n        }\\n      }\\n      value <- TransactionDB.get(key)\\n      counterValue = value.map(bytesToInt)\\n      _ <- putStrLn(s\\\"The value of counter: $counterValue\\\") // Must be 10\\n    } yield ()\\n\\n  private val transactional_db =\\n    TransactionDB.live(new org.rocksdb.Options().setCreateIfMissing(true), \\\"tr_db\\\")\\n\\n  private val rocks_db =\\n    RocksDB.live(new org.rocksdb.Options().setCreateIfMissing(true), \\\"rocks_db\\\")\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, Int] =\\n    (job1 <*> job2)\\n      .provideCustom(transactional_db ++ rocks_db)\\n      .foldCauseZIO(cause => putStrLn(cause.prettyPrint) *> ZIO.succeed(1), _ => ZIO.succeed(0))\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/officials/zio-rocksdb.md"}},"staticQueryHashes":[]}