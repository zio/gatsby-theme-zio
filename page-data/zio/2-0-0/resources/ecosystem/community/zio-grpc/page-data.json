{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-grpc","result":{"data":{"mdx":{"id":"a99ff125-b9de-51de-95d3-4af42b9e4e44","slug":"resources/ecosystem/community/zio-grpc","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-grpc\",\n  \"title\": \"ZIO gRPC\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://scalapb.github.io/zio-grpc/\"\n  }, \"ZIO-gRPC\"), \" lets us write purely functional gRPC servers and clients.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Key features of ZIO gRPC:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Functional and Type-safe\"), \" \\u2014 Use the power of Functional Programming and the Scala compiler to build robust, correct and fully featured gRPC servers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Support for Streaming\"), \" \\u2014 Use ZIO's feature-rich \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZStream\"), \"s to create server-streaming, client-streaming, and bi-directionally streaming RPC endpoints.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Highly Concurrent\"), \" \\u2014 Leverage the power of ZIO to build asynchronous clients and servers without deadlocks and race conditions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Resource Safety\"), \" \\u2014 Safely cancel an RPC call by interrupting the effect. Resources on the server will never leak!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Scala.js Support\"), \" \\u2014 ZIO gRPC comes with Scala.js support, so we can send RPCs to our service from the browser.\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"First of all we need to add following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"project/plugins.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"addSbtPlugin(\\\"com.thesamet\\\" % \\\"sbt-protoc\\\" % \\\"1.0.2\\\")\\n\\nlibraryDependencies +=\\n  \\\"com.thesamet.scalapb.zio-grpc\\\" %% \\\"zio-grpc-codegen\\\" % \\\"0.5.0\\\"\\n\")), mdx(\"p\", null, \"Then in order to use this library, we need should add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"PB.targets in Compile := Seq(\\n  scalapb.gen(grpc = true) -> (sourceManaged in Compile).value / \\\"scalapb\\\",\\n  scalapb.zio_grpc.ZioCodeGenerator -> (sourceManaged in Compile).value / \\\"scalapb\\\"\\n)\\n\\nlibraryDependencies ++= Seq(\\n  \\\"io.grpc\\\" % \\\"grpc-netty\\\" % \\\"1.39.0\\\",\\n  \\\"com.thesamet.scalapb\\\" %% \\\"scalapb-runtime-grpc\\\" % scalapb.compiler.Version.scalapbVersion\\n)\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this section, we are going to implement a simple server and client for the following gRPC \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"proto\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-protobuf\"\n  }, \"syntax = \\\"proto3\\\";\\n\\noption java_multiple_files = true;\\noption java_package = \\\"io.grpc.examples.helloworld\\\";\\noption java_outer_classname = \\\"HelloWorldProto\\\";\\noption objc_class_prefix = \\\"HLW\\\";\\n\\npackage helloworld;\\n\\n// The greeting service definition.\\nservice Greeter {\\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\\n}\\n\\n// The request message containing the user's name.\\nmessage HelloRequest {\\n  string name = 1;\\n}\\n\\n// The response message containing the greetings\\nmessage HelloReply {\\n  string message = 1;\\n}\\n\")), mdx(\"p\", null, \"The hello world server would be like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.grpc.ServerBuilder\\nimport io.grpc.examples.helloworld.helloworld.ZioHelloworld.ZGreeter\\nimport io.grpc.examples.helloworld.helloworld.{HelloReply, HelloRequest}\\nimport io.grpc.protobuf.services.ProtoReflectionService\\nimport scalapb.zio_grpc.{ServerLayer, ServiceList}\\nimport zio.console.putStrLn\\nimport zio.{ExitCode, URIO, ZEnv, ZIO}\\n\\nobject HelloWorldServer extends zio.App {\\n\\n  val helloService: ZGreeter[ZEnv, Any] =\\n    (request: HelloRequest) =>\\n      putStrLn(s\\\"Got request: $request\\\") *>\\n        ZIO.succeed(HelloReply(s\\\"Hello, ${request.name}\\\"))\\n\\n\\n  val myApp = for {\\n    _ <- putStrLn(\\\"Server is running. Press Ctrl-C to stop.\\\")\\n    _ <- ServerLayer\\n      .fromServiceList(\\n        ServerBuilder\\n          .forPort(9000)\\n          .addService(ProtoReflectionService.newInstance()),\\n        ServiceList.add(helloService))\\n      .build.useForever\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")), mdx(\"p\", null, \"And this is an example of using its client:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.grpc.ManagedChannelBuilder\\nimport io.grpc.examples.helloworld.helloworld.HelloRequest\\nimport io.grpc.examples.helloworld.helloworld.ZioHelloworld.GreeterClient\\nimport scalapb.zio_grpc.ZManagedChannel\\nimport zio.console._\\nimport zio.{ExitCode, URIO}\\n\\nobject HelloWorldClient extends zio.App {\\n  def myApp =\\n    for {\\n      r <- GreeterClient.sayHello(HelloRequest(\\\"World\\\"))\\n      _ <- putStrLn(r.message)\\n    } yield ()\\n\\n  val clientLayer =\\n    GreeterClient.live(\\n      ZManagedChannel(\\n        ManagedChannelBuilder.forAddress(\\\"localhost\\\", 9000).usePlaintext()\\n      )\\n    )\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.provideCustom(clientLayer).exitCode\\n}\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=XTkhxRTH1nE\"\n  }, \"Functional, Type-safe, Testable Microservices with ZIO gRPC\"), \" by Nadav Samet (July 2020)\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-grpc.md"}},"staticQueryHashes":[]}