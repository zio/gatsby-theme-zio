{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-slick-interop","result":{"data":{"mdx":{"id":"22c5abb1-1519-5e4f-a121-dce7b4dc0e25","slug":"resources/ecosystem/community/zio-slick-interop","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-slick-interop\",\n  \"title\": \"ZIO Slick Interop\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ScalaConsultants/zio-slick-interop\"\n  }, \"ZIO Slick Interop\"), \" is a small library, that provides interop between Slick and ZIO.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"io.scalac\\\" %% \\\"zio-slick-interop\\\" % \\\"0.4.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"To run this example we should also add the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HikariCP integration for Slick\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"com.typesafe.slick\\\" %% \\\"slick-hikaricp\\\" % \\\"3.3.3\\\"\\n\")), mdx(\"p\", null, \"Here is a full working example of creating database-agnostic Slick repository:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import com.typesafe.config.ConfigFactory\\nimport slick.interop.zio.DatabaseProvider\\nimport slick.interop.zio.syntax._\\nimport slick.jdbc.H2Profile.api._\\nimport slick.jdbc.JdbcProfile\\nimport zio.console.Console\\nimport zio.interop.console.cats.putStrLn\\nimport zio.{ExitCode, IO, URIO, ZEnvironment, ZIO, ZLayer}\\n\\nimport scala.jdk.CollectionConverters._\\n\\ncase class Item(id: Long, name: String)\\n\\ntrait ItemRepository {\\n  def add(name: String): IO[Throwable, Long]\\n\\n  def getById(id: Long): IO[Throwable, Option[Item]]\\n\\n  def upsert(name: String): IO[Throwable, Long]\\n}\\n\\nobject ItemsTable {\\n  class Items(tag: Tag) extends Table[Item](\\n    _tableTag = tag,\\n    _tableName = \\\"ITEMS\\\"\\n  ) {\\n    def id = column[Long](\\\"ID\\\", O.PrimaryKey, O.AutoInc)\\n\\n    def name = column[String](\\\"NAME\\\")\\n\\n    def * = (id, name) <> ((Item.apply _).tupled, Item.unapply _)\\n  }\\n\\n  val table = TableQuery[ItemsTable.Items]\\n}\\n\\nobject SlickItemRepository {\\n  val live: ZLayer[DatabaseProvider, Throwable, ItemRepository] =\\n    ZLayer.fromServiceM { db =>\\n      db.profile.flatMap { profile =>\\n        import profile.api._\\n\\n        val initialize = ZIO.fromDBIO(ItemsTable.table.schema.createIfNotExists)\\n\\n        val repository = new ItemRepository {\\n          private val items = ItemsTable.table\\n\\n          def add(name: String): IO[Throwable, Long] =\\n            ZIO\\n              .fromDBIO((items returning items.map(_.id)) += Item(0L, name))\\n              .provideEnvironment(ZEnvironment(db))\\n\\n          def getById(id: Long): IO[Throwable, Option[Item]] = {\\n            val query = items.filter(_.id === id).result\\n\\n            ZIO.fromDBIO(query).map(_.headOption).provideEnvironment(ZEnvironment(db))\\n          }\\n\\n          def upsert(name: String): IO[Throwable, Long] =\\n            ZIO\\n              .fromDBIO { implicit ec =>\\n                (for {\\n                  itemOpt <- items.filter(_.name === name).result.headOption\\n                  id <- itemOpt.fold[DBIOAction[Long, NoStream, Effect.Write]](\\n                    (items returning items.map(_.id)) += Item(0L, name)\\n                  )(item => (items.map(_.name) update name).map(_ => item.id))\\n                } yield id).transactionally\\n              }\\n              .provideEnvironment(Environment(db))\\n        }\\n\\n        initialize.as(repository).provideEnvironment(Environment(db))\\n      }\\n    }\\n}\\n\\n\\nobject Main extends zio.App {\\n\\n  private val config = ConfigFactory.parseMap(\\n    Map(\\n      \\\"url\\\" -> \\\"jdbc:h2:mem:test1;DB_CLOSE_DELAY=-1\\\",\\n      \\\"driver\\\" -> \\\"org.h2.Driver\\\",\\n      \\\"connectionPool\\\" -> \\\"disabled\\\"\\n    ).asJava\\n  )\\n\\n  private val env: ZLayer[Any, Throwable, ItemRepository] =\\n    (ZLayer.succeed(config) ++ ZLayer.succeed[JdbcProfile](\\n      slick.jdbc.H2Profile\\n    )) >>> DatabaseProvider.live >>> SlickItemRepository.live\\n\\n  val myApp: ZIO[Console with Has[ItemRepository], Throwable, Unit] =\\n    for {\\n      repo <- ZIO.service[ItemRepository]\\n      aId1 <- repo.add(\\\"A\\\")\\n      _ <- repo.add(\\\"B\\\")\\n      a <- repo.getById(1L)\\n      b <- repo.getById(2L)\\n      aId2 <- repo.upsert(\\\"A\\\")\\n      _ <- putStrLn(s\\\"$aId1 == $aId2\\\")\\n      _ <- putStrLn(s\\\"A item: $a\\\")\\n      _ <- putStrLn(s\\\"B item: $b\\\")\\n    } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.provideCustom(env).exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-slick-interop.md"}},"staticQueryHashes":[]}