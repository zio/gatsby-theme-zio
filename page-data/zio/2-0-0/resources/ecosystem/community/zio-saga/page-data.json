{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-saga","result":{"data":{"mdx":{"id":"682bcba5-df3f-52d4-ac9f-22963b0b960f","slug":"resources/ecosystem/community/zio-saga","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-saga\",\n  \"title\": \"ZIO Saga\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/VladKopanev/zio-saga\"\n  }, \"ZIO Saga\"), \" is a distributed transaction manager using Saga Pattern.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Sometimes when we are architecting the business logic using microservice architecture we need distributed transactions that are across services.\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Saga Pattern\"), \" lets us manage distributed transactions by sequencing local transactions with their corresponding compensating actions. A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Saga Pattern\"), \" runs all operations. In the case of failure, it guarantees us to undo all previous works by running the compensating actions.\"), mdx(\"p\", null, \"ZIO Saga allows us to compose our requests and compensating actions from the Saga pattern in one transaction with no boilerplate.\"), mdx(\"p\", null, \"ZIO Saga adds a simple abstraction called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Saga\"), \" that takes the responsibility of proper composition of effects and associated compensating actions.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"com.vladkopanev\\\" %% \\\"zio-saga-core\\\" % \\\"0.4.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In the following example, all API requests have a compensating action. We compose all them together and then run the whole as one transaction:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.{IO, UIO, URIO, ZIO}\\ndef bookHotel: UIO[Unit] = IO.unit\\ndef cancelHotel: UIO[Unit] = IO.unit\\n\\ndef bookTaxi: IO[String, Unit] = IO.unit\\ndef cancelTaxi: IO[String, Unit] = IO.unit\\n\\ndef bookFlight: IO[String, Unit] = IO.unit\\ndef cancelFlight: IO[String, Unit] = IO.unit\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import com.vladkopanev.zio.saga.Saga\\nimport zio.{IO, UIO, URIO, ZIO}\\n\\nimport com.vladkopanev.zio.saga.Saga._\\n\\nval transaction: Saga[Any, String, Unit] =\\n  for {\\n    _ <- bookHotel compensate cancelHotel\\n    _ <- bookTaxi compensate cancelTaxi\\n    _ <- bookFlight compensate cancelFlight\\n  } yield ()\\n\\nval myApp: ZIO[Any, String, Unit] = transaction.transact\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-saga.md"}},"staticQueryHashes":[]}