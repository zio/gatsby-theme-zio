{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/distage","result":{"data":{"mdx":{"id":"9343080e-8031-51a6-8f9e-066c6c62b0eb","slug":"resources/ecosystem/community/distage","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"distage\",\n  \"title\": \"Distage\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://izumi.7mind.io/distage/\"\n  }, \"Distage\"), \" is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"By using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Distage\"), \" we can auto-wire all components of our application.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We don't need to manually link components together\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We don't need to manually specify the order of allocation and allocation of dependencies. This will be derived automatically from the dependency order.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can override any component within the dependency graph.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It helps us to create different configurations of our components for different use cases.\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"io.7mind.izumi\\\" %% \\\"distage-core\\\" % \\\"1.0.8\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this example we create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RandomApp\"), \" comprising two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Random\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logger\"), \" services. By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModuleDef\"), \" we \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bind\"), \" services to their implementations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import distage.{Activation, Injector, ModuleDef, Roots}\\nimport izumi.distage.model.Locator\\nimport izumi.distage.model.definition.Lifecycle\\nimport zio.{ExitCode, Task, UIO, URIO, ZIO}\\n\\nimport java.time.LocalDateTime\\n\\ntrait Random {\\n  def nextInteger: UIO[Int]\\n}\\n\\nfinal class ScalaRandom extends Random {\\n  override def nextInteger: UIO[Int] =\\n    ZIO.effectTotal(scala.util.Random.nextInt())\\n}\\n\\ntrait Logger {\\n  def log(name: String): Task[Unit]\\n}\\n\\nfinal class ConsoleLogger extends Logger {\\n  override def log(line: String): Task[Unit] = {\\n    val timeStamp = LocalDateTime.now()\\n    ZIO.effect(println(s\\\"$timeStamp: $line\\\"))\\n  }\\n}\\n\\nfinal class RandomApp(random: Random, logger: Logger) {\\n  def run: Task[Unit] = for {\\n    random <- random.nextInteger\\n    _ <- logger.log(s\\\"random number generated: $random\\\")\\n  } yield ()\\n}\\n\\nobject DistageExample extends zio.App {\\n  def RandomAppModule: ModuleDef = new ModuleDef {\\n    make[Random].from[ScalaRandom]\\n    make[Logger].from[ConsoleLogger]\\n    make[RandomApp] // `.from` is not required for concrete classes\\n  }\\n  \\n  val resource: Lifecycle[Task, Locator] = Injector[Task]().produce(\\n    plan = Injector[Task]().plan(\\n      bindings = RandomAppModule,\\n      activation = Activation.empty,\\n      roots = Roots.target[RandomApp]\\n    )\\n  )\\n\\n  val myApp: Task[Unit] = resource.use(locator => locator.get[RandomApp].run)\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/distage.md"}},"staticQueryHashes":[]}