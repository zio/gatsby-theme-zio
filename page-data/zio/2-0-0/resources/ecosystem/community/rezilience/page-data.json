{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/rezilience","result":{"data":{"mdx":{"id":"3ead1015-853d-5e22-8e4a-1207ba6bbd6e","slug":"resources/ecosystem/community/rezilience","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"rezilience\",\n  \"title\": \"Rezilience\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/svroonland/rezilience\"\n  }, \"Rezilience\"), \" is a ZIO-native library for making resilient distributed systems.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Rezilience is a ZIO-native fault tolerance library with a collection of policies for making asynchronous systems more resilient to failures inspired by Polly, Resilience4J, and Akka. It does not have external library dependencies other than ZIO.\"), mdx(\"p\", null, \"It comprises these policies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"CircuitBreaker\"), \" \\u2014 Temporarily prevent trying calls after too many failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"RateLimiter\"), \" \\u2014 Limit the rate of calls to a system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Bulkhead\"), \" \\u2014 Limit the number of in-flight calls to a system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Retry\"), \" \\u2014 Try again after transient failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Timeout\"), \" \\u2014 Interrupt execution if a call does not complete in time\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"com.github.ghostdogpr\\\" %% \\\"caliban\\\" % \\\"1.1.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of writing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Circuit Breaker\"), \" policy for calling an external API:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import nl.vroste.rezilience.CircuitBreaker.{CircuitBreakerCallError, State}\\nimport nl.vroste.rezilience._\\nimport zio._\\nimport zio.clock.Clock\\nimport zio.console.{Console, putStrLn}\\nimport zio.duration._\\n\\nobject CircuitBreakerExample extends zio.App {\\n\\n  def callExternalSystem: ZIO[Console, String, Nothing] =\\n    putStrLn(\\\"External service called, but failed!\\\").orDie *>\\n      ZIO.fail(\\\"External service failed!\\\")\\n\\n  val myApp: ZIO[Console with Clock, Nothing, Unit] =\\n    CircuitBreaker.withMaxFailures(\\n      maxFailures = 10,\\n      resetPolicy = Schedule.exponential(1.second),\\n      onStateChange = (state: State) =>\\n        ZIO(println(s\\\"State changed to $state\\\")).orDie\\n    ).use { cb =>\\n      for {\\n        _ <- ZIO.foreach_(1 to 10)(_ => cb(callExternalSystem).either)\\n        _ <- cb(callExternalSystem).catchAll(errorHandler)\\n        _ <- ZIO.sleep(2.seconds)\\n        _ <- cb(callExternalSystem).catchAll(errorHandler)\\n      } yield ()\\n    }\\n\\n  def errorHandler: CircuitBreakerCallError[String] => URIO[Console, Unit] = {\\n    case CircuitBreaker.CircuitBreakerOpen =>\\n      putStrLn(\\\"Circuit breaker blocked the call to our external system\\\").orDie\\n    case CircuitBreaker.WrappedError(error) =>\\n      putStrLn(s\\\"External system threw an exception: $error\\\").orDie\\n  }\\n  \\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/rezilience.md"}},"staticQueryHashes":[]}