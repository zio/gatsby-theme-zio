{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-arrow","result":{"data":{"mdx":{"id":"e3405bc0-a46b-5d38-8561-a4267596e4dd","slug":"resources/ecosystem/community/zio-arrow","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-arrow\",\n  \"title\": \"ZIO Arrow\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio-mesh/zio-arrow/\"\n  }, \"ZIO Arrow\"), \" provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" effect, which is a high-performance composition effect for the ZIO ecosystem.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow[E, A, B]\"), \" is an effect representing a computation parametrized over the input (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \"), and the output (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \") that may fail with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \". Arrows focus on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"composition\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"high-performance computation\"), \". They are like simple functions, but they are lifted into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" context.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" delivers three main capabilities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" High-Performance\"), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" exploits \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JVM\"), \" internals to dramatically decrease the number of allocations and dispatches, yielding an unprecedented runtime performance.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstract interface\"), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Arrow\"), \" is a more abstract data type, than ZIO Monad. It's more abstract than ZIO Streams. In a nutshell, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" allows a function-like interface that can have both different inputs and different outputs.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Easy Integration\"), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZArrow\"), \" can both input and output \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO Monad\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO Stream\"), \", simplifying application development with different ZIO Effect types.\"))), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"io.github.neurodyne\\\" %% \\\"zio-arrow\\\" % \\\"0.2.1\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In this example we are going to write a repetitive task of reading a number from standard input and then power by 2 and then print the result:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.arrow.ZArrow\\nimport zio.arrow.ZArrow._\\nimport zio.console._\\nimport zio.{ExitCode, URIO}\\n\\nimport java.io.IOException\\n\\nobject ArrowExample extends zio.App {\\n\\n  val isPositive : ZArrow[Nothing, Int, Boolean]     = ZArrow((_: Int) > 0)\\n  val toStr      : ZArrow[Nothing, Any, String]      = ZArrow((i: Any) => i.toString)\\n  val toInt      : ZArrow[Nothing, String, Int]      = ZArrow((i: String) => i.toInt)\\n  val getLine    : ZArrow[IOException, Any, String]  = ZArrow.liftM((_: Any) => getStrLn.provide(Console.live))\\n  val printStr   : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStr(line).provide(Console.live))\\n  val printLine  : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStrLn(line).provide(Console.live))\\n  val power2     : ZArrow[Nothing, Int, Double]      = ZArrow((i: Int) => Math.pow(i, 2))\\n  val enterNumber: ZArrow[Nothing, Unit, String]     = ZArrow((_: Unit) => \\\"Enter positive number (-1 to exit): \\\")\\n  val goodbye    : ZArrow[Nothing, Any, String]      = ZArrow((_: Any) => \\\"Goodbye!\\\")\\n\\n  val app: ZArrow[IOException, Unit, Boolean] =\\n    enterNumber >>> printStr >>> getLine >>> toInt >>>\\n      ifThenElse(isPositive)(\\n        power2 >>> toStr >>> printLine >>> ZArrow((_: Any) => true)\\n      )(\\n        ZArrow((_: Any) => false)\\n      )\\n\\n  val myApp = whileDo(app)(ZArrow(_ => ())) >>> goodbye >>> printLine\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.run(()).exitCode\\n}\\n\")), mdx(\"p\", null, \"Let's see an example of running this program:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter positive number (-1 to exit): 25\\n625.0\\nEnter positive number (-1 to exit): 8\\n64.0\\nEnter positive number (-1 to exit): -1\\nGoodbye!\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=L8AEj6IRNEE\"\n  }, \"Blazing Fast, Pure Effects without Monads\"), \" by John De Goes (Dec 2018)\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-arrow.md"}},"staticQueryHashes":[]}