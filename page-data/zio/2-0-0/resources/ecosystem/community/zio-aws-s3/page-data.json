{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-aws-s3","result":{"data":{"mdx":{"id":"4f7c7eee-a51e-599f-86c5-7523b5b1785e","slug":"resources/ecosystem/community/zio-aws-s3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-aws-s3\",\n  \"title\": \"ZIO AWS S3\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio-mesh/zio-aws-s3\"\n  }, \"ZIO AWS S3\"), \" is a ZIO integration with AWS S3 SDK.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"This project aims to ease ZIO integration with AWS S3, providing a clean, simple and efficient API.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"io.github.neurodyne\\\" %% \\\"zio-aws-s3\\\" % \\\"0.4.13\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import software.amazon.awssdk.regions.Region\\nimport software.amazon.awssdk.services.s3.S3AsyncClient\\nimport zio.{ExitCode, URIO, _}\\nimport zio_aws_s3.AwsApp.AwsLink\\nimport zio_aws_s3.{AwsAgent, AwsApp}\\n\\nimport scala.jdk.CollectionConverters._\\n\\nobject ZIOAWSS3Example extends zio.App {\\n  val BUCKET = \\\"<bucket name>\\\"\\n\\n  val awsEnv: ZLayer[S3AsyncClient, Throwable, AwsLink] =\\n    AwsApp.ExtLayer.live >>> AwsApp.AwsLink.live\\n\\n  val app: ZIO[Any, Throwable, Unit] = for {\\n    s3 <- AwsAgent.createClient(Region.US_WEST_2, \\\"<endpoint>\\\")\\n    response <- AwsApp.listBuckets().provide(awsEnv).provideEnvironment(s3)\\n    buckets <- Task(response.buckets.asScala.toList.map(_.name))\\n    _ = buckets.foreach(println)\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    app.exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-aws-s3.md"}},"staticQueryHashes":[]}