{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zio-amqp","result":{"data":{"mdx":{"id":"c228032b-b6ab-59a5-b99e-59b239f67629","slug":"resources/ecosystem/community/zio-amqp","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio-amqp\",\n  \"title\": \"ZIO AMQP\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/svroonland/zio-amqp\"\n  }, \"ZIO AMQP\"), \" is a ZIO-based AMQP client for Scala.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO AMQP is a ZIO-based wrapper around the RabbitMQ client. It provides a streaming interface to AMQP queues and helps to prevent us from shooting ourselves in the foot with thread-safety issues.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"nl.vroste\\\" %% \\\"zio-amqp\\\" % \\\"0.3.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"First, let's create an instance of RabbitMQ:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"docker run -d --name some-rabbit -p 5672:5672 -p 5673:5673 -p 15672:15672 rabbitmq:3-management\\n\")), mdx(\"p\", null, \"Then we need to create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_exchange\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_queue\"), \" and bind the queue to the exchange via the RabbitMQ management dashboard (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:15672\"), \").\"), mdx(\"p\", null, \"Now we can run the example below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import nl.vroste.zio.amqp._\\nimport nl.vroste.zio.amqp.model._\\nimport zio._\\n\\nimport java.net.URI\\n\\nobject ZIOAMQPExample extends ZIOAppDefault {\\n\\n  val channel: ZIO[Scope, Throwable, Channel] = for {\\n    connection <- Amqp.connect(URI.create(\\\"amqp://localhost:5672\\\"))\\n    channel    <- Amqp.createChannel(connection)\\n  } yield channel\\n\\n  val myApp: ZIO[Any, Throwable, Unit] =\\n    ZIO.scoped {\\n      for {\\n        channel                            <- channel\\n        producer: ZIO[Any, Throwable, Long] =\\n          Random.nextUUID\\n            .flatMap(uuid => channel.publish(ExchangeName(\\\"my_exchange\\\"), uuid.toString.getBytes).unit)\\n            .schedule(Schedule.spaced(1.seconds))\\n\\n        consumer: ZIO[Any, Throwable, Unit] =\\n          channel\\n            .consume(queue = QueueName(\\\"my_queue\\\"), consumerTag = ConsumerTag(\\\"my_consumer\\\"))\\n            .mapZIO { record =>\\n              val deliveryTag = record.getEnvelope.getDeliveryTag\\n              Console.printLine(s\\\"Received $deliveryTag: ${new String(record.getBody)}\\\") *>\\n                channel.ack(DeliveryTag(deliveryTag))\\n            }\\n            .runDrain\\n        p                                  <- producer.fork\\n        c                                  <- consumer.fork\\n        _                                  <- p.zip(c).join\\n      } yield ()\\n    }\\n\\n  override def run: ZIO[Environment with ZIOAppArgs with Scope, Any, Any] = myApp\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zio-amqp.md"}},"staticQueryHashes":[]}