{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/tranzactio","result":{"data":{"mdx":{"id":"20505bd9-6b12-55aa-b6a9-e425b98d7ee0","slug":"resources/ecosystem/community/tranzactio","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"tranzactio\",\n  \"title\": \"TranzactIO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gaelrenoux/tranzactio\"\n  }, \"TranzactIO\"), \" is a ZIO wrapper for some Scala database access libraries, currently for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tpolecat/doobie\"\n  }, \"Doobie\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/playframework/anorm\"\n  }, \"Anorm\"), \".\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Using functional effect database access libraries like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Doobie\"), \" enforces us to use their specialized monads like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConnectionIO\"), \" for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Doobie\"), \". The goal of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TranzactIO\"), \" is to provide seamless integration with these libraries to help us to stay in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" world.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"io.github.gaelrenoux\\\" %% \\\"tranzactio\\\" % \\\"2.1.0\\\"\\n\")), mdx(\"p\", null, \"In addition, we need to declare the database access library we are using. For example, for the next example we need to add following dependencies for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Doobie\"), \" integration:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"org.tpolecat\\\" %% \\\"doobie-core\\\" % \\\"0.13.4\\\"\\nlibraryDependencies += \\\"org.tpolecat\\\" %% \\\"doobie-h2\\\"   % \\\"0.13.4\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of simple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Doobie\"), \" program:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import doobie.implicits._\\nimport io.github.gaelrenoux.tranzactio.doobie\\nimport io.github.gaelrenoux.tranzactio.doobie.{Connection, Database, TranzactIO, tzio}\\nimport org.h2.jdbcx.JdbcDataSource\\nimport zio.blocking.Blocking\\nimport zio.clock.Clock\\nimport zio.console.{Console, putStrLn}\\nimport zio.{ExitCode, Has, URIO, ZIO, ZLayer, blocking}\\n\\nimport javax.sql.DataSource\\n\\nobject TranzactIOExample extends zio.App {\\n\\n  val query: ZIO[Connection with Console, Throwable, Unit] = for {\\n    _ <- PersonQuery.setup\\n    _ <- PersonQuery.insert(Person(\\\"William\\\", \\\"Stewart\\\"))\\n    _ <- PersonQuery.insert(Person(\\\"Michelle\\\", \\\"Streeter\\\"))\\n    _ <- PersonQuery.insert(Person(\\\"Johnathon\\\", \\\"Martinez\\\"))\\n    users <- PersonQuery.list\\n    _ <- putStrLn(users.toString)\\n  } yield ()\\n\\n  val myApp: ZIO[zio.ZEnv, Throwable, Unit] =\\n    Database.transactionOrWidenR(query).provideCustom(services.database)\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\\ncase class Person(firstName: String, lastName: String)\\n\\nobject PersonQuery {\\n  def list: TranzactIO[List[Person]] = tzio {\\n    sql\\\"\\\"\\\"SELECT first_name, last_name FROM person\\\"\\\"\\\".query[Person].to[List]\\n  }\\n\\n  def setup: TranzactIO[Unit] = tzio {\\n    sql\\\"\\\"\\\"\\n        CREATE TABLE person (\\n          first_name VARCHAR NOT NULL,\\n          last_name VARCHAR NOT NULL\\n        )\\n        \\\"\\\"\\\".update.run.map(_ => ())\\n  }\\n\\n  def insert(p: Person): TranzactIO[Unit] = tzio {\\n    sql\\\"\\\"\\\"INSERT INTO person (first_name, last_name) VALUES (${p.firstName}, ${p.lastName})\\\"\\\"\\\".update.run\\n      .map(_ => ())\\n  }\\n}\\n\\nobject services {\\n  val datasource: ZLayer[Blocking, Throwable, Has[DataSource]] =\\n    ZLayer.fromEffect(\\n      blocking.effectBlocking {\\n        val ds = new JdbcDataSource\\n        ds.setURL(s\\\"jdbc:h2:mem:mydb;DB_CLOSE_DELAY=10\\\")\\n        ds.setUser(\\\"sa\\\")\\n        ds.setPassword(\\\"sa\\\")\\n        ds\\n      }\\n    )\\n\\n  val database: ZLayer[Any, Throwable, doobie.Database.Database] =\\n    (Blocking.live >>> datasource ++ Blocking.live ++ Clock.live) >>> Database.fromDatasource\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/tranzactio.md"}},"staticQueryHashes":[]}