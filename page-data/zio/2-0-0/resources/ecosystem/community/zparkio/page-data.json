{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/zparkio","result":{"data":{"mdx":{"id":"8d0c0083-05ee-5593-bbe7-0864d1f6c03a","slug":"resources/ecosystem/community/zparkio","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zparkio\",\n  \"title\": \"ZparkIO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/leobenkel/ZparkIO\"\n  }, \"ZParkIO\"), \" is a boilerplate framework to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Spark\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" together.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZparkIO\"), \" enables us to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wrap asynchronous and synchronous operations smoothly. So everything is wrapped in ZIO.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have ZIO features in our spark jobs, like forking and joining fibers, parallelizing tasks, retrying, and timing-out.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make our spark job much easier to debug\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"com.leobenkel\\\" %% \\\"zparkio\\\" % \\\"[SPARK_VERSION]_[VERSION]\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZparkIO\"), \" we can write jobs like the following example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import com.leobenkel.zparkio.Services.SparkModule\\nimport com.leobenkel.zparkio.Services.SparkModule.SparkModule\\nimport com.leobenkel.zparkio.ZparkioApplicationTimeoutException\\nimport org.apache.spark.sql.DataFrame\\nimport zio.clock.Clock\\nimport zio.duration.durationInt\\nimport zio.{Schedule, Task, ZIO}\\n\\ndef readParquetFile[A](parquetPath: String): ZIO[Clock with SparkModule, Throwable, DataFrame] =\\n  for {\\n    spark <- SparkModule()\\n    dataset <- Task(spark.read.parquet(parquetPath))\\n      .retry(\\n        Schedule.recurs(3) && Schedule.exponential(2.seconds)\\n      )\\n      .timeoutFail(ZparkioApplicationTimeoutException())(5.minutes)\\n  } yield dataset\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=bWgVGzb5-H8\"\n  }, \"Accelerating Spark with ZIO\"), \" by Leo Benkel (December 2020) \\u2014 Apache Spark is a powerful tool for distributed analytics but isn\\u2019t built to offer rich primitives for local parallelism. Yet, using local parallelism, it is possible to dramatically improve the performance of ML projects\\u2014for example, by fetching data sources in parallel. Historically, Scala projects have used Scala's Future for local parallelism, but increasingly, many projects have begun adopting ZIO as a better Future. Although powerful, ZIO is not easy to set up with Spark. In this talk, Leo will introduce an open-source library that handles all boilerplate so you can easily implement Spark and ZIO in your ML projects, and will then present detailed benchmarks showing how much additional performance can be obtained through local parallelism. Learn how to use ZIO to make Spark better and faster!\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/zparkio.md"}},"staticQueryHashes":[]}