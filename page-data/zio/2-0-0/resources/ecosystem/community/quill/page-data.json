{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/resources/ecosystem/community/quill","result":{"data":{"mdx":{"id":"04d77d95-6e5b-5dc0-aa41-1d90a848a1bb","slug":"resources/ecosystem/community/quill","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/getquill/quill\"\n  }, \"Quil\"), \" is a Compile-time Language Integrated Queries for Scala.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Quill allows us to create SQL out of a Scala code during the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"compile-time\"), \". It provides the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Quoted Domain Specific Language (QDSL)\"), \" to express queries in Scala and execute them in a target language.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Boilerplate-free mapping\"), \" \\u2014 The database schema is mapped using simple case classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Quoted DSL\"), \" \\u2014 Queries are defined inside a quote block. Quill parses each quoted block of code (quotation) at compile-time and translates them to an internal Abstract Syntax Tree (AST)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Compile-time query generation\"), \" \\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ctx.run\"), \" call reads the quotation\\u2019s AST and translates it to the target language at compile-time, emitting the query string as a compilation message. As the query string is known at compile-time, the runtime overhead is very low and similar to using the database driver directly.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Compile-time query validation\"), \" \\u2014 If configured, the query is verified against the database at compile-time and the compilation fails if it is not valid. The query validation does not alter the database state.\")), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library with ZIO, we need to add the following lines in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// Provides Quill contexts for ZIO.\\nlibraryDependencies += \\\"io.getquill\\\" %% \\\"quill-zio\\\" % \\\"3.9.0\\\"\\n\\n// Provides Quill context that execute MySQL, PostgreSQL, SQLite, H2, SQL Server and Oracle queries inside of ZIO.\\nlibraryDependencies += \\\"io.getquill\\\" %% \\\"quill-jdbc-zio\\\" % \\\"3.9.0\\\" \\n\\n// Provides Quill context that executes Cassandra queries inside of ZIO.\\nlibraryDependencies += \\\"io.getquill\\\" %% \\\"quill-cassandra-zio\\\" % \\\"3.9.0\\\"\\n\")), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"First, to run this example, we should create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" table at the database initialization. Let's put the following lines into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h2-schema.sql\"), \" file at the\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resources\"), \" path:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"CREATE TABLE IF NOT EXISTS Person(\\n    name VARCHAR(255),\\n    age int\\n);\\n\")), mdx(\"p\", null, \"In this example, we use in-memory database as our data source. So we just put these lines into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application.conf\"), \" at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resources\"), \" path:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-hocon\"\n  }, \"myH2DB {\\n  dataSourceClassName = org.h2.jdbcx.JdbcDataSource\\n  dataSource {\\n    url = \\\"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:h2-schema.sql'\\\"\\n    user = sa\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we are ready to run the example below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.getquill._\\nimport io.getquill.context.ZioJdbc._\\nimport zio.console.{Console, putStrLn}\\nimport zio.{ExitCode, Has, URIO, ZIO}\\n\\nimport java.io.Closeable\\nimport javax.sql\\n\\nobject QuillZIOExample extends zio.App {\\n  val ctx = new H2ZioJdbcContext(Literal)\\n\\n  import ctx._\\n\\n  case class Person(name: String, age: Int)\\n\\n  val myApp: ZIO[Console with Has[sql.DataSource with Closeable], Exception, Unit] =\\n    for {\\n      _ <- ctx.run(\\n        quote {\\n          liftQuery(List(Person(\\\"Alex\\\", 25), Person(\\\"Sarah\\\", 23)))\\n            .foreach(r =>\\n              query[Person].insert(r)\\n            )\\n        }\\n      ).onDS\\n      result <- ctx.run(\\n        quote(query[Person].filter(p => p.name == \\\"Sarah\\\"))\\n      ).onDS\\n      _ <- putStrLn(result.toString)\\n    } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp\\n      .provideCustom(DataSourceLayer.fromPrefix(\\\"myH2DB\\\"))\\n      .exitCode\\n}\\n\\n\\nexport const _frontmatter = {\\\"id\\\":\\\"quill\\\",\\\"title\\\":\\\"Quill\\\"}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/resources/ecosystem/community/quill.md"}},"staticQueryHashes":[]}