{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/about/faq","result":{"data":{"mdx":{"id":"87129a53-5aaa-514d-a7c9-85eefb8852a5","slug":"about/faq","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"faq\",\n  \"title\": \"Frequently Answered Questions (FAQ)\",\n  \"sidebar_label\": \"FAQ\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this page we are going to answer general questions related to the ZIO project.\"), mdx(\"h2\", null, \"In ZIO ecosystem, there are lots of data types which they have \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Z\"), \" prefix in their names. What this prefix stands for? Does it mean, that data type is effectual?\"), mdx(\"p\", null, \"No, it doesn't denote that the data type is effectual. Instead, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Z\"), \" prefix is used for two purposes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Polymorphic Version of Another Data Type\"), \" \\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Z\"), \" prefix indicates a more polymorphic version of another data type, not a data type that is effectual. So for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" are equally effectual but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" is more polymorphic because it has the additional type parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Term Disambiguation\"), \" \\u2014 There are some cases where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Z\"), \" prefix is used to disambiguate a term that might otherwise be too common and create risk of name conflicts (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZPool\"), \").\"))), mdx(\"p\", null, \"This convention is true across all ZIO ecosystem. For example, in ZIO Prelude, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZValidation\"), \" is a more general version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Validation\"), \" that is polymorphic in the log type. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSet\"), \" is a more polymorphic version of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Set\"), \" that is polymorphic in the measure type. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZPure\"), \" is more polymorphic than its type aliases in several ways as represented by its different type parameters and also serves to disambiguate it as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pure\"), \" which is too general.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/about/faq.md"}},"staticQueryHashes":[]}