{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/core/zioapp","result":{"data":{"mdx":{"id":"81869253-691e-5eb9-b721-b35808220cec","slug":"datatypes/core/zioapp","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zioapp\",\n  \"title\": \"ZIOApp\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOApp\"), \" trait is an entry point for a ZIO application that allows sharing layers between applications. It also\\nprovides us the ability to compose multiple ZIO applications.\"), mdx(\"p\", null, \"There is another simpler version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOApp\"), \" called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOAppDefault\"), \". We usually use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOAppDefault\"), \" which uses the default ZIO environment (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnv\"), \").\"), mdx(\"h2\", null, \"Running a ZIO effect\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOAppDefault\"), \" has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" function, which is the main entry point for running a ZIO application on the JVM:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MyApp extends ZIOAppDefault {\\n  def run = for {\\n    _ <- Console.printLine(\\\"Hello! What is your name?\\\")\\n    n <- Console.readLine\\n    _ <- Console.printLine(\\\"Hello, \\\" + n + \\\", good to meet you!\\\")\\n  } yield ()\\n}\\n\")), mdx(\"h2\", null, \"Accessing Command-line Arguments\"), mdx(\"p\", null, \"ZIO has a service that contains command-line arguments of an application called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOAppArgs\"), \". We can access command-line arguments using the built-in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getArgs\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject HelloApp extends ZIOAppDefault {\\n  def run = for {\\n    args <- getArgs\\n    _ <-\\n      if (args.isEmpty)\\n        Console.printLine(\\\"Please provide your name as an argument\\\")\\n      else\\n        Console.printLine(s\\\"Hello, ${args.head}!\\\")\\n  } yield ()\\n}\\n\")), mdx(\"h2\", null, \"Customized Runtime\"), mdx(\"p\", null, \"In the ZIO app, by overriding its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime\"), \" value, we can map the current runtime to a customized one. Let's customize it by introducing our own executor:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.Executor\\nimport java.util.concurrent.{LinkedBlockingQueue, ThreadPoolExecutor, TimeUnit}\\n\\nobject CustomizedRuntimeZIOApp extends ZIOAppDefault {\\n  override val bootstrap = Runtime.setExecutor(\\n    Executor.fromThreadPoolExecutor(_ => 1024)(\\n      new ThreadPoolExecutor(\\n        5,\\n        10,\\n        5000,\\n        TimeUnit.MILLISECONDS,\\n        new LinkedBlockingQueue[Runnable]()\\n      )\\n    )\\n  )\\n\\n  def run = myAppLogic\\n}\\n\")), mdx(\"p\", null, \"A detailed explanation of the ZIO runtime system can be found on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"runtime.md\"\n  }, \"runtime\"), \" page.\"), mdx(\"h2\", null, \"Installing Low-level Functionalities\"), mdx(\"p\", null, \"We can hook into the ZIO runtime to install low-level functionalities into the ZIO application, such as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"logging\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"profiling\"), \", and other similar foundational pieces of infrastructure.\"), mdx(\"p\", null, \"A detailed explanation can be found on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"runtime.md\"\n  }, \"runtime\"), \" page.\"), mdx(\"h2\", null, \"Composing ZIO Applications\"), mdx(\"p\", null, \"To compose ZIO applications, we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<>\"), \" operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MyApp1 extends ZIOAppDefault {    \\n  def run = ZIO.succeed(???)\\n}\\n\\nobject MyApp2 extends ZIOAppDefault {\\n  override val bootstrap: ZLayer[Any, Any, Any] =\\n    asyncProfiler ++ slf4j ++ loggly ++ newRelic\\n\\n  def run = ZIO.succeed(???)\\n}\\n\\nobject Main extends ZIOApp.Proxy(MyApp1 <> MyApp2)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<>\"), \" operator combines the layers of the two applications and then runs the two applications in parallel.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/core/zioapp.md"}},"staticQueryHashes":[]}