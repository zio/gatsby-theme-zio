{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/core/zio/uio","result":{"data":{"mdx":{"id":"b3d87939-fae7-5196-a955-97038d044985","slug":"datatypes/core/zio/uio","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"uio\",\n  \"title\": \"UIO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO[A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[Any, Nothing, A]\"), \", which represents an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unexceptional\"), \" effect that doesn't require any specific environment, and cannot fail, but can succeed with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note:\"))), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In Scala, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"type alias\"), \" is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design.\")), mdx(\"p\", null, \"Let's see how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO\"), \" type alias is defined:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"type UIO[+A] = ZIO[Any, Nothing, A]\\n\")), mdx(\"p\", null, \"So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO\"), \" is equal to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" that doesn't need any requirement (because it accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" environment) and that cannot fail (because in Scala the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \" type is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"uninhabitable\"), \", i.e. there can be no actual value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \"). It succeeds with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" values of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO[A]\"), \" are considered \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"infallible\"), \". Values of this type may produce an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", but will never fail.\"), mdx(\"p\", null, \"Let's write a Fibonacci function. In the following example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fib\"), \" function is an unexceptional effect, since it has no requirements, we don't expect any failure, and it succeeds with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.{UIO, ZIO}\\n\\ndef fib(n: Int): UIO[Int] =\\n  if (n <= 1) {\\n    ZIO.succeed(1)\\n  } else {\\n    for {\\n      fiber1 <- fib(n - 2).fork\\n      fiber2 <- fib(n - 1).fork\\n      v2     <- fiber2.join\\n      v1     <- fiber1.join\\n    } yield v1 + v2\\n  }\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Principle of The Least Power\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" type, specific for a less powerful workflow. \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So there is no need to convert type aliases to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type, and whenever the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type is required, we can use the most precise type alias to fit our workflow requirement.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/core/zio/uio.md"}},"staticQueryHashes":[]}