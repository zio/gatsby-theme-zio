{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/misc/zstate","result":{"data":{"mdx":{"id":"2e5f3235-28c8-52c4-b935-c06e308a6829","slug":"datatypes/misc/zstate","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zstate\",\n  \"title\": \"ZState\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState[S]\"), \" models a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S\"), \" that can be read from and written to during the execution of an effect. This is a higher-level construct built on top of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../fiber/fiberref.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"FiberRef\")), \" and the environment type to support using ZIO where we might have traditionally used state monad transformers.\"), mdx(\"p\", null, \"Let's try a simple example of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\nobject ZStateExample extends zio.ZIOAppDefault {\\n  val myApp: ZIO[ZState[Int], IOException, Unit] = for {\\n    s <- ZIO.service[ZState[Int]]\\n    _ <- s.update(_ + 1)\\n    _ <- s.update(_ + 2)\\n    state <- s.get\\n    _ <- Console.printLine(s\\\"current state: $state\\\")\\n  } yield ()\\n\\n  def run = ZIO.stateful(0)(myApp)\\n}\\n\")), mdx(\"p\", null, \"The idiomatic way to work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \" is as part of the environment using operators defined on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" to access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \" from the environment, and finally, allocate the initial state using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.stateful\"), \" operator.\"), mdx(\"p\", null, \"Because we typically use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \" as part of the environment, it is recommended to define our own state type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S\"), \" such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyState\"), \" rather than using a type such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \" to avoid the risk of ambiguity:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\nfinal case class MyState(counter: Int)\\n\\nobject ZStateExample extends zio.ZIOAppDefault {\\n\\n  val myApp: ZIO[ZState[MyState], IOException, Unit] =\\n    for {\\n      counter <- ZIO.service[ZState[MyState]]\\n      _ <- counter.update(state => state.copy(counter = state.counter + 1))\\n      _ <- counter.update(state => state.copy(counter = state.counter + 2))\\n      state <- counter.get\\n      _ <- Console.printLine(s\\\"Current state: $state\\\")\\n    } yield ()\\n\\n  def run = ZIO.stateful(MyState(0))(myApp)\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type also has some helper methods to work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \" as the environment of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.updateState\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.getState\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.getStateWith\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\nfinal case class MyState(counter: Int)\\n\\nval myApp: ZIO[ZState[MyState], IOException, Int] =\\n  for {\\n    _ <- ZIO.updateState[MyState](state => state.copy(counter = state.counter + 1))\\n    _ <- ZIO.updateState[MyState](state => state.copy(counter = state.counter + 2))\\n    state <- ZIO.getStateWith[MyState](_.counter)\\n    _ <- Console.printLine(s\\\"Current state: $state\\\")\\n  } yield state\\n\")), mdx(\"p\", null, \"An important note about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZState\"), \" is that it is on top of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FiberRef\"), \" data type. So it will inherit its behavior from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FiberRef\"), \".\"), mdx(\"p\", null, \"For example, when a fiber is going to join to its parent fiber, its state will be merged with its parent state:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class MyState(counter: Int)\\n\\nobject ZStateExample extends ZIOAppDefault {\\n  val myApp = for {\\n    _ <- ZIO.updateState[MyState](state => state.copy(counter = state.counter + 1))\\n    fiber <-\\n      (for {\\n        _ <- ZIO.updateState[MyState](state => state.copy(counter = state.counter + 1))\\n        state <- ZIO.getState[MyState]\\n        _ <- Console.printLine(s\\\"Current state inside the forked fiber: $state\\\")\\n      } yield ()).fork\\n    _ <- ZIO.updateState[MyState](state => state.copy(counter = state.counter + 5))\\n    state1 <- ZIO.getState[MyState]\\n    _ <- Console.printLine(s\\\"Current state before merging the fiber: $state1\\\")\\n    _ <- fiber.join\\n    state2 <- ZIO.getState[MyState]\\n    _ <- Console.printLine(s\\\"The final state: $state2\\\")\\n  } yield ()\\n\\n  def run =\\n    ZIO.stateful(MyState(0))(myApp)\\n}\\n\")), mdx(\"p\", null, \"The output of running this snippet code would be as below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Current state before merging the fiber: MyState(6)\\nCurrent state inside the forked fiber: MyState(2)\\nThe final state: MyState(2)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/misc/zstate.md"}},"staticQueryHashes":[]}