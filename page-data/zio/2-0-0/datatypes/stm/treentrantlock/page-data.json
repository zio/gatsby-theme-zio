{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/stm/treentrantlock","result":{"data":{"mdx":{"id":"c4b18e94-92a6-5d5a-85e9-dd78c7d9b352","slug":"datatypes/stm/treentrantlock","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"treentrantlock\",\n  \"title\": \"TReentrantLock\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TReentrantLock\"), \" allows safe concurrent access to some mutable state efficiently, allowing multiple fibers to read the\\nstate (because that is safe to do) but only one fiber to modify the state (to prevent data corruption). Also, even though\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TReentrantLock\"), \" is implemented using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"STM\"), \"; reads and writes can be committed, allowing this to be used as a building\\nblock for solutions that expose purely ZIO effects and internally allow locking on more than one piece of state in a\\nsimple and composable way (thanks to STM).\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TReentrantLock\"), \" is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reentrant\"), \" read/write lock. A reentrant lock is one where a fiber can claim the lock multiple\\ntimes without blocking on itself. It's useful in situations where it's not easy to keep track of whether you have already\\ngrabbed a lock. If a lock is non re-entrant you could grab the lock, then block when you go to grab it again, effectively\\ncausing a deadlock. \"), mdx(\"h2\", null, \"Semantics\"), mdx(\"p\", null, \"This lock allows both readers and writers to reacquire read or write locks with reentrancy guarantees. Readers are not\\nallowed until all write locks held by the writing fiber have been released. Writers are not allowed unless there are no\\nother locks or the fiber wanting to hold a write lock already has a read lock and there are no other fibers holding a\\nread lock. \"), mdx(\"p\", null, \"This lock also allows upgrading from a read lock to a write lock (automatically) and downgrading\\nfrom a write lock to a read lock (automatically provided that you upgraded from a read lock to a write lock).\"), mdx(\"h2\", null, \"Creating a reentrant lock\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.stm._\\n\\nval reentrantLock = TReentrantLock.make\\n\")), mdx(\"h2\", null, \"Acquiring a read lock\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.stm._\\n\\nval program =\\n  (for {\\n    lock <- TReentrantLock.make\\n    _    <- lock.acquireRead\\n    rst  <- lock.readLocked  // lock is read-locked once transaction completes\\n    wst  <- lock.writeLocked // lock is not write-locked\\n  } yield rst && !wst).commit\\n\")), mdx(\"h2\", null, \"Acquiring a write lock\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval writeLockProgram: UIO[Boolean] =\\n  (for {\\n    lock <- TReentrantLock.make\\n    _    <- lock.acquireWrite\\n    wst  <- lock.writeLocked // lock is write-locked once transaction completes\\n    rst  <- lock.readLocked  // lock is not read-locked\\n  } yield !rst && wst).commit\\n\")), mdx(\"h2\", null, \"Multiple fibers can hold read locks\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval multipleReadLocksProgram: UIO[(Int, Int)] = for {\\n  lock          <- TReentrantLock.make.commit\\n  fiber0        <- lock.acquireRead.commit.fork // fiber0 acquires a read-lock\\n  currentState1 <- fiber0.join                  // 1 read lock held\\n  fiber1        <- lock.acquireRead.commit.fork // fiber1 acquires a read-lock\\n  currentState2 <- fiber1.join                  // 2 read locks held \\n} yield (currentState1, currentState2)\\n\")), mdx(\"h2\", null, \"Upgrading and downgrading locks\"), mdx(\"p\", null, \"If your fiber already has a read lock then it is possible to upgrade the lock to a write lock provided that no other\\nreader (other than your fiber) holds a lock\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval upgradeDowngradeProgram: UIO[(Boolean, Boolean, Boolean, Boolean)] = for {\\n  lock               <- TReentrantLock.make.commit\\n  _                  <- lock.acquireRead.commit\\n  _                  <- lock.acquireWrite.commit  // upgrade\\n  isWriteLocked      <- lock.writeLocked.commit   // now write-locked\\n  isReadLocked       <- lock.readLocked.commit    // and read-locked\\n  _                  <- lock.releaseWrite.commit  // downgrade\\n  isWriteLockedAfter <- lock.writeLocked.commit   // no longer write-locked\\n  isReadLockedAfter  <- lock.readLocked.commit    // still read-locked\\n} yield (isWriteLocked, isReadLocked, isWriteLockedAfter, isReadLockedAfter)\\n\")), mdx(\"h2\", null, \"Acquiring a write lock in a contentious scenario\"), mdx(\"p\", null, \"A write lock can be acquired immediately only if one of the following conditions are satisfied:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"There are no other holders of the lock\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The current fiber is already holding a read lock and there are no other parties holding a read lock\")), mdx(\"p\", null, \"If either of the above scenarios are untrue then attempting to acquire a write lock will semantically block the fiber.\\nHere is an example which demonstrates that a write lock can only be obtained by the fiber once all other readers (except\\nthe fiber attempting to acquire the write lock) have released their hold on the (read or write) lock.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.Console._\\nimport zio.stm._\\n\\nval writeLockDemoProgram: UIO[Unit] = for {\\n  l  <- TReentrantLock.make.commit\\n  _  <- printLine(\\\"Beginning test\\\").orDie\\n  f1 <- (l.acquireRead.commit *> ZIO.sleep(5.seconds) *> l.releaseRead.commit).fork\\n  f2 <- (l.acquireRead.commit *> printLine(\\\"read-lock\\\").orDie *> l.acquireWrite.commit *> printLine(\\\"I have upgraded!\\\").orDie).fork\\n  _  <- (f1 zip f2).join\\n} yield ()\\n\")), mdx(\"p\", null, \"Here fiber \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f1\"), \" acquires a read lock and sleeps for 5 seconds before releasing it. Fiber \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f2\"), \" also acquires a read\\nlock and immediately tries to acquire a write lock. However, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f2\"), \" will have to semantically block for approximately 5\\nseconds to obtain a write lock because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f1\"), \" will release its hold on the lock and only then can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f2\"), \" acquire a hold for\\nthe write lock. \"), mdx(\"h2\", null, \"Safer methods  (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"readLock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"writeLock\"), \")\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquireRead\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquireWrite\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"releaseRead\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"releaseWrite\"), \" should be avoided for simple use cases relying on\\nmethods like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readLock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeLock\"), \" instead. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readLock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeLock\"), \" automatically acquire and release the lock\\nthanks to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scope\"), \" construct. The program described below is a safer version of the program above and ensures we\\ndon't hold onto any resources once we are done using the reentrant lock.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.Console._\\nimport zio.stm._\\n\\nval saferProgram: UIO[Unit] = for {\\n  lock <- TReentrantLock.make.commit\\n  f1   <- ZIO.scoped(lock.readLock *> ZIO.sleep(5.seconds) *> printLine(\\\"Powering down\\\").orDie).fork\\n  f2   <- ZIO.scoped(lock.readLock *> lock.writeLock *> printLine(\\\"Huzzah, writes are mine\\\").orDie).fork\\n  _    <- (f1 zip f2).join\\n} yield ()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/stm/treentrantlock.md"}},"staticQueryHashes":[]}