{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/stm/tpromise","result":{"data":{"mdx":{"id":"672405c5-dba2-5274-8d77-887b49e289c3","slug":"datatypes/stm/tpromise","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"tpromise\",\n  \"title\": \"TPromise\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TPromise\"), \" is a mutable reference that can be set exactly once and can participate in transactions in STM.\"), mdx(\"h2\", null, \"Create a TPromise\"), mdx(\"p\", null, \"Creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TPromise\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromise: STM[Nothing, TPromise[String, Int]] = TPromise.make[String, Int]\\n\")), mdx(\"h2\", null, \"Complete a TPromise\"), mdx(\"p\", null, \"In order to successfully complete a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TPromise\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromiseSucceed: UIO[TPromise[String, Int]] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.succeed(0).commit\\n} yield tPromise\\n\")), mdx(\"p\", null, \"In order to fail a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TPromise\"), \" use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromiseFail: UIO[TPromise[String, Int]] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.fail(\\\"failed\\\").commit\\n} yield tPromise\\n\")), mdx(\"p\", null, \"Alternatively, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"done\"), \" combinator and complete the promise by passing it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either[E, A]\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromiseDoneSucceed: UIO[TPromise[String, Int]] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.done(Right(0)).commit\\n} yield tPromise\\n\\nval tPromiseDoneFail: UIO[TPromise[String, Int]] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.done(Left(\\\"failed\\\")).commit\\n} yield tPromise\\n\")), mdx(\"p\", null, \"Once the value is set, any following attempts to set it will result in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"h2\", null, \"Retrieve the value of a TPromise\"), mdx(\"p\", null, \"Returns the result if the promise has already been completed or a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \" otherwise:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromiseOptionValue: UIO[Option[Either[String, Int]]] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.succeed(0).commit\\n  res      <- tPromise.poll.commit\\n} yield res\\n\")), mdx(\"p\", null, \"Alternatively, you can wait for the promise to be completed and return the value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tPromiseValue: IO[String, Int] = for {\\n  tPromise <- TPromise.make[String, Int].commit\\n  _        <- tPromise.succeed(0).commit\\n  res      <- tPromise.await.commit\\n} yield res\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/stm/tpromise.md"}},"staticQueryHashes":[]}