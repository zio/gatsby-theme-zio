{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/stm/tarray","result":{"data":{"mdx":{"id":"c538e850-0398-55a8-9bc0-4100b2a9249d","slug":"datatypes/stm/tarray","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"tarray\",\n  \"title\": \"TArray\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TArray\"), \" is an array of mutable references that can participate in transactions in STM.\"), mdx(\"h2\", null, \"Create a TArray\"), mdx(\"p\", null, \"Creating an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TArray\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval emptyTArray: STM[Nothing, TArray[Int]] = TArray.empty[Int]\\n\")), mdx(\"p\", null, \"Or creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TArray\"), \" with specified values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval specifiedValuesTArray: STM[Nothing, TArray[Int]] = TArray.make(1, 2, 3)\\n\")), mdx(\"p\", null, \"Alternatively, you can create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TArray\"), \" by providing a collection of values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval iterableTArray: STM[Nothing, TArray[Int]] = TArray.fromIterable(List(1, 2, 3))\\n\")), mdx(\"h2\", null, \"Retrieve the value from a TArray\"), mdx(\"p\", null, \"The n-th element of the array can be obtained as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tArrayGetElem: UIO[Int] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  elem   <- tArray(2)\\n} yield elem).commit\\n\")), mdx(\"p\", null, \"Accessing the non-existing indexes aborts the transaction with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArrayIndexOutOfBoundsException\"), \".\"), mdx(\"h2\", null, \"Update the value of a TArray\"), mdx(\"p\", null, \"Updating the n-th element of an array can be done as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tArrayUpdateElem: UIO[TArray[Int]] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  _      <- tArray.update(2, el => el + 10)\\n} yield tArray).commit\\n\")), mdx(\"p\", null, \"Updating the n-th element of an array can be done effectfully via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateSTM\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tArrayUpdateMElem: UIO[TArray[Int]] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  _      <- tArray.updateSTM(2, el => STM.succeed(el + 10))\\n} yield tArray).commit\\n\")), mdx(\"p\", null, \"Updating the non-existing indexes aborts the transaction with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArrayIndexOutOfBoundsException\"), \".\"), mdx(\"h2\", null, \"Transform elements of a TArray\"), mdx(\"p\", null, \"The transform function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A => A\"), \" allows computing a new value for every element in the array: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval transformTArray: UIO[TArray[Int]] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  _      <- tArray.transform(a => a * a)\\n} yield tArray).commit\\n\")), mdx(\"p\", null, \"The elements can be mapped effectfully via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformSTM\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval transformSTMTArray: UIO[TArray[Int]] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  _      <- tArray.transformSTM(a => STM.succeed(a * a))\\n} yield tArray).commit\\n\")), mdx(\"p\", null, \"Folds the elements of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TArray\"), \" using the specified associative binary operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foldTArray: UIO[Int] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  sum    <- tArray.fold(0)(_ + _)\\n} yield sum).commit\\n\")), mdx(\"p\", null, \"The elements can be folded effectfully via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foldSTM\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foldSTMTArray: UIO[Int] = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  sum    <- tArray.foldSTM(0)((acc, el) => STM.succeed(acc + el))\\n} yield sum).commit\\n\")), mdx(\"h2\", null, \"Perform side-effect for TArray elements\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foreach\"), \" is used for performing side-effect for each element in the array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foreachTArray = (for {\\n  tArray <- TArray.make(1, 2, 3, 4)\\n  _      <- tArray.foreach(a => STM.succeed(println(a)))\\n} yield tArray).commit\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/stm/tarray.md"}},"staticQueryHashes":[]}