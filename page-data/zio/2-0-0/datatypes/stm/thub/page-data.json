{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/stm/thub","result":{"data":{"mdx":{"id":"4dfc6b13-e99f-596b-94be-187bd2555a6f","slug":"datatypes/stm/thub","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"thub\",\n  \"title\": \"THub\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"THub\"), \" is a transactional message hub. Publishers can publish messages to the hub and subscribers can subscribe to take messages from the hub.\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"THub\"), \" is an asynchronous message hub like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hub\"), \" but it can participate in STM transactions. APIs are almost identical, but they are in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"STM\"), \" world rather than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" world.\"), mdx(\"p\", null, \"The fundamental operators on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"THub\"), \" are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publish\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscribe\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait THub[A] {\\n  def publish(a: A): USTM[Boolean]\\n  def subscribe: USTM[TDequeue[B]]\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/stm/thub.md"}},"staticQueryHashes":[]}