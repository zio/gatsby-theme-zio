{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/index","result":{"data":{"mdx":{"id":"ceaa45c2-163c-5bab-b010-ffcd4c6a91ca","slug":"datatypes/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"index\",\n  \"title\": \"Introduction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#core-data-types\"\n  }, \"Core Data Types\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#contextual-data-types\"\n  }, \"Contextual Data Types\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#concurrency\"\n  }, \"Concurrency\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fiber-primitives\"\n  }, \"Fiber Primitives\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#concurrency-primitives\"\n  }, \"Concurrency Primitives\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#synchronization-aids\"\n  }, \"Synchronization Aids\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#stm\"\n  }, \"STM\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#resource-management\"\n  }, \"Resource Management\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#streaming\"\n  }, \"Streaming\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#miscellaneous\"\n  }, \"Miscellaneous\"))), mdx(\"h2\", null, \"Core Data Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/zio.md\"\n  }, \"ZIO\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO\"), \" is a value that models an effectful program, which might fail or succeed.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/uio.md\"\n  }, \"UIO\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"UIO[A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[Any, Nothing, A]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/urio.md\"\n  }, \"URIO\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"URIO[R, A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[R, Nothing, A]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/task.md\"\n  }, \"Task\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Task[A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[Any, Throwable, A]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/rio.md\"\n  }, \"RIO\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RIO[R, A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[R, Throwable, A]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zio/io.md\"\n  }, \"IO\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IO[E, A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[Any, E, A]\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/zioapp.md\"\n  }, \"ZIOApp\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIOApp\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIOAppDefault\"), \" are entry points for ZIO applications.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/runtime.md\"\n  }, \"Runtime\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Runtime[R]\"), \" is capable of executing tasks within an environment \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/exit.md\"\n  }, \"Exit\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Exit[E, A]\"), \" describes the result of executing an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IO\"), \" value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/cause.md\"\n  }, \"Cause\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cause[E]\"), \" is a description of a full story of a fiber failure. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"core/runtime.md\"\n  }, \"Runtime\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Runtime[R]\"), \" is capable of executing tasks within an environment \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \".\")), mdx(\"h2\", null, \"Contextual Data Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/zenvironment.md\"\n  }, \"ZEnvironment\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZEnvironment[R]\"), \" is a built-in type-level map for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO\"), \" data type which is responsible for maintaining the environment of a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO\"), \" effect.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/zlayer.md\"\n  }, \"ZLayer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[-RIn, +E, +ROut]\"), \" is a recipe to build an environment of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \", starting from a value \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RIn\"), \", and possibly producing an error \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \" during creation.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/rlayer.md\"\n  }, \"RLayer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RLayer[-RIn, +ROut]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[RIn, Throwable, ROut]\"), \", which represents a layer that requires \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RIn\"), \" as its input, it may fail with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Throwable\"), \" value, or returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \" as its output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/ulayer.md\"\n  }, \"ULayer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ULayer[+ROut]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[Any, Nothing, ROut]\"), \", which represents a layer that doesn't require any services as its input, it can't fail, and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \" as its output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/layer.md\"\n  }, \"Layer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Layer[+E, +ROut]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[Any, E, ROut]\"), \", which represents a layer that doesn't require any services, it may fail with an error type of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \", and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \" as its output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/urlayer.md\"\n  }, \"URLayer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"URLayer[-RIn, +ROut]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[RIn, Nothing, ROut]\"), \", which represents a layer that requires \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RIn\"), \" as its input, it can't fail, and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \" as its output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"contextual/task-layer.md\"\n  }, \"TaskLayer\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TaskLayer[+ROut]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer[Any, Throwable, ROut]\"), \", which represents a layer that doesn't require any services as its input, it may fail with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Throwable\"), \" value, and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ROut\"), \" as its output.\")))), mdx(\"h2\", null, \"Concurrency\"), mdx(\"h3\", null, \"Fiber Primitives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"fiber/fiber.md\"\n  }, \"Fiber\")), \" \\u2014 A fiber value models an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IO\"), \" value that has started running, and is the moral equivalent of a green thread.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"fiber/fiberref.md\"\n  }, \"FiberRef\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FiberRef[A]\"), \" models a mutable reference to a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". As opposed to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref[A]\"), \", a value is bound to an executing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Fiber\"), \" only.  You can think of it as Java's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ThreadLocal\"), \" on steroids.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"fiber/fiberstatus.md\"\n  }, \"Fiber.Status\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Fiber.Status\"), \" describe the current status of a Fiber.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"fiber/fiberid.md\"\n  }, \"FiberId\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FiberId\"), \" describe the unique identity of a Fiber.\")), mdx(\"h3\", null, \"Concurrency Primitives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/hub.md\"\n  }, \"Hub\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Hub\"), \" is an asynchronous message hub that allows publishers to efficiently broadcast values to many subscribers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/promise.md\"\n  }, \"Promise\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Promise\"), \" is a model of a variable that may be set a single time, and awaited on by many fibers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/semaphore.md\"\n  }, \"Semaphore\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Semaphore\"), \" is an asynchronous (non-blocking) semaphore that plays well with ZIO's interruption.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/ref.md\"\n  }, \"Ref\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref[A]\"), \" models a mutable reference to a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". The two basic operations are \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"set\"), \", which fills the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref\"), \" with a new value, and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"get\"), \", which retrieves its current content. All operations on a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref\"), \" are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/refsynchronized.md\"\n  }, \"Ref.Synchronized\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref.Synchronized[A]\"), \" models a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"mutable reference\"), \" to a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" in which we can store \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"immutable\"), \" data, and update it atomically \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"and\"), \" effectfully.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrency/queue.md\"\n  }, \"Queue\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Queue\"), \" is an asynchronous queue that never blocks, which is safe for multiple concurrent producers and consumers.\")), mdx(\"h3\", null, \"Synchronization aids\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"sync/concurrentmap.md\"\n  }, \"ConcurrentMap\")), \" \\u2014 A Map wrapper over \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.util.concurrent.ConcurrentHashMap\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"sync/concurrentset.md\"\n  }, \"ConcurrentSet\")), \" \\u2014 A Set implementation over \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.util.concurrent.ConcurrentHashMap\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"sync/countdownlatch.md\"\n  }, \"CountdownLatch\")), \" \\u2014 A synchronization aid that allows one or more fibers to wait until a\\nset of operations being performed in other fibers completes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"sync/cyclicbarrier.md\"\n  }, \"CyclicBarrier\")), \" \\u2014 A synchronization aid that allows a set of fibers to all wait for each\\nother to reach a common barrier point.\")), mdx(\"h3\", null, \"STM\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/stm.md\"\n  }, \"STM\")), \" \\u2014 An \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"STM\"), \" represents an effect that can be performed transactionally resulting in a failure or success.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tarray.md\"\n  }, \"TArray\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TArray\"), \" is an array of mutable references that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tset.md\"\n  }, \"TSet\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TSet\"), \" is a mutable set that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tmap.md\"\n  }, \"TMap\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TMap\"), \" is a mutable map that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tref.md\"\n  }, \"TRef\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TRef\"), \" is a mutable reference to an immutable value that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tpriorityqueue.md\"\n  }, \"TPriorityQueue\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TPriorityQueue\"), \" is a mutable priority queue that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tpromise.md\"\n  }, \"TPromise\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TPromise\"), \" is a mutable reference that can be set exactly once and can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tqueue.md\"\n  }, \"TQueue\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TQueue\"), \" is a mutable queue that can participate in transactions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/treentrantlock.md\"\n  }, \"TReentrantLock\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TReentrantLock\"), \" is a reentrant read / write lock that can be composed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stm/tsemaphore.md\"\n  }, \"TSemaphore\")), \" \\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TSemaphore\"), \" is a semaphore that can participate in transactions.\")), mdx(\"h2\", null, \"Resource Management\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"resource/scope.md\"\n  }, \"Scope\")), \" \\u2014 A scope in which resources can safely be used.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"resource/zpool.md\"\n  }, \"ZPool\")), \" \\u2014 An asynchronous and concurrent generalized pool of reusable resources.\")), mdx(\"h2\", null, \"Streaming\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/zstream.md\"\n  }, \"ZStream\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZStream\"), \" is a lazy, concurrent, asynchronous source of values.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/stream.md\"\n  }, \"Stream\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Stream[E, A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZStream[Any, E, A]\"), \", which represents a ZIO stream that does not require any services, and may fail with an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \", or produce elements with an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/zsink.md\"\n  }, \"ZSink\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZSink\"), \" is a consumer of values from a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZStream\"), \", which may produce a value when it has consumed enough.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/sink.md\"\n  }, \"Sink\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Sink[InErr, A, OutErr, L, B]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZSink[Any, InErr, A, OutErr, L, B]\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/zpipeline.md\"\n  }, \"ZPipeline\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZPipeline\"), \" is a polymorphic stream transformer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"stream/subscriptionref.md\"\n  }, \"SubscriptionRef\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SubscriptionRef[A]\"), \" contains a current value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" and a stream that can be consumed to observe all changes to that value.\")), mdx(\"h2\", null, \"Miscellaneous\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"misc/chunk.md\"\n  }, \"Chunk\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Chunk\"), \" is a fast, pure alternative to Arrays.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"misc/schedule.md\"\n  }, \"Schedule\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Schedule\"), \" is a model of a recurring schedule, which can be used for repeating successful \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IO\"), \" values, or retrying failed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IO\"), \" values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"misc/supervisor.md\"\n  }, \"Supervisor\")), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Supervisor[A]\"), \" is allowed to supervise the launching and termination of fibers, producing some visible value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" from the supervision.\")), mdx(\"p\", null, \"To learn more about these data types, please explore the pages above, or check out the Scaladoc documentation.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/index.md"}},"staticQueryHashes":[]}