{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/contextual/index","result":{"data":{"mdx":{"id":"7445c3b2-b970-5a8e-ae8e-d733fb5e33b7","slug":"datatypes/contextual/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"index\",\n  \"title\": \"Introduction to the ZIO's Contextual Data Types\",\n  \"sidebar_label\": \"Introduction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ZIO provides a contextual abstraction that encodes the environment of the running effect. This means, every effect can work within a specific context, called an environment.\"), mdx(\"p\", null, \"So when we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" effect, we can say \\\"given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" as the environment of the effect, the effect may fail with an error type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \", or may succeed with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \"\\\".\"), mdx(\"p\", null, \"For example, when we have an effect of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[DatabaseConnection, IOException, String]\"), \", we can say that our effect works within the context of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DatabaseConnection\"), \". In other words, we can say that our effect requires the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DatabaseConnection\"), \" service as a context to run.\"), mdx(\"p\", null, \"We will see how layers can be used to eliminate the environment of an effect:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\ntrait DatabaseConnection\\n\\n// An effect which requires DatabaseConnection to run\\nval effect: ZIO[DatabaseConnection, IOException, String] = ???\\n\\n// A layer that produces DatabaseConnection service\\nval dbConnection: ZLayer[Any, IOException, DatabaseConnection] = ???\\n\\n// After applying dbConnection to our environmental effect the reurned\\n// effect has no dependency on the DatabaseConnection\\nval eliminated: ZIO[Any, IOException, String] = \\n  dbConnection { // Provides DatabaseConnection context\\n    effect       // An effect running within `DatabaseConnection` context\\n  }\\n\")), mdx(\"p\", null, \"ZIO provides this facility through the following concepts and data types:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#1-zio-environment\"\n  }, \"ZIO Environment\"), \" \\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \" type parameter of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[R, E, A]\"), \" data type.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zenvironment.md\"\n  }, \"ZEnvironment\"), \" \\u2014 Built-in type-level map for maintaining the environment of a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO\"), \" data type. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zlayer.md\"\n  }, \"ZLayer\"), \" \\u2014 Describes how to build one or more services in our application.\")), mdx(\"p\", null, \"Next, we will discuss \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Environment\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" and finally how to write ZIO services using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Service Pattern\"), \".\"), mdx(\"h2\", null, \"1. ZIO Environment\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[-R, +E, +A]\"), \" data type describes an effect that requires an input of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", as an environment, may fail with an error of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \", or succeed with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"p\", null, \"The input type is also known as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"environment type\"), \". This type-parameter indicates that to run an effect we need one or some services as an environment of that effect. In other word, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" represents the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"requirement\"), \" for the effect to run, meaning we need to fulfill the requirement in order to make the effect \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"runnable\"), \".\"), mdx(\"p\", null, \"So we can think of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" as a mental model of a function from a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either[E, A]\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"type ZIO[R, E, A] = R => Either[E, A]\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" represents dependencies; whatever services, config, or wiring a part of a ZIO program depends upon to work. We will explore what we can do with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", as it plays a crucial role in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \".\"), mdx(\"p\", null, \"We don't need to provide live layers for built-in services (Layers will be discussed later on this page). ZIO has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnv\"), \" type alias for the composition of all ZIO built-in services (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Random\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Blocking\"), \"). So we can run the above \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effect\"), \" as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run = effect\\n  \\n  val effect: ZIO[Any, Nothing, Unit] = for {\\n    r <- Random.nextInt\\n    _ <- Console.printLine(s\\\"random number: $r\\\").orDie\\n  } yield ()\\n}\\n\")), mdx(\"h3\", null, \"Motivation\"), mdx(\"p\", null, \"One might ask \\\"What is the motivation behind encoding the dependency in the type parameter of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type\\\"? What is the benefit of doing so?\"), mdx(\"p\", null, \"Let's see how writing an application which requires reading from or writing to the console. As part of making the application \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"modular\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"testable\"), \" we define a separate service called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" which is responsible for reading from and writing to the console. We do that simply by writing an interface:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Console {\\n  def print(line: Any): Task[Unit]\\n\\n  def printLine(line: Any): Task[Unit]\\n\\n  def readLine: Task[String]\\n}\\n\")), mdx(\"p\", null, \"Now we can write our application that accepts the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" interface as a parameter:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ndef myApp(c: Console): Task[Unit] =\\n  for {\\n    _    <- c.print(\\\"Please enter your name: \\\")\\n    name <- c.readLine\\n    _    <- c.printLine(s\\\"Hello, $name!\\\")\\n  } yield ()\\n\")), mdx(\"p\", null, \"Similar to the object-oriented paradigm we code to interface not implementation. In order to run the application, we need to implement a production version of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject ConsoleLive extends Console {\\n  override def print(line: Any): Task[Unit] =\\n    ZIO.attemptBlocking(scala.Predef.print(line))\\n\\n  override def printLine(line: Any): Task[Unit] =\\n    ZIO.attemptBlocking(scala.Predef.println(line))\\n\\n  override def readLine: Task[String] =\\n    ZIO.attemptBlocking(scala.io.StdIn.readLine())\\n}\\n\")), mdx(\"p\", null, \"Finally, we can provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConsoleLive\"), \" to our application and run the whole:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def myApp(c: Console): Task[Unit] =\\n    for {\\n      _    <- c.print(\\\"Please enter your name: \\\")\\n      name <- c.readLine\\n      _    <- c.printLine(s\\\"Hello, $name!\\\")\\n    } yield ()\\n\\n  def run = myApp(ConsoleLive)\\n}\\n\")), mdx(\"p\", null, \"In the above example, we discard the fact that we could use the ZIO environment and utilize the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" parameter of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type. So instead we tried to write the application with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\"), \" data type, which ignores the ZIO environment. To create our application testable, we gathered all console functionalities into the same interface called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \", and implemented that in another object called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConsoleLive\"), \". Finally, at the end of the day, we provide the implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" service, i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConsoleLive\"), \", to our application.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"While this technique works for small programs, it doesn't scale.\"), \" Assume we have multiple services, and we use them in our application logic like below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def foo(\\n   s1: Service1,\\n   s2: Service2,\\n   s3: Service3\\n)(arg1: String, arg2: String, arg3: Int): Task[Int] = ???\\n\\ndef bar(\\n  s1: Service1,\\n  s12: Service12,\\n  s18: Service18, \\n  sn: ServiceN\\n)(arg1: Int, arg2: String, arg3: Double, arg4: Int): Task[Unit]\\n\\ndef myApp(s1: Service1, s2: Service2, ..., sn: ServiceN): Task[Unit] = \\n  for {\\n    a <- foo(s1, s2, s3)(\\\"arg1\\\", \\\"arg2\\\", 4) \\n    _ <- bar(s1, s12, s18, sn)(7, \\\"arg2\\\", 1.2, a)\\n      ...\\n  } yield ()\\n\")), mdx(\"p\", null, \"Writing real applications using this technique is tedious and cumbersome because all dependencies have to be passed across all methods. We can simplify the process of writing our application by using the ZIO environment and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#service-pattern\"\n  }, \"Service Pattern\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def foo(arg1: String, arg2: String, arg3: Int): ZIO[Service1 & Service2 & Service3, Throwable, Int] = \\n  for {\\n    s1 <- ZIO.service[Service1]\\n    s2 <- ZIO.service[Service2] \\n      ...\\n  } yield ()\\n\\ndef bar(arg1: Int, arg2: String, arg3: Double, arg4: Int): ZIO[Service1 & Service12 & Service18 & ServiceN, Throwable, Unit] =\\n  for {\\n    s1  <- ZIO.service[Service1] \\n    s12 <- ZIO.service[Service12]\\n      ...\\n  } yield ()\\n\")), mdx(\"h3\", null, \"Advantage of Using ZIO Environment\"), mdx(\"p\", null, \"ZIO environment facility enables us to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Code to Interface\"), \" \\u2014 Like object-oriented paradigm, in ZIO we are encouraged to code to interface and defer the implementation. It is the best practice, but ZIO does not enforce us to do that.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Write a Testable Code\"), \" \\u2014 By coding to an interface, whenever we want to test our effects, we can easily mock any external services, by providing a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"test\"), \" version of those instead of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"live\"), \" version.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compose Services with Strong Type Inference Facility\"), \" \\u2014 We can compose multiple effects that require various services, so the final effect requires the intersection of all those services:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait ServiceA\\ntrait ServiceB\\ntrait ServiceC\\n\\n// Requires ServiceA and produces a value of type Int\\ndef foo: ZIO[ServiceA, Nothing, Int] = ???\\n\\n// Requires ServiceB and ServiceC and produces a value of type String\\ndef bar: ZIO[ServiceB & ServiceC, Throwable, String] = ???\\n\\n// Requires ServicB and produces a value of type Double\\ndef baz(a: Int, b: String): ZIO[ServiceB, Nothing, Double] = ???\\n\\n// Requires ServiceB and ServiceB and ServiceC and produces a value of type Double\\nval myApp: ZIO[ServiceA & ServiceB & ServiceC, Throwable, Double] =\\n  for {\\n    a <- foo\\n    b <- bar\\n    c <- baz(a, b)\\n  } yield c\\n\")), mdx(\"p\", null, \"Another important note about the ZIO environment is that the type inference works well on effect composition. After we composed all the application logic together, the compiler and also IDE can infer the proper type for the environment of the final effect.\"), mdx(\"p\", null, \"In the example above, the compiler can infer the environment type of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp\"), \" effect which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceA & ServiceB & ServiceC\"), \".\"), mdx(\"h3\", null, \"Accessing ZIO Environment\"), mdx(\"p\", null, \"We have two types of accessors for the ZIO environment:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Accessor (\", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ZIO.service\"), \")\"), \" is used to access a specific service from the environment.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Member Accessors (\", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ZIO.serviceWith\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ZIO.serviceWithZIO\"), \")\"), \" are used to access capabilities of a specific service from the environment.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \":\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To access the entire ZIO environment we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.environment*\"), \", but we do not use these methods regularly to access ZIO services. Instead, we use service accessors and service member accessors.\")), mdx(\"h4\", null, \"Service Accessor\"), mdx(\"p\", null, \"To access a service from the ZIO environment, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.service\"), \" constructor. For example, in the following program we are going to access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppConfig\"), \" from the environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(host: String, port: Int)\\n\\nval myApp: ZIO[AppConfig, Nothing, Unit] =\\n  for {\\n    config <- ZIO.service[AppConfig]\\n    _      <- ZIO.logInfo(s\\\"Application started with config: $config\\\")\\n  } yield ()\\n\")), mdx(\"p\", null, \"To run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp\"), \" effect, we should provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppConfig\"), \" layer (we will talk about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" on the next section):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object MainApp extends ZIOAppDefault {\\n  def run = myApp.provide(ZLayer.succeed(AppConfig(\\\"localhost\\\", 8080)))\\n}\\n\")), mdx(\"p\", null, \"To access multiple services from the ZIO environment, we can do the same:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Foo\\ntrait Bar\\ntrait Baz\\n\\nfor {\\n  foo <- ZIO.service[Foo]  \\n  bar <- ZIO.service[Bar]\\n  bax <- ZIO.service[Baz]\\n} yield ()\\n\")), mdx(\"p\", null, \"When creating ZIO layers that have multiple dependencies, this can be helpful. We will discuss this pattern in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#service-pattern\"\n  }, \"Service Pattern\"), \" section.\"), mdx(\"h4\", null, \"Service Member Accessors\"), mdx(\"p\", null, \"Sometimes instead of accessing a service, we need to access the capabilities (members) of a service. Based on the return type of each capability, we can use one of these accessors:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWith\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWithZIO\"))), mdx(\"p\", null, \"In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#service-pattern\"\n  }, \"Service Pattern\"), \", we use these accessors to write \\\"accessor methods\\\" for ZIO services.\"), mdx(\"p\", null, \"Let's look at each one in more detail:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWith\"), \" \\u2014 When we are accessing service members whose return type is an ordinary value, we should use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWith\"), \".\")), mdx(\"p\", null, \"In the following example, we need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.serviceWith\"), \" to write accessor methods for all of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppConfig\"), \" members:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(host: String, port: Int, poolSize: Int)\\n\\nobject AppConfig {\\n  // Accessor Methods\\n  def host: ZIO[AppConfig, Nothing, String]  = ZIO.serviceWith(_.host) \\n  def port: ZIO[AppConfig, Nothing, Int]     = ZIO.serviceWith(_.port)\\n  def poolSize: ZIO[AppConfig, Nothing, Int] = ZIO.serviceWith(_.poolSize)\\n}\\n\\nval myApp: ZIO[AppConfig, Nothing, Unit] =\\n  for {\\n    host     <- AppConfig.host\\n    port     <- AppConfig.port\\n    _        <- ZIO.logInfo(s\\\"The service will be service at $host:$port\\\")\\n    poolSize <- AppConfig.poolSize\\n    _        <- ZIO.logInfo(s\\\"Application started with $poolSize pool size\\\")\\n  } yield ()\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWithZIO\"), \" \\u2014 When we are accessing service members whose return type is a ZIO effect, we should use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWithZIO\"), \".\")), mdx(\"p\", null, \"For example, in order to write the accessor method for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log\"), \" member of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service, we need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.serviceWithZIO\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Logging {\\n  def log(line: String): Task[Unit]\\n}\\n\\nobject Logging {\\n  // Accessor Methods:\\n  def log(line: String): ZIO[Logging, Throwable, Unit] =\\n    ZIO.serviceWithZIO(_.log(line))\\n}\\n\\nval myApp: ZIO[Logging & Console, Throwable, Unit] =\\n  for {\\n    _    <- Logging.log(\\\"Application Started!\\\")\\n    _    <- Console.print(\\\"Please enter your name: \\\")\\n    name <- Console.readLine\\n    _    <- Console.printLine(s\\\"Hello, $name!\\\")\\n    _    <- Logging.log(\\\"Application exited!\\\")\\n  } yield ()\\n\")), mdx(\"h2\", null, \"2. ZEnvironment\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \" is a built-in type-level map for maintaining the environment of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type. We don't typically use this data type directly. It's okay to skip learning it at the moment. We have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zenvironment.md\"\n  }, \"separate article\"), \" about this data type.\"), mdx(\"h2\", null, \"3. ZLayer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[-RIn, +E, +ROut]\"), \" is a recipe to build an environment of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ROut\"), \", starting from a value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIn\"), \", and possibly producing an error \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \" during creation.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" combined with the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Environment\"), \", allow us to use ZIO for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dependency injection\"), \". There are two parts of dependency injection:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Building Dependency Graph\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Dependency Propagation\"))), mdx(\"p\", null, \"ZIO has a full solution to the dependency injection problem. It solves the first problem by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zlayer.md#manual-layer-construction\"\n  }, \"compositional properties\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \". Assume we have several services with their dependencies, and we need a way to compose and wire up these dependencies to create the dependency graph of the application. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" is a ZIO solution for this problem. It allows us to build up the whole application dependency graph by composing layers horizontally and vertically. \"), mdx(\"p\", null, \"ZIO also solves the second problem by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zlayer.md#dependency-propagation\"\n  }, \"ZIO Environment facilities like \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ZIO#provide\")), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"By using ZLayer and ZIO Environment we can solve the propagation and wire-up problems in dependency injection. Note that we are not enforced to use this approach, as we can still use things like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/google/guice\"\n  }, \"Guice\"), \" with ZIO, or we might like to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://izumi.7mind.io/distage/index.html\"\n  }, \"izumi distage\"), \" solution for dependency injection.\")), mdx(\"h2\", null, \"Defining ZIO Services\"), mdx(\"p\", null, \"Defining services in ZIO is not very different from object-oriented style, it has the same principle: coding to an interface, not an implementation. Therefore, ZIO encourages us to implement this principle by using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Service Pattern\"), \", which is quite similar to the object-oriented style.\"), mdx(\"p\", null, \"Before diving into writing services in ZIO style, let's review how we define them in an object-oriented fashion in the next section.\"), mdx(\"h3\", null, \"Defining Services in OOP\"), mdx(\"p\", null, \"Here are the steps we take to implement a service in object-oriented programming:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Definition\"), \" \\u2014 In object-oriented programming, we define services with traits. A service is a bundle of related functionality that is defined in a trait:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait FooService {\\n\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Implementation\"), \" \\u2014 We implement these services by using classes:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"class FooServiceImpl extends FooService {\\n    \\n}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Defining Dependencies\"), \" \\u2014 If the creation of a service depends on other services, we can define these dependencies by using constructors:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait ServiceA {\\n\\n}\\n\\ntrait ServiceB {\\n\\n}\\n\\nclass FooServiceImpl(a: ServiceA, b: ServiceB) {\\n\\n}\\n\")), mdx(\"p\", null, \"In object-oriented programming, the best practice is to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"program to an interface, not an implementation\"), \". So in the previous example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceA\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceB\"), \" are interfaces, not concrete classes.\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Injecting Dependencies\"), \" \\u2014 Now, the client of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FooServiceImpl\"), \" service can provide its own implementation of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ServiceA\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ServiceB\"), \", and inject them to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FooServiceImpl\"), \" constructor:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"class ServiceAImpl extends ServiceA\\nclass ServiceBImpl extends ServiceB\\nval fooService = new FooServiceImpl(new ServiceAImpl, new ServiceBImpl)\\n\")), mdx(\"p\", null, \"Sometimes, as the number of dependent services grows and the dependency graph of our application becomes complicated, we need an automatic way of wiring and providing dependencies into the services of our application. In these situations, we might use a dependency injection framework to do all its magic machinery for us.\"), mdx(\"h3\", null, \"Defining Services in ZIO\"), mdx(\"p\", null, \"A service is a group of functions that deals with only one concern. Keeping the scope of each service limited to a single responsibility improves our ability to understand code, in that we need to focus only on one topic at a time without juggling too many concepts together in our head.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" itself provides the basic capabilities through modules, e.g. see how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnv\"), \" is defined.\"), mdx(\"p\", null, \"In functional Scala as well as in object-oriented programming the best practice is to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Program to an Interface, Not an Implementation\"), \". This is the most important design principle in software development and helps us to write maintainable code by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Allowing the client to hold an interface as a contract and don't worry about the implementation. The interface signature determines all operations that should be done.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Enabling a developer to write more testable programs. When we write a test for our business logic we don't have to run and interact with real services like databases which makes our test run very slow. If our code is correct our test code should always pass, there should be no hidden variables or depend on outside sources. We can't know that the database is always running correctly. We don't want to fail our tests because of the failure of external service.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Providing the ability to write more modular applications. So we can plug in different implementations for different purposes without a major modification.\"))), mdx(\"p\", null, \"It is not mandatory, but ZIO encourages us to follow this principle by bundling related functionality as an interface by using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Service Pattern\"), \".\"), mdx(\"p\", null, \"The core idea is that a layer depends upon the interfaces exposed by the layers immediately below itself, but is completely unaware of its dependencies' internal implementations.\"), mdx(\"p\", null, \"In object-oriented programming:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Definition\"), \" is done by using \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"interfaces\"), \" (Scala trait or Java Interface).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Implementation\"), \" is done by implementing interfaces using \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"classes\"), \" or creating \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"new object\"), \" of the interface.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Defining Dependencies\"), \" is done by using \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"constructors\"), \". They allow us to build classes, given their dependencies. This is called constructor-based dependency injection.\")), mdx(\"p\", null, \"We have a similar analogy in the Service Pattern, except instead of using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"constructors\"), \" we use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ZLayer\")), \" to define dependencies. So in ZIO fashion, we can think of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" as a service constructor.\"), mdx(\"h3\", null, \"Service Pattern\"), mdx(\"p\", null, \"Writing services in ZIO using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Service Pattern\"), \" is very similar to the object-oriented way of defining services. We use scala traits to define services, classes to implement services, and constructors to define service dependencies. Finally, we lift the class constructor into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \".\"), mdx(\"p\", null, \"Let's start learning this service pattern by writing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Definition\"), \" \\u2014 Traits are how we define services. A service could be all the stuff that is related to one concept with singular responsibility. We define the service definition with a trait named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Logging\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait Logging {\\n  def log(line: String): UIO[Unit]\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Implementation\"), \" \\u2014 It is the same as what we did in an object-oriented fashion. We implement the service with the Scala class. By convention, we name the live version of its implementation as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LoggingLive\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"case class LoggingLive() extends Logging {\\n  override def log(line: String): UIO[Unit] = \\n    ZIO.succeed(print(line))\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Define Service Dependencies\"), \" \\u2014 We might need \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Console\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Clock\"), \" services to implement the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Logging\"), \" service. Here, we put its dependencies into its constructor. All the dependencies are just interfaces, not implementation. Just like what we did in object-oriented style:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"case class LoggingLive(console: Console, clock: Clock) extends Logging {\\n  override def log(line: String): UIO[Unit] = \\n    for {\\n      current <- clock.currentDateTime\\n      _       <- console.printLine(s\\\"$current--$line\\\").orDie\\n    } yield ()\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Defining ZLayer\"), \" \\u2014 Now, we create a companion object for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LoggingLive\"), \" data type and lift the service implementation into the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object LoggingLive {\\n  val layer: URLayer[Any, Logging] =\\n    ZLayer {\\n      for {\\n        console <- ZIO.console\\n        clock   <- ZIO.clock\\n      } yield LoggingLive(console, clock)\\n    }\\n}\\n\")), mdx(\"p\", null, \"Note that the previous step is syntactic sugar of writing the layer directly in combination with for-comprehension style of accessing the ZIO environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object LoggingLive {\\n  val layer: ZLayer[Any, Nothing, Logging] =\\n    ZLayer {\\n      for {\\n        console <- ZIO.service[Console]\\n        clock   <- ZIO.service[Clock]\\n      } yield LoggingLive(console, clock)\\n    }\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Accessor Methods\"), \" \\u2014 Finally, to create the API more ergonomic, it's better to write accessor methods for all of our service methods using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO.serviceWithZIO\"), \" constructor inside the companion object:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Logging {\\n  def log(line: String): URIO[Logging, Unit] = ZIO.serviceWithZIO[Logging](_.log(line))\\n}\\n\")), mdx(\"p\", null, \"Accessor methods allow us to utilize all the features inside the service through the ZIO Environment. That means, if we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging.log\"), \", we don't need to pull out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log\"), \" function from the ZIO Environment. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.serviceWithZIO\"), \" constructor helps us to access the environment and reduce the redundant operations, every time.\"), mdx(\"p\", null, \"This is how ZIO services are created. Let's use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service in our application. We should provide the live layer of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service to be able to run the application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport java.io.IOException\\n\\nobject MainApp extends ZIOAppDefault {\\n  val app: ZIO[Logging, IOException, Unit] =\\n    for {\\n      _    <- Logging.log(\\\"Application Started!\\\")\\n      _    <- Console.print(\\\"Enter your name:\\\")\\n      name <- Console.readLine\\n      _    <- Console.printLine(s\\\"Hello, $name!\\\")\\n      _    <- Logging.log(\\\"Application Exited!\\\")\\n    } yield ()\\n\\n  def run = app.provide(LoggingLive.layer)\\n}\\n\")), mdx(\"p\", null, \"During writing the application, we don't care which implementation version of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service will be injected into our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \", later at the end of the day, it will be provided by one of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide*\"), \" methods.\"), mdx(\"p\", null, \"That's it! Very simple! ZIO encourages us to follow some of the best practices in object-oriented programming. So it doesn't require us to throw away all our object-oriented knowledge.\"), mdx(\"h3\", null, \"Defining Polymorphic Services in ZIO\"), mdx(\"p\", null, \"As we discussed \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zenvironment.md\"\n  }, \"here\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \", which is the underlying data type used by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \", is backed by a type-level mapping from types of services to implementations of those services. This functionality is backed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"izumi.reflect.Tag\"), \", which captures a type as a value. \"), mdx(\"p\", null, \"We just need to know what is the type of service when we put it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \" because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \" is essentially a map from \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"service types (interfaces)\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"implementation of those interfaces\"), \". To implement the map, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \" needs a type tag for the new service, and also needs a way to remove the old service from the type level map. So we should have service type information at the runtime. \"), mdx(\"p\", null, \"We can think of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag[A]\"), \" as like a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TypeTag[A]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClassTag[A]\"), \" from the Scala standard library but available on a cross-version and cross-platform basis. Basically, it carries information about a certain type into runtime that was available at compile time. Methods that construct \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment\"), \" values generally require a tag for the value being included in the \\u201Cbundle of services\\u201D. \"), mdx(\"p\", null, \"As a user, we should not normally interact with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" except where we define polymorphic services. In general, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" should always be available whenever we have a concrete type. The only time we should have to use it is when we have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"polymorphic service\"), \". If we are using polymorphic code, we need to provide implicit evidence that a tag exists for that type (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"implicit tag: Tag[A]\"), \") or as a context-bound for that type parameter: (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A: Tag\"), \").\"), mdx(\"p\", null, \"Let's try to write a polymorphic service. Assume we have the following service interface:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait KeyValueStore[K, V, E, F[_, _]] {\\n  def get(key: K): F[E, V]\\n\\n  def set(key: K, value: V): F[E, V]\\n\\n  def remove(key: K): F[E, Unit]\\n}\\n\")), mdx(\"p\", null, \"In the next step, we are going to write its accessors. We might end up with the following snippet code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject KeyValueStore {\\n  def get[K, V, E](key: K): ZIO[KeyValueStore[K, V, E, IO], E, V] =\\n    ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.get(key))\\n\\n  def set[K, V, E](key: K, value: V): ZIO[KeyValueStore[K, V, E, IO], E, V] =\\n    ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.set(key, value))\\n\\n  def remove[K, V, E](key: K): ZIO[KeyValueStore[K, V, E, IO], E, Unit] =\\n    ZIO.serviceWithZIO(_.remove(key))\\n}\\n\\n// error: could not find implicit value for izumi.reflect.Tag[K]. Did you forget to put on a Tag, TagK or TagKK context bound on one of the parameters in K? e.g. def x[T: Tag, F[_]: TagK] = ...\\n// \\n// \\n// <trace>: \\n//   deriving Tag for K, dealiased: K:\\n//   could not find implicit value for Tag[K]: K is a type parameter without an implicit Tag!\\n//     ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.get(key))\\n//                                                   ^\\n// error: could not find implicit value for izumi.reflect.Tag[K]. Did you forget to put on a Tag, TagK or TagKK context bound on one of the parameters in K? e.g. def x[T: Tag, F[_]: TagK] = ...\\n// \\n// \\n// <trace>: \\n//   deriving Tag for K, dealiased: K:\\n//   could not find implicit value for Tag[K]: K is a type parameter without an implicit Tag!\\n//     ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.set(key, value))\\n//                                                   ^\\n// error: could not find implicit value for izumi.reflect.Tag[K]. Did you forget to put on a Tag, TagK or TagKK context bound on one of the parameters in K? e.g. def x[T: Tag, F[_]: TagK] = ...\\n// \\n// \\n// <trace>: \\n//   deriving Tag for K, dealiased: K:\\n//   could not find implicit value for Tag[K]: K is a type parameter without an implicit Tag!\\n//     ZIO.serviceWithZIO(_.remove(key))\\n//                       ^\\n\")), mdx(\"p\", null, \"The compiler generates the following errors:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"could not find implicit value for izumi.reflect.Tag[K]. Did you forget to put on a Tag, TagK or TagKK context bound on one of the parameters in K? e.g. def x[T: Tag, F[_]: TagK] = ...\\n\\n\\n<trace>: \\n  deriving Tag for K, dealiased: K:\\n  could not find implicit value for Tag[K]: K is a type parameter without an implicit Tag!\\n    ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.get(key))\\n\")), mdx(\"p\", null, \"As the compiler says, we should put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" as a context-bound for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"K\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"V\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \" type parameters:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject KeyValueStore {\\n  def get[K: Tag, V: Tag, E: Tag](key: K): ZIO[KeyValueStore[K, V, E, IO], E, V] =\\n    ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.get(key))\\n\\n  def set[K: Tag, V: Tag, E: Tag](key: K, value: V): ZIO[KeyValueStore[K, V, E, IO], E, V] =\\n    ZIO.serviceWithZIO[KeyValueStore[K, V, E, IO]](_.set(key, value))\\n\\n  def remove[K: Tag, V: Tag, E: Tag](key: K): ZIO[KeyValueStore[K, V, E, IO], E, Unit] =\\n    ZIO.serviceWithZIO(_.remove(key))\\n}\\n\")), mdx(\"p\", null, \"Now, we can continue and implement the in-memory version of this key-value store:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"case class InmemoryKeyValueStore(map: Ref[Map[String, Int]])\\n  extends KeyValueStore[String, Int, String, IO] {\\n\\n  override def get(key: String): IO[String, Int] =\\n    map.get.map(_.get(key)).someOrFail(s\\\"$key not found\\\")\\n\\n  override def set(key: String, value: Int): IO[String, Int] =\\n    map.update(_.updated(key, value)).map(_ => value)\\n\\n  override def remove(key: String): IO[String, Unit] =\\n    map.update(_.removed(key))\\n}\\n\\nobject InmemoryKeyValueStore {\\n  def layer: ULayer[KeyValueStore[String, Int, String, IO]] =\\n    ZLayer {\\n      Ref.make(Map[String, Int]()).map(InmemoryKeyValueStore.apply)\\n    }\\n}\\n\")), mdx(\"p\", null, \"The last step is to use the service in a ZIO application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[KeyValueStore[String, Int, String, IO], String, Unit] =\\n    for {\\n      _ <- KeyValueStore.set[String, Int, String](\\\"key1\\\", 3).debug\\n      _ <- KeyValueStore.get[String, Int, String](\\\"key1\\\").debug\\n      _ <- KeyValueStore.remove[String, Int, String](\\\"key1\\\")\\n      _ <- KeyValueStore.get[String, Int, String](\\\"key1\\\").either.debug\\n    } yield ()\\n\\n  def run = myApp.provide(InmemoryKeyValueStore.layer)\\n  \\n}\\n\")), mdx(\"p\", null, \"Note that in the above example, one might want to write accessors more polymorphic. So in this case we should add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TagKK\"), \" as a context-bound of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"F\"), \" type parameter:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object KeyValueStore {\\n  def get[K: Tag, V: Tag, E: Tag, F[_, _] : TagKK](key: K): ZIO[KeyValueStore[K, V, E, F], Nothing, F[E, V]] =\\n    ZIO.serviceWith[KeyValueStore[K, V, E, F]](_.get(key))\\n\\n  def set[K: Tag, V: Tag, E: Tag, F[_, _] : TagKK](key: K, value: V): ZIO[KeyValueStore[K, V, E, F], Nothing, F[E, V]] =\\n    ZIO.serviceWith[KeyValueStore[K, V, E, F]](_.set(key, value))\\n\\n  def remove[K: Tag, V: Tag, E: Tag, F[_, _] : TagKK](key: K): ZIO[KeyValueStore[K, V, E, F], E, Unit] =\\n    ZIO.serviceWith(_.remove(key))\\n}\\n\")), mdx(\"h3\", null, \"Generating Accessor Methods Using Macros\"), mdx(\"p\", null, \"Writing accessor methods is a repetitive task and would be cumbersome in services with many methods. We can automate the generation of accessor methods using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio-macro\"), \" module. \"), mdx(\"p\", null, \"To install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio-macro\"), \" we should add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-macros\\\" % \\\"<zio-version>\\\"\\n\")), mdx(\"p\", null, \"Also, to enable macro expansion we need to setup our project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"for Scala \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">= 2.13\"), \" add compiler option:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"scalacOptions += \\\"-Ymacro-annotations\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"for Scala \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"< 2.13\"), \" add macro paradise compiler plugin:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"compilerPlugin((\\\"org.scalamacros\\\" % \\\"paradise\\\"  % \\\"2.1.1\\\") cross CrossVersion.full)\\n\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"At the moment these are only available for Scala versions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2.x\"), \", however their equivalents for Scala 3 are on our roadmap.\")), mdx(\"h4\", null, \"Monomorphic Services\"), mdx(\"p\", null, \"We can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@accessible\"), \" macro to generate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"service member accessors\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessible\\n\\n@accessible\\ntrait ServiceA {\\n  def method(input: Something): UIO[Unit]\\n}\\n\\n// below will be autogenerated\\nobject ServiceA {\\n  def method(input: Something) =\\n    ZIO.serviceWithZIO[ServiceA](_.method(event))\\n}\\n\")), mdx(\"p\", null, \"For normal values, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \" on error channel is generated:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessible\\n\\n@accessible\\ntrait ServiceB {\\n  def pureMethod(input: Something): SomethingElse\\n}\\n\\n// below will be autogenerated\\nobject ServiceB {\\n  def pureMethod(input: Something): ZIO[ServiceB, Nothing, SomethingElse] =\\n    ZIO.serviceWith[ServiceB](_.pureMethod(input))\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@throwing\"), \" annotation will mark impure methods. Using this annotation will request ZIO to push the error on the error channel:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessible\\nimport zio.macros.throwing\\n\\n@accessible\\ntrait ServiceC {\\n  @throwing\\n  def impureMethod(input: Something): SomethingElse\\n}\\n\\n// below will be autogenerated\\nobject ServiceC {\\n  def impureMethod(input: Something): ZIO[ServiceC, Throwable, SomethingElse] =\\n    ZIO.serviceWithZIO[ServiceC](s => ZIO(s.impureMethod(input)))\\n}\\n\")), mdx(\"p\", null, \"Below is a fully working example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessible\\n\\n@accessible\\ntrait KeyValueStore {\\n  def set(key: String, value: Int): Task[Int]\\n\\n  def get(key: String): Task[Int]\\n}\\n\\n\\ncase class InmemoryKeyValueStore(map: Ref[Map[String, Int]])\\n  extends KeyValueStore {\\n  override def set(key: String, value: Int): Task[Int] =\\n    map.update(_.updated(key, value)).map(_ => value)\\n\\n  override def get(key: String): Task[Int] =\\n    map.get.map(_.get(key)).someOrFailException\\n}\\n\\nobject InmemoryKeyValueStore {\\n  val layer: ULayer[KeyValueStore] =\\n    ZLayer {\\n      for {\\n        map <- Ref.make(Map[String, Int]())\\n      } yield InmemoryKeyValueStore(map)\\n    }\\n}\\n\\nobject MainApp extends ZIOAppDefault {\\n  val myApp =\\n    for {\\n      _   <- KeyValueStore.set(\\\"key\\\", 5)\\n      key <- KeyValueStore.get(\\\"key\\\")\\n    } yield key\\n    \\n  def run = myApp.provide(InmemoryKeyValueStore.layer).debug\\n}\\n\")), mdx(\"h4\", null, \"Writing Polymorphic Services\"), mdx(\"h5\", null, \"With Proper Type Parameters\"), mdx(\"p\", null, \"If the service is polymorphic for some proper types, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@accessible\"), \" macro like previous examples.\"), mdx(\"p\", null, \"Assume we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KeyValueStore\"), \" like below, as we will see using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@accessible\"), \" will generate us the accessor methods:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessible\\n\\n\\n@accessible\\ntrait KeyValueStore[K, V] {\\n  def set(key: K, value: V): Task[V]\\n\\n  def get(key: K): Task[V]\\n}\\n\\n\\ncase class InmemoryKeyValueStore(map: Ref[Map[String, Int]])\\n  extends KeyValueStore[String, Int] {\\n  override def set(key: String, value: Int): Task[Int] =\\n    map.update(_.updated(key, value)).map(_ => value)\\n\\n  override def get(key: String): Task[Int] =\\n    map.get.map(_.get(key)).someOrFailException\\n}\\n\\nobject InmemoryKeyValueStore {\\n  val layer: ULayer[KeyValueStore[String, Int]] =\\n    ZLayer {\\n      for {\\n        map <- Ref.make(Map[String, Int]())\\n      } yield InmemoryKeyValueStore(map)\\n    }\\n}\\n\\nobject MainApp extends ZIOAppDefault {\\n  val myApp =\\n    for {\\n      _ <- KeyValueStore.set(\\\"key\\\", 5)\\n      key <- KeyValueStore.get[String, Int](\\\"key\\\")\\n    } yield key\\n\\n  def run = myApp.provide(InmemoryKeyValueStore.layer).debug\\n}\\n\")), mdx(\"h5\", null, \"With Higher-Kinded Type Parameters (\", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"F[_]\"), \")\"), mdx(\"p\", null, \"If a service has a higher-kinded type parameter like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"F[_]\"), \" we should use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accessibleM\"), \" macro. Here is an example of such a service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessibleM\\n\\n@accessibleM[Task]\\ntrait KeyValueStore[K, V, F[_]] {\\n  def set(key: K, value: V): F[V]\\n\\n  def get(key: K): F[V]\\n}\\n\\ncase class InmemoryKeyValueStore(map: Ref[Map[String, Int]])\\n  extends KeyValueStore[String, Int, Task] {\\n  override def set(key: String, value: Int): Task[Int] =\\n    map.update(_.updated(key, value)).map(_ => value)\\n\\n  override def get(key: String): Task[Int] =\\n    map.get.map(_.get(key)).someOrFailException\\n\\n}\\n\\nobject InmemoryKeyValueStore {\\n  val layer: ULayer[KeyValueStore[String, Int, Task]] =\\n    ZLayer {\\n      for {\\n        map <- Ref.make(Map[String, Int]())\\n      } yield InmemoryKeyValueStore(map)\\n    }\\n}\\n\\n\\nobject MainApp extends ZIOAppDefault {\\n  val myApp =\\n    for {\\n      key <- KeyValueStore.set[String, Int](\\\"key\\\", 5)\\n      _   <- KeyValueStore.get[String, Int](\\\"key\\\")\\n    } yield key\\n\\n  def run = myApp.provide(InmemoryKeyValueStore.layer).debug\\n}\\n\\n\")), mdx(\"h5\", null, \"With Higher-Kinded Type Parameters (\", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"F[_, _]\"), \")\"), mdx(\"p\", null, \"If the service has a higher-kinded type parameter like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"F[_, _]\"), \" we should use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accessibleMM\"), \" macro. Let's see an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.macros.accessibleMM\\n\\n@accessibleMM[IO]\\ntrait KeyValueStore[K, V, E, F[_, _]] {\\n  def set(key: K, value: V): F[E, V]\\n\\n  def get(key: K): F[E, V]\\n}\\n\\ncase class InmemoryKeyValueStore(map: Ref[Map[String, Int]])\\n  extends KeyValueStore[String, Int, String, IO] {\\n  override def set(key: String, value: Int): IO[String, Int] =\\n    map.update(_.updated(key, value)).map(_ => value)\\n\\n  override def get(key: String): IO[String, Int] =\\n    map.get.map(_.get(key)).someOrFail(s\\\"key not found: $key\\\")\\n}\\n\\nobject InmemoryKeyValueStore {\\n  val layer: ULayer[KeyValueStore[String, Int, String, IO]] =\\n    ZLayer {\\n      for {\\n        map <- Ref.make(Map[String, Int]())\\n      } yield InmemoryKeyValueStore(map)\\n    }\\n}\\n\\nobject MainApp extends ZIOAppDefault {\\n  val myApp =\\n    for {\\n      _   <- KeyValueStore.set[String, Int, String](\\\"key\\\", 5)\\n      key <- KeyValueStore.get[String, Int, String](\\\"key\\\")\\n    } yield key\\n\\n  def run = myApp.provide(InmemoryKeyValueStore.layer).debug\\n\\n}\\n\")), mdx(\"h3\", null, \"The Three Laws of ZIO Environment\"), mdx(\"p\", null, \"When we are working with the ZIO environment, one question might arise: \\\"When should we use environment and when do we need to use constructors?\\\".\"), mdx(\"p\", null, \"Using ZIO environment follows three laws:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Interface (Trait)\"), \" \\u2014 When we are defining service interfaces we should \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"never\"), \" use the environment for dependencies of the service itself.\")), mdx(\"p\", null, \"For example, if the implementation of service \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" depends on service \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Y\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Z\"), \" then these should never be reflected in the trait that defines service \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \". It's leaking implementation details.\"), mdx(\"p\", null, \"So the following service definition is wrong because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" service are dependencies of the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service's implementation, not the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" interface itself:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\ntrait Logging {\\n  def log(line: String): ZIO[Any, Nothing, Unit]\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Service Implementation (Class)\"), \" \\u2014 When implementing service interfaces, we should accept all dependencies in the class constructor.\")), mdx(\"p\", null, \"Again, let's see how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LoggingLive\"), \" accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" dependencies from the class constructor:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"case class LoggingLive(console: Console, clock: Clock) extends Logging {\\n  override def log(line: String): UIO[Unit] =\\n    for {\\n      current <- clock.currentDateTime\\n      _       <- console.printLine(s\\\"$current--$line\\\").orDie\\n    } yield ()\\n}\\n\")), mdx(\"p\", null, \"So keep in mind, we can't do something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"case class LoggingLive() extends Logging {\\n  override def log(line: String) =\\n    for {\\n      clock   <- ZIO.service[Clock]\\n      console <- ZIO.service[Console]\\n      current <- clock.currentDateTime\\n      _       <- console.printLine(s\\\"$current--$line\\\").orDie\\n    } yield ()\\n}\\n\\n// error: type mismatch;\\n//  found   : zio.ZIO[zio.Console & zio.Clock,Nothing,Unit]\\n//     (which expands to)  zio.ZIO[zio.Console with zio.Clock,Nothing,Unit]\\n//  required: zio.ZIO[Logging,Nothing,Unit]\\n//   def log(line: String): URIO[Logging, Unit] = ZIO.serviceWithZIO[Logging](_.log(line))\\n//                                                                            ^^^^^^^^^^^\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Business Logic\"), \" \\u2014 Finally, in the business logic we should use the ZIO environment to consume services.\")), mdx(\"p\", null, \"Therefore, in the last example, if we inline all accessor methods whenever we are using services, we are using the ZIO environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport java.io.IOException\\n\\nobject MainApp extends ZIOAppDefault {\\n  val app: ZIO[Logging, IOException, Unit] =\\n    for {\\n      _    <- ZIO.serviceWithZIO[Logging](_.log(\\\"Application Started!\\\"))\\n      _    <- Console.print(\\\"Enter your name: \\\")\\n      name <- Console.readLine\\n      _    <- Console.printLine(s\\\"Hello, $name!\\\")\\n      _    <- ZIO.serviceWithZIO[Logging](_.log(\\\"Application Exited!\\\"))\\n    } yield ()\\n\\n  def run = app.provide(LoggingLive.layer)\\n}\\n\")), mdx(\"p\", null, \"That's it! These are the most important rules we need to know about the ZIO environment.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \":\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The remaining part of this section can be skipped if you are not an advanced ZIO user.\")), mdx(\"p\", null, \"Now let's elaborate more on the first rule. On rare occasions, all of which involve local context that is independent of implementation, it's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"acceptable\"), \" to use the environment in the definition of a service.\"), mdx(\"p\", null, \"Here are two examples:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In a web application, a service may be defined only to operate in the context of an HTTP request. In such a case, the request itself could be stored in the environment: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[HttpRequest, ...]\"), \". This is acceptable because this use of the environment is part of the semantics of the trait itself, rather than leaking an implementation detail of some particular class that implements the service trait:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stream._\\nimport java.net.URI\\nimport java.nio.charset.StandardCharsets\\n\\ntype HttpApp = ZIO[HttpRequest, Throwable, HttpResponse]\\ntype HttpRoute = Map[String, HttpApp]\\n\\ncase class HttpRequest(method: Int,\\n                       uri: URI,\\n                       headers: Map[String, String],\\n                       body: UStream[Byte])\\n\\ncase class HttpResponse(status: Int,\\n                        headers: Map[String, String],\\n                        body: UStream[Byte])\\n\\nobject HttpResponse {\\n  def apply(status: Int, message: String): HttpResponse =\\n    HttpResponse(\\n      status = status,\\n      headers = Map.empty,\\n      body = ZStream.fromChunk(\\n        Chunk.fromArray(message.getBytes(StandardCharsets.UTF_8))\\n      )\\n    )\\n\\n  def ok(msg: String): HttpResponse = HttpResponse(200, msg)\\n\\n  def error(msg: String): HttpResponse = HttpResponse(800, msg)\\n}\\n\\ntrait HttpServer {\\n  def serve(map: HttpRoute, host: String, port: Int): ZIO[Any, Throwable, Unit]\\n}\\n\\nobject HttpServer {\\n  def serve(map: HttpRoute, host: String, port: Int): ZIO[HttpServer, Throwable, Unit] =\\n    ZIO.serviceWithZIO(_.serve(map, host, port))\\n}\\n\\ncase class HttpServerLive() extends HttpServer {\\n  override def serve(map: HttpRoute, host: String, port: Int): ZIO[Any, Throwable, Unit] = ???\\n}\\n\\nobject HttpServerLive {\\n  val layer: URLayer[Any, HttpServer] = ZLayer.succeed(HttpServerLive())\\n}\\n\\nobject MainWebApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[HttpServer, Throwable, Unit] = for {\\n    _ <- ZIO.unit\\n    healthcheck: HttpApp = ZIO.service[HttpRequest].map { _ =>\\n      HttpResponse.ok(\\\"up\\\")\\n    }\\n\\n    pingpong = ZIO.service[HttpRequest].flatMap { req =>\\n      ZIO.ifZIO(\\n        req.body.via(ZPipeline.utf8Decode).runHead.map(_.contains(\\\"ping\\\"))\\n      )(\\n        onTrue = ZIO.attempt(HttpResponse.ok(\\\"pong\\\")),\\n        onFalse = ZIO.attempt(HttpResponse.error(\\\"bad request\\\"))\\n      )\\n    }\\n\\n    map = Map(\\n      \\\"/healthcheck\\\" -> healthcheck,\\n      \\\"/pingpong\\\" -> pingpong\\n    )\\n    _ <- HttpServer.serve(map, \\\"localhost\\\", 8080)\\n  } yield ()\\n\\n  def run = myApp.provideLayer(HttpServerLive.layer)\\n\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In a database application, a service may be defined only to operate in the context of a larger database transaction. In such a case, the transaction could be stored in the environment: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZIO[DatabaseTransaction, ...]\"), \". As in the previous example, because this is part of the semantics of the trait itself (whose functionality all operates within a transaction), this is not leaking implementation details, and therefore it is valid:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait DatabaseTransaction {\\n  def get(key: String): Task[Int]\\n  def put(key: String, value: Int): Task[Unit]\\n}\\n\\nobject DatabaseTransaction {\\n  def get(key: String): ZIO[DatabaseTransaction, Throwable, Int] =\\n    ZIO.serviceWithZIO(_.get(key))\\n\\n  def put(key: String, value: Int): ZIO[DatabaseTransaction, Throwable, Unit] =\\n    ZIO.serviceWithZIO(_.put(key, value))\\n}\\n\\ntrait Database {\\n  def atomically[E, A](zio: ZIO[DatabaseTransaction, E, A]): ZIO[Any, E, A]\\n}\\n\\nobject Database {\\n  def atomically[E, A](zio: ZIO[DatabaseTransaction, E, A]): ZIO[Database, E, A] =\\n    ZIO.serviceWithZIO(_.atomically(zio))\\n}\\n\\ncase class DatabaseLive() extends Database {\\n  override def atomically[E, A](zio: ZIO[DatabaseTransaction, E, A]): ZIO[Any, E, A] = ???\\n}\\n\\nobject DatabaseLive {\\n  val layer = ZLayer.succeed(DatabaseLive())\\n}\\n\\nobject MainDatabaseApp extends ZIOAppDefault {\\n  val myApp: ZIO[Database, Throwable, Unit] =\\n    for {\\n      _ <- Database.atomically(DatabaseTransaction.put(\\\"counter\\\", 0))\\n      _ <- ZIO.foreachPar(List(1 to 10)) { _ =>\\n        Database.atomically(\\n          for {\\n            value <- DatabaseTransaction.get(\\\"counter\\\")\\n            _ <- DatabaseTransaction.put(\\\"counter\\\", value + 1)\\n          } yield ()\\n        )\\n      }\\n    } yield ()\\n\\n  def run = myApp.provideLayer(DatabaseLive.layer)\\n\\n}\\n\")), mdx(\"p\", null, \"So while it's better to err on the side of \\\"don't put things into the environment of service interface\\\", there are cases where it's acceptable.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/contextual/index.md"}},"staticQueryHashes":[]}