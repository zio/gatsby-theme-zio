{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/contextual/zlayer","result":{"data":{"mdx":{"id":"136d1b6f-e3d4-5d88-9816-53b3c2d52d03","slug":"datatypes/contextual/zlayer","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zlayer\",\n  \"title\": \"ZLayer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[-RIn, +E, +ROut]\"), \" describes a layer of an application: every layer in an application requires some services as input \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIn\"), \" and produces some services as the output \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ROut\"), \".\"), mdx(\"p\", null, \"We can think of a layer as mental model of an asynchronous function from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIn\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either[E, ROut]\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"type ZLayer[-RIn, +E, +ROut] = RIn => async Either[E, ROut]\\n\")), mdx(\"p\", null, \"For example, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[Clock & Logging, Throwable, Database]\"), \" can be thought of as a function that map \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" services into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"(Clock, Logging) => Database\\n\")), mdx(\"p\", null, \"So we can say that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" service has two dependencies: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" services.\"), mdx(\"p\", null, \"In some cases, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" may not have any dependencies or requirements from the environment. In this case, we can specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIn\"), \" type parameter. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"layer.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Layer\")), \" type alias provided by ZIO is a convenient way to define a layer without requirements.\"), mdx(\"p\", null, \"ZLayers are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Recipes for Creating Services\"), \" \\u2014 They describe how to create services from given dependencies. For example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[Logging & Database, Throwable, UserRepo]\"), \" is a recipe for building a service that requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" service, and it produces a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" service.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"An Alternative to Constructors\"), \" \\u2014 We can think of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" as a more powerful version of a constructor, it is an alternative way to represent a constructor. Like a constructor, it allows us to build the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ROut\"), \" service in terms of its dependencies (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIn\"), \").\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Composable\"), \" \\u2014 Because of their excellent \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"composition properties\"), \", layers are the idiomatic way in ZIO to create services that depend on other services. We can define layers that are relying on each other.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Effectful and Resourceful\"), \" \\u2014 The construction of ZIO layers can be effectful and resourceful. They can be acquired effectfully and safely released when the services are done being utilized or even in case of failure, interruption, or defects in the application. \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, to create a recipe for a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" service, we should describe how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" will be initialized using an acquisition action. In addition, it may contain information about how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \" releases its connection pools.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Asynchronous\"), \" \\u2014 Unlike class constructors which are blocking, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" is fully asynchronous and non-blocking. Note that in non-blocking applications we typically want to avoid creating something that is blocking inside its constructor.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, when we are constructing some sort of Kafka streaming service, we might want to connect to the Kafka cluster in the constructor of our service, which takes some time. So it wouldn't be a good idea to block inside the constructor. There are some workarounds for fixing this issue, but they are not as perfect as the ZIO solution which allows for asynchronous, non-blocking constructors.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parallelism\"), \" \\u2014 ZIO layers can be acquired in parallel, unlike class constructors, which do not support parallelism. When we compose multiple layers and then acquire them, the construction of each layer will occur in parallel. This will reduce the initialization time of ZIO applications with a large number of dependencies.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With ZIO ZLayer, our constructor could be asynchronous, but it could also block. We can acquire resources asynchronously or in a blocking fashion, and spend some time doing that, and we don't need to worry about it. That is not an anti-pattern. This is the best practice with ZIO. And that is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" has the full power of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type, and as a result, we have strictly more power on our constructors with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Resilient\"), \" \\u2014 Layer construction can be resilient. So if the acquiring phase fails, we can have a schedule to retry the acquiring stage. This helps us write apps that are error-proof and respond appropriately to failures.\"))), mdx(\"p\", null, \"Let's see how we can create a layer:\"), mdx(\"h2\", null, \"Creation\"), mdx(\"p\", null, \"There are four main ways to create a ZLayer:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.succeed\"), \" for creating layers from simple values.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.scoped\"), \" for creating layers with \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"for comprehension\"), \" style from resourceful effects.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.apply\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.fromZIO\"), \" for creating layers with \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"for comprehension\"), \" style from effectual but not resourceful effects.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.fromFunction\"), \" for creating layers that are neither effectual nor resourceful.\")), mdx(\"p\", null, \"Now let's look at each of these methods.\"), mdx(\"h3\", null, \"From a Simple Value or an Existing Service\"), mdx(\"p\", null, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.succeed\"), \" we can construct a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" from a value. It returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ULayer[A]\"), \" value, which represents a layer of an application that has a service of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def succeed[A: Tag](a: A): ULayer[A]\\n\")), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.succeed\"), \" we can create a layer containing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"simple value\"), \" or a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"service\"), \":\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To create a layer from a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"simple value\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(host: String, port: Int)\\n\\nval configLayer: ULayer[AppConfig] = ZLayer.succeed(AppConfig(\\\"localhost\\\", 8080))\\n\")), mdx(\"p\", null, \"In the example above, we created a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"configLayer\"), \" that provides us an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppConfig\"), \".\"), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To create a layer from an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"existing service\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Logging {\\n  def log(line: String): UIO[Unit]\\n}\\n\\nobject Logging {\\n  val layer: ZLayer[Any, Nothing, Logging] = \\n    ZLayer.succeed( \\n      new Logging {\\n        override def log(line: String): UIO[Unit] =\\n          ZIO.succeed(println(line))\\n      }\\n    )\\n}\\n\")), mdx(\"h3\", null, \"From Resourceful Effects (Scoped Resources)\"), mdx(\"p\", null, \"Some components of our applications need to be scoped, meaning they undergo a resource acquisition phase before usage, and a resource release phase after usage (e.g. when the application shuts down). As we stated before, the construction of ZIO layers can be effectful and resourceful, this means they can be acquired and safely released when the services are done being utilized.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" relies on the powerful \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scope\"), \" data type and this makes this process extremely simple. We can lift any scoped \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" by providing a scoped resource to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.apply\"), \" constructor:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport scala.io.BufferedSource\\n\\nval fileLayer: ZLayer[Any, Throwable, BufferedSource] =\\n  ZLayer.scoped {\\n    ZIO.fromAutoCloseable(\\n      ZIO.attempt(scala.io.Source.fromFile(\\\"file.txt\\\"))\\n    )\\n  }\\n\")), mdx(\"p\", null, \"Let's see a real-world example of creating a layer from scoped resources. Assume we have the following \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepository\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport scala.io.Source._\\nimport java.io.{FileInputStream, FileOutputStream, Closeable}\\n\\ntrait DBConfig\\ntrait Transactor\\ntrait User\\n\\ndef dbConfig: Task[DBConfig] = ZIO.attempt(???)\\ndef initializeDb(config: DBConfig): Task[Unit] = ZIO.attempt(???)\\ndef makeTransactor(config: DBConfig): ZIO[Scope, Throwable, Transactor] = ZIO.attempt(???)\\n\\ntrait UserRepository {\\n  def save(user: User): Task[Unit]\\n}\\n\\ncase class UserRepositoryLive(xa: Transactor) extends UserRepository {\\n  override def save(user: User): Task[Unit] = ZIO.attempt(???)\\n}\\n\")), mdx(\"p\", null, \"Assume we have written a scoped \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepository\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def scoped: ZIO[Scope, Throwable, UserRepository] = \\n  for {\\n    cfg <- dbConfig\\n    _   <- initializeDb(cfg)\\n    xa  <- makeTransactor(cfg)\\n  } yield new UserRepositoryLive(xa)\\n\")), mdx(\"p\", null, \"We can convert that to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.apply\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val usersLayer : ZLayer[Any, Throwable, UserRepository] =\\n  ZLayer.scoped(scoped)\\n// usersLayer: ZLayer[Any, Throwable, UserRepository] = Suspend(\\n//   self = zio.ZLayer$$$Lambda$15790/0x000000080370ac40@648b57db\\n// )\\n\")), mdx(\"h3\", null, \"From Non-resourceful Effects\"), mdx(\"p\", null, \"We can create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" from any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.fromZIO\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.apply\"), \" constructor.\"), mdx(\"p\", null, \"For example, assume we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect that reads the application config from a file, we can create a layer from that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(poolSize: Int)\\n  \\ndef loadConfig : Task[AppConfig] = \\n  ZIO.attempt(???)\\n\\nobject AppConfig {\\n  val layer: TaskLayer[AppConfig] = \\n    ZLayer(loadConfig)  // or ZLayer.fromZIO(loadConfig)\\n}\\n\")), mdx(\"p\", null, \"This is the for-comprehension way of creating a ZIO service using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.apply\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait A\\ntrait B\\ntrait C\\ncase class CLive(a: A, b: B) extends C\\n\\nobject CLive {\\n  val layer: ZLayer[A & B, Nothing, C] =\\n    ZLayer {\\n      for {\\n        a <- ZIO.service[A]\\n        b <- ZIO.service[B]\\n      } yield CLive(a, b)\\n    }\\n}\\n\")), mdx(\"h3\", null, \"From Functions\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[R, E, A]\"), \" can be thought of as a function from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \". So we can convert functions to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.fromFunction\"), \" constructor.\"), mdx(\"p\", null, \"In the following example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLive\"), \" implementation requires two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" services, and we can easily convert that case class to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait A\\ntrait B\\ntrait C\\ncase class CLive(a: A, b: B) extends C\\n\\nobject CLive {\\n  val layer: ZLayer[A & B, Nothing, C] = \\n    ZLayer.fromFunction(CLive.apply _)\\n}\\n\")), mdx(\"p\", null, \"Below is a complete working example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  final case class DatabaseConfig()\\n\\n  object DatabaseConfig {\\n    val live = ZLayer.succeed(DatabaseConfig())\\n  }\\n\\n  final case class Database(databaseConfig: DatabaseConfig)\\n\\n  object Database {\\n    val live: ZLayer[DatabaseConfig, Nothing, Database] =\\n      ZLayer.fromFunction(Database.apply _)\\n  }\\n\\n  final case class Analytics()\\n\\n  object Analytics {\\n    val live: ULayer[Analytics] = ZLayer.succeed(Analytics())\\n  }\\n\\n  final case class Users(database: Database, analytics: Analytics)\\n\\n  object Users {\\n    val live = ZLayer.fromFunction(Users.apply _)\\n  }\\n\\n  final case class App(users: Users, analytics: Analytics) {\\n    def execute: UIO[Unit] =\\n      ZIO.debug(s\\\"This app is made from ${users} and ${analytics}\\\")\\n  }\\n\\n  object App {\\n    val live = ZLayer.fromFunction(App.apply _)\\n  }\\n\\n  def run =\\n    ZIO\\n      .serviceWithZIO[App](_.execute)\\n      // Cannot use `provide` due to this dotty bug: https://github.com/lampepfl/dotty/issues/12498\\n      .provideLayer(\\n        (((DatabaseConfig.live >>> Database.live) ++ Analytics.live >>> Users.live) ++ Analytics.live) >>> App.live\\n      )\\n}\\n\")), mdx(\"h2\", null, \"Building Dependency Graph\"), mdx(\"p\", null, \"We have two options to build a dependency graph:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Manual layer construction\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Automatic layer construction\")), mdx(\"p\", null, \"The first method uses ZIO's composition operators such as horizontal (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"++\"), \") and vertical (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">>>\"), \") compositions. The second one uses macro and automatically creates the dependency graph at compile time.\"), mdx(\"h2\", null, \"Manual Layer Construction\"), mdx(\"p\", null, \"We said that we can think of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" as a more powerful \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"constructor\"), \". Constructors are not composable, because they are not values. While a constructor is not composable, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" has a nice facility to compose with other \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \"s. So we can say that a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" turns a constructor into values.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \":\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In a regular ZIO application we are not required to build the dependency graph through composing layers tougher. Instead, we can provide all dependencies to the ZIO application using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \", and the ZIO will create the dependency graph manually under the hood. Therefore, use manual layer composition if you know what you're doing.\")), mdx(\"h3\", null, \"Vertical and Horizontal Composition\"), mdx(\"p\", null, \"Assume we have several services with their dependencies, and we need a way to compose and wire up these dependencies to create the dependency graph of our application. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" is a ZIO solution for this problem, it allows us to build up the whole application dependency graph by composing layers horizontally and vertically.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Horizontal Composition\"), \" \\u2014 Layers can be composed together horizontally with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"++\"), \" operator. When we compose layers horizontally, the new layer requires all the services that both of them require and produces all services that both of them produce. Horizontal composition is a way of composing two layers side-by-side. It is useful when we combine two layers that don't have any relationship with each other.\")), mdx(\"p\", null, \"We can compose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fooLayer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"barLayer\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"horizontally\"), \" to build a layer that has the requirements of both, to provide the capabilities of both, through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fooLayer ++ barLayer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Throwable, B] = ???        // A ==> B        // A ==> B\\nval barLayer: ZLayer[C, Nothing  , D] = ???        // C ==> D        // C ==> D\\n\\nval horizontal: ZLayer[A & C, Throwable, B & D] =  // A & C ==> B & D\\n  fooLayer ++ barLayer\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertical Composition\"), \" \\u2014 We can also compose layers \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertically\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">>>\"), \" operator, meaning the output of one layer is used as input for the subsequent layer, resulting in one layer with the requirement of the first, and the output of the second.  \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example if we have a layer that requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" and produces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \", we can compose this with another layer that requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" and produces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \"; this composition produces a layer that requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" and produces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \". The feed operator, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">>>\"), \", stack them on top of each other by using vertical composition. This sort of composition is like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"function composition\"), \", feeding an output of one layer to an input of another:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Throwable, B] = ???  // A ==> B  // A ==> B\\nval barLayer: ZLayer[B, Nothing  , C] = ???  // B ==> C  // B ==> C\\n\\nval horizontal: ZLayer[A, Throwable, C] =    // A ==> C\\n  fooLayer >>> barLayer\\n\")), mdx(\"h3\", null, \"Hidden Versus Passed-through Dependencies\"), mdx(\"p\", null, \"ZLayer has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"passthrough\"), \" operator which returns a new layer that produces the outputs of this layer but also passes-through the inputs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Nothing, B] = ???  // A ==> B  // A ==> B\\n\\nval result1 : ZLayer[A, Nothing, A & B] =  // A ==> A & B\\n  fooLayer.passthrough\\n  \\nval result2 : ZLayer[A, Nothing, A & B] =  // A ==> A & B\\n  ZLayer.service[A] ++ fooLayer\\n\")), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" hides intermediate dependencies when composing vertically. For example, when we compose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fooLayer\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"barLayer\"), \" vertically, the output would be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer[A, Throwable, C]\"), \". This hides the dependency on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" layer. By using the above technique, we can pass through hidden dependencies.\"), mdx(\"p\", null, \"Let's include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" service into the upstream dependencies of the final layer using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.service[B]\"), \". We can think of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.service[B]\"), \" as an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"identity function\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B ==> B\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Throwable, B] = ???  // A  ==> B  // A  ==> B\\nval barLayer: ZLayer[B, Throwable, C] = ???  // B  ==> C  // B  ==> C\\n\\nval finalLayer: ZLayer[A & B, Throwable, C] = // A & B ==> C\\n  (fooLayer ++ ZLayer.service[B]) >>> barLayer\\n\")), mdx(\"p\", null, \"Or we may want to include the middle services in the output channel of the final layer, resulting in a new layer with the inputs of the first layer and the outputs of both layers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Throwable, B] = ??? // A  ==> B // A  ==> B\\nval barLayer: ZLayer[B, Throwable, C] = ??? // B  ==> C // B  ==> C\\n\\nval finalLayer: ZLayer[A, Throwable, B & C] = // A ==> B & C\\n  fooLayer >>> (ZLayer.service[B] ++ barLayer)\\n\")), mdx(\"p\", null, \"We can do the same with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">+>\"), \" operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A, Throwable, B] = ??? // A  ==> B // A  ==> B\\nval barLayer: ZLayer[B, Throwable, C] = ??? // B  ==> C // B  ==> C\\n\\nval finalLayer: ZLayer[A, Throwable, B & C] = // A ==> B & C\\n  fooLayer >+> barLayer\\n\")), mdx(\"p\", null, \"This technique is useful when we want to defer the creation of some intermediate services and require them as part of the input of the final layer. For example, assume we have these two layers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A    , Throwable, B] = ???   // A     ==> B   // A     ==> B\\nval barLayer: ZLayer[B & C, Throwable, D] = ???   // B & C ==> D   // B & C ==> D\\n\\nval finalLayer: ZLayer[A & B & C, Throwable, D] = // A & B & C ==> B & D\\n  fooLayer >>> barLayer\\n\")), mdx(\"p\", null, \"So we can defer the creation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \" layer using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.service[C]\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval fooLayer: ZLayer[A    , Throwable, B] = ??? // A ==> B  // A ==> B \\nval barLayer: ZLayer[B & C, Throwable, D] = ??? // B & C ==> D // B & C ==> D\\n\\nval layer: ZLayer[A & C, Throwable, D] =        // A & C ==> D\\n  (fooLayer ++ ZLayer.service[C]) >>> barLayer\\n\")), mdx(\"p\", null, \"Here is an example in which we passthrough all requirements to bake a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \" so all the requirements are available to all the downstream services: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Baker \\ntrait Ingredients\\ntrait Oven\\ntrait Dough\\ntrait Cake\\n\\nlazy val baker      : ZLayer[Any, Nothing, Baker] = ???\\nlazy val ingredients: ZLayer[Any, Nothing, Ingredients] = ???\\nlazy val oven       : ZLayer[Any, Nothing, Oven] = ???\\nlazy val dough      : ZLayer[Baker & Ingredients, Nothing, Dough] = ???\\nlazy val cake       : ZLayer[Baker & Oven & Dough, Nothing, Cake] = ???\\n\\nlazy val all: ZLayer[Any, Nothing, Baker & Ingredients & Oven & Dough & Cake] =\\n  baker >+>       // Baker\\n  ingredients >+> // Baker & Ingredients\\n  oven >+>        // Baker & Ingredients & Oven\\n  dough >+>       // Baker & Ingredients & Oven & Dough\\n  cake            // Baker & Ingredients & Oven & Dough & Cake\\n\")), mdx(\"p\", null, \"This allows a style of composition where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">+>\"), \" operator is used to build a progressively larger set of services, with each new service able to depend on all the services before it. If we passthrough dependencies and later want to hide them we can do so through a simple type ascription:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"lazy val hidden: ZLayer[Any, Nothing, Cake] = all\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" makes it easy to mix and match these styles. If we build our dependency graph more explicitly, we can be confident that dependencies used in multiple parts of the dependency graph will only be created once due to memoization and sharing.\"), mdx(\"p\", null, \"Using these simple operators we can build complex dependency graphs.\"), mdx(\"h3\", null, \"Updating Local Dependencies\"), mdx(\"p\", null, \"Given a layer, it is possible to update one or more components it provides. We update a dependency in two ways:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"update\"), \" Method\"), \" \\u2014 This method allows us to replace one requirement with a different implementation:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval origin: ZLayer[Any, Nothing, String & Int & Double] = \\n  ZLayer.succeedEnvironment(ZEnvironment[String, Int, Double](\\\"foo\\\", 123, 1.3))\\n\\nval updated1 = origin.update[String](_ + \\\"bar\\\")\\nval updated2 = origin.update[Int](_ + 5)\\nval updated3 = origin.update[Double](_ - 0.3)\\n\")), mdx(\"p\", null, \"Here is an example of updating a config layer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\ncase class AppConfig(poolSize: Int)\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[AppConfig, IOException, Unit] =\\n    for {\\n      config <- ZIO.service[AppConfig]\\n      _ <- Console.printLine(s\\\"Application config after the update operation: $config\\\")\\n    } yield ()\\n\\n\\n  val appLayers: ZLayer[Any, Nothing, AppConfig] =\\n    ZLayer(ZIO.succeed(AppConfig(5)).debug(\\\"Application config initialized\\\"))\\n\\n  val updatedConfig: ZLayer[Any, Nothing, AppConfig] =\\n    appLayers.update[AppConfig](c =>\\n      c.copy(poolSize = c.poolSize + 10)\\n    )\\n\\n  def run = myApp.provide(updatedConfig)\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Using Horizontal Composition\"), \" \\u2014 Another way to update a requirement is to horizontally compose in a layer that provides the updated service. The resulting composition will replace the old layer with the new one:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval origin: ZLayer[Any, Nothing, String & Int & Double] =\\n  ZLayer.succeedEnvironment(ZEnvironment[String, Int, Double](\\\"foo\\\", 123, 1.3))\\n\\nval updated = origin ++ ZLayer.succeed(321)\\n\")), mdx(\"p\", null, \"Let's see an example of updating a config layer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\ncase class AppConfig(poolSize: Int)\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[AppConfig, IOException, Unit] =\\n    for {\\n      config <- ZIO.service[AppConfig]\\n      _      <- Console.printLine(s\\\"Application config after the update operation: $config\\\")\\n    } yield ()\\n\\n\\n  val appLayers: ZLayer[Any, Nothing, AppConfig] =\\n    ZLayer(ZIO.succeed(AppConfig(5)).debug(\\\"Application config initialized\\\"))\\n\\n  val updatedConfig: ZLayer[Any, Nothing, AppConfig] =\\n    appLayers ++ ZLayer.succeed(AppConfig(8))\\n\\n  def run = myApp.provide(updatedConfig)\\n}\\n\")), mdx(\"h3\", null, \"Cyclic Dependencies\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" mechanism makes it impossible to build cyclic dependencies, making the initialization process very linear, by construction.\"), mdx(\"h2\", null, \"Automatic Layer Construction\"), mdx(\"p\", null, \"ZIO also has an automatic layer construction facility, which takes care of building dependency graphs from the individual layers and building blocks. So instead of manually composing layers together to build the final layer, we can only provide individual layers to the ZIO application, and it will do the rest.\"), mdx(\"p\", null, \"The automatic layer construction takes place at the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compile-time\"), \", so if there is a problem in providing a layer, we will receive an error or warning message. So it helps us to diagnose the problem. Additionally, it has a way to print the dependency graph using built-in debug layers.\"), mdx(\"h3\", null, \"Providing Individual Layers to a ZIO Application\"), mdx(\"p\", null, \"When we provide individual layers using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideCustom\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideSome\"), \" to a ZIO application, the compiler will create the dependency graph automatically from the provided layers:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#dependency-propagation\"\n  }, \"separate section\"), \" that describes different methods for providing layers to the ZIO application.\")), mdx(\"p\", null, \"Assume we have written the following services (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chocolate\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flour\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Spoon\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Cake\\n\\nobject Cake {\\n  val live: ZLayer[Chocolate & Flour, Nothing, Cake] =\\n    for {\\n      _ <- ZLayer.environment[Chocolate & Flour]\\n      cake <- ZLayer.succeed(new Cake {})\\n    } yield cake\\n}\\n\\ntrait Spoon\\n\\nobject Spoon {\\n  val live: ULayer[Spoon] =\\n    ZLayer.succeed(new Spoon {})\\n}\\n\\ntrait Chocolate\\n\\nobject Chocolate {\\n  val live: ZLayer[Spoon, Nothing, Chocolate] =\\n    ZLayer.service[Spoon].project(_ => new Chocolate {})\\n}\\n\\ntrait Flour\\n\\nobject Flour {\\n  val live: ZLayer[Spoon, Nothing, Flour] =\\n    ZLayer.service[Spoon].project(_ => new Flour {})\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \" service has the following dependency graph:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"          Cake\\n          /   \\\\\\n   Chocolate   Flour\\n       |         |\\n     Spoon     Spoon\\n\")), mdx(\"p\", null, \"Now we can write an application that uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \" service as below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\nval myApp: ZIO[Cake, IOException, Unit] = for {\\n  cake <- ZIO.service[Cake]\\n  _    <- Console.printLine(s\\\"Yay! I baked a cake with flour and chocolate: $cake\\\")\\n} yield ()\\n\")), mdx(\"p\", null, \"The type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp\"), \" indicates we should provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \" to this ZIO application to run it. Let's give it that and see what happens:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object MainApp extends ZIOAppDefault {\\n  def run =\\n    myApp.provide(Cake.live)\\n}\\n\\n// error:\\n// \\n// \\u2500\\u2500\\u2500\\u2500 ZLAYER ERROR \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n// \\n//  Please provide layers for the following 2 types:\\n// \\n//    Required by Cake.live\\n//    1. Chocolate\\n//    2. Flour\\n//    \\n// \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\")), mdx(\"p\", null, \"Here are the errors that will be printed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\u2500\\u2500\\u2500\\u2500 ZLAYER ERROR \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n Please provide layers for the following 2 types:\\n\\n   Required by Cake.live\\n   1. Chocolate\\n   2. Flour\\n   \\n\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\")), mdx(\"p\", null, \"It says that we missed providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chocolate\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flour\"), \" layers. Now let's add these two missing layers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run =\\n    myApp.provide(\\n      Cake.live,\\n      Chocolate.live,\\n      Flour.live\\n    )\\n}\\n\\n// error:\\n// \\n// \\u2500\\u2500\\u2500\\u2500 ZLAYER ERROR \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n// \\n// Please provide a layer for the following type:\\n// \\n// Required by Flour.live\\n// 1. Spoon\\n// \\n// Required by Chocolate.live\\n// 1. Spoon\\n// \\n// \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\")), mdx(\"p\", null, \"Again, the compiler asks us to provide another dependency called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Spoon\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\u2500\\u2500\\u2500\\u2500 ZLAYER ERROR \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\nPlease provide a layer for the following type:\\n\\nRequired by Flour.live\\n1. Spoon\\n\\nRequired by Chocolate.live\\n1. Spoon\\n\\n\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\")), mdx(\"p\", null, \"Finally, our application compiles without any errors: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run =\\n    myApp.provide(\\n      Cake.live,\\n      Chocolate.live,\\n      Flour.live,\\n      Spoon.live  \\n    )\\n}\\n\")), mdx(\"p\", null, \"Note that the order of dependencies doesn't matter. We can provide them in any order.\"), mdx(\"p\", null, \"Now, let's compare the automatic layer construction with the manual one:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val layers: ULayer[Cake] =\\n      (((Spoon.live >>> Chocolate.live) ++ (Spoon.live >>> Flour.live)) >>> Cake.live)\\n\\n  def run = myApp.provideLayer(layers)\\n\\n}\\n\")), mdx(\"h3\", null, \"Automatically Assembling Layers\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZLayer.make\", \"[R]\"), \" \\u2014 Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZLayer.make[R]\"), \", we can provide a type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \" and then provide individual layers as arguments, it will automatically assemble these layers to create a layer of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \".\")), mdx(\"p\", null, \"For example, we can create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cake\"), \" layer as below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval cakeLayer: ZLayer[Any, Nothing, Cake] =\\n  ZLayer.make[Cake](\\n    Cake.live,\\n    Chocolate.live,\\n    Flour.live,\\n    Spoon.live\\n  )\\n\")), mdx(\"p\", null, \"We can also create a layer for intersections of services:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval chocolateAndFlourLayer: ZLayer[Any, Nothing, Chocolate & Flour] =\\n  ZLayer.make[Chocolate & Flour](\\n    Chocolate.live,\\n    Flour.live,\\n    Spoon.live\\n  )\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZLayer.makeSome\", \"[R0, R]\"), \" \\u2014 Automatically constructs a layer for the provided type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \", leaving a remainder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R0\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval cakeLayer: ZLayer[Spoon, Nothing, Cake] =\\n  ZLayer.makeSome[Spoon, Cake](\\n    Cake.live,\\n    Chocolate.live,\\n    Flour.live\\n  )\\n\")), mdx(\"h3\", null, \"ZLayer Debugging\"), mdx(\"p\", null, \"To debug ZLayer construction, we have two built-in layers, i.e., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.Debug.tree\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.Debug.mermaid\"), \". \"), mdx(\"p\", null, \"Let's include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.Debug.tree\"), \" layer into the layer construction:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run =\\n    myApp.provide(\\n      Cake.live,\\n      Chocolate.live,\\n      Flour.live,\\n      Spoon.live,\\n      ZLayer.Debug.tree\\n    )\\n}\\n\")), mdx(\"p\", null, \"The following debug messages will be generated by the compiler:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[info]   ZLayer Wiring Graph\\n[info]\\n[info] \\u25C9 Cake.live\\n[info] \\u251C\\u2500\\u25D1 Chocolate.live\\n[info] \\u2502 \\u2570\\u2500\\u25D1 Spoon.live\\n[info] \\u2570\\u2500\\u25D1 Flour.live\\n[info]   \\u2570\\u2500\\u25D1 Spoon.live\\n[info] \\n\")), mdx(\"p\", null, \"If we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.Debug.mermaid\"), \" layer, it will generate the following debug messages:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[info]   ZLayer Wiring Graph  \\n[info] \\n[info] \\u25C9 Cake.live\\n[info] \\u251C\\u2500\\u25D1 Chocolate.live\\n[info] \\u2502 \\u2570\\u2500\\u25D1 Spoon.live\\n[info] \\u2570\\u2500\\u25D1 Flour.live\\n[info]   \\u2570\\u2500\\u25D1 Spoon.live\\n[info] \\n[info] Mermaid Live Editor Link\\n[info] https://mermaid-js.github.io/mermaid-live-editor/edit/#eyJjb2RlIjoiZ3JhcGhcbiAgICBDb25zb2xlLmxpdmVcbiAgICBDYWtlLmxpdmUgLS0+IENob2NvbGF0ZS5saXZlXG4gICAgQ2FrZS5saXZlIC0tPiBGbG91ci5saXZlXG4gICAgRmxvdXIubGl2ZSAtLT4gU3Bvb24ubGl2ZVxuICAgIFNwb29uLmxpdmVcbiAgICBDaG9jb2xhdGUubGl2ZSAtLT4gU3Bvb24ubGl2ZVxuICAgICIsIm1lcm1haWQiOiAie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwgInVwZGF0ZUVkaXRvciI6IHRydWUsICJhdXRvU3luYyI6IHRydWUsICJ1cGRhdGVEaWFncmFtIjogdHJ1ZX0=\\n\")), mdx(\"h2\", null, \"Dependency Propagation\"), mdx(\"p\", null, \"When we write an application, our application has a lot of dependencies. We need a way to provide implementations and to feed and propagate all dependencies throughout the whole application. We can solve the propagation problem by using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO environment\"), \".\"), mdx(\"p\", null, \"During the development of an application, we don't care about implementations. Incrementally, when we use various effects with different requirements on their environment, all parts of our application compose together, and at the end of the day we have a ZIO effect which requires some services as an environment. Before running this effect by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unsafeRun\"), \" we should provide an implementation of these services into the ZIO Environment of that effect.\"), mdx(\"p\", null, \"ZIO has some facilities for doing this. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \" is the core function that allows us to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"feed\"), \" an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" to an effect that requires an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \".\"), mdx(\"p\", null, \"Notice that the act of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provide\"), \"ing an effect with its environment, eliminates the environment dependency in the resulting effect type, represented by type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" of the resulting environment.\"), mdx(\"h4\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"ZIO#provideEnvironment\"), \" Method\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideEnvironment\"), \" takes an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment[R]\"), \" and provides it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect which eliminates its dependency on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait ZIO[-R, +E, +A] {\\n  def provideEnvironment(r: => ZEnvironment[R]): IO[E, A]\\n}\\n\")), mdx(\"p\", null, \"This is similar to dependency injection, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provide*\"), \" function can be thought of as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inject\"), \".\"), mdx(\"p\", null, \"Assume we have the following services:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait Logging {\\n  def log(str: String): UIO[Unit]\\n}\\n\\nobject Logging {\\n  def log(line: String) = ZIO.serviceWithZIO[Logging](_.log(line))\\n}\\n\")), mdx(\"p\", null, \"Let's write a simple program using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val app: ZIO[Logging, Nothing, Unit] = Logging.log(\\\"Application Started!\\\")\\n\")), mdx(\"p\", null, \"We can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provide\"), \" implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Logging\"), \" service into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \" effect:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val loggingImpl = new Logging {\\n  override def log(line: String): UIO[Unit] =\\n    ZIO.succeed(println(line))\\n}\\n\\nval effect = app.provideEnvironment(ZEnvironment(loggingImpl))\\n\")), mdx(\"p\", null, \"Most of the time, we don't use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideEnvironment\"), \" directly to provide our services; instead, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" to construct the dependency graph of our application, then we use methods like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideSome\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideCustom\"), \" to propagate dependencies into the environment of our ZIO effect.\"), mdx(\"h4\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"ZIO#provide\"), \" Method\"), mdx(\"p\", null, \"Unlike the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideEnvironment\"), \" which takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZEnvironment[R]\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \" takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" to the ZIO effect and translates it to another level.\"), mdx(\"p\", null, \"Assume we have written this piece of program that requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" services:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.Clock._\\nimport zio.Console._\\nimport zio.Random._\\n\\nval myApp: ZIO[Any, Nothing, Unit] = for {\\n  random  <- nextInt \\n  _       <- printLine(s\\\"A random number: $random\\\").orDie\\n  current <- currentDateTime\\n  _       <- printLine(s\\\"Current Data Time: $current\\\").orDie\\n} yield ()\\n\")), mdx(\"p\", null, \"We provide implementations of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Random\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clock\"), \" services to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp\"), \" effect by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val mainEffect: ZIO[Any, Nothing, Unit] = \\n  myApp\\n\")), mdx(\"p\", null, \"As we see, the type of our effect converted from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[Random & Console & Clock, Nothing, Unit]\"), \" which requires three services to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[Any, Nothing, Unit]\"), \" effect which doesn't require any services.\"), mdx(\"h4\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"ZIO#provideSome\"), \" Method\"), mdx(\"p\", null, \"Sometimes we have written a program, and we don't want to provide all its requirements. In these cases, we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideSome\"), \" to partially apply some layers to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect.\"), mdx(\"p\", null, \"In the previous example, if we just want to provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \", we should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideSome\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val mainEffectSome: ZIO[Any, Nothing, Unit] = \\n  myApp\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provideSome[R0]\"), \", we should provide the remaining type as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R0\"), \" type parameter. This workaround helps the compiler to infer the proper types.\")), mdx(\"h2\", null, \"Environment Scope\"), mdx(\"p\", null, \"We can create a ZIO application by providing a local or a global environment, or a combination:\"), mdx(\"h3\", null, \"Global Environment\"), mdx(\"p\", null, \"It is usual when writing ZIO applications to provide layers at the end of the world. Then we provide layers to the whole ZIO application all at once. This pattern uses a single global environment for all ZIO applications:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  val myApp: ZIO[ServiceA & ServiceB & ServiceC & ServiceD, Throwable, Unit] = ???\\n    \\n  def run = myApp.provide(a, b, c, d)\\n}\\n\")), mdx(\"h3\", null, \"Local Environment\"), mdx(\"p\", null, \"Occasionally, we may need to provide different environments for different parts of our application, or it may be necessary to provide a single global environment for the entire application except for some inner layers. \"), mdx(\"p\", null, \"Providing a layer locally is analogous to overriding a method in an object-oriented paradigm. So we can think of that as overriding the global environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def myApp: ZIO[A & B & C, Throwable, Unit] = {\\n    def innerApp1: ZIO[A & B & C, Throwable, Unit] = ???\\n    def innerApp2: ZIO[A & C,     Throwable, Unit] = ???\\n\\n    innerApp1.provideSomeLayer[A & B](localC) *> innerApp2\\n  }\\n\\n  def run = myApp.provide(globalA, globalB, globalC)\\n}\\n\")), mdx(\"p\", null, \"ZIO Test's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../test/environment/live.md\"\n  }, \"Live service\"), \" uses this pattern to provide real environment to a single part of an effect.\"), mdx(\"h2\", null, \"Layer Memoization\"), mdx(\"p\", null, \"Layer memoization allows a layer to be created once and used multiple times in the dependency graph. So if we use the same layer twice, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(a >>> b) ++ (a >>> c)\"), \", then the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" layer will be allocated only once.\"), mdx(\"h3\", null, \"Layers are Memoized by Default when Providing Globally\"), mdx(\"p\", null, \"One important feature of a ZIO application is that layers are shared by default, meaning that if the same layer is used twice, and if we provide the layer \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#global-environment\"\n  }, \"globally\"), \" the layer will only be allocated a single time. For every layer in our dependency graph, there is only one instance of it that is shared between all the layers that depend on it.\"), mdx(\"p\", null, \"For example, assume we have the three \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \" services. The implementation of both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \" are dependent on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait A\\ntrait B\\ntrait C\\n\\ncase class BLive(a: A) extends B\\ncase class CLive(a: A) extends C\\n\\nval a: ZLayer[Any, Nothing, A] =\\n  ZLayer(ZIO.succeed(new A {}).debug(\\\"initialized\\\"))\\n\\nval b: ZLayer[A, Nothing, B] =\\n  ZLayer {\\n    for {\\n      a <- ZIO.service[A]\\n    } yield BLive(a)\\n  }\\n\\nval c: ZLayer[A, Nothing, C] =\\n  ZLayer {\\n    for {\\n      a <- ZIO.service[A]\\n    } yield CLive(a)\\n  }\\n\")), mdx(\"p\", null, \"Although both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" layers require the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" layer, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" layer is instantiated only once. It is shared with both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[B & C, Nothing, Unit] =\\n    for {\\n      _ <- ZIO.service[B]\\n      _ <- ZIO.service[C]\\n    } yield ()\\n    \\n  // alternative: myApp.provideLayer((a >>> b) ++ (a >>> c))\\n  def run = myApp.provide(a, b, c) \\n}\\n\")), mdx(\"h4\", null, \"Acquiring a Fresh Version\"), mdx(\"p\", null, \"If we don't want to share a module, we should create a fresh, non-shared version of it through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#fresh\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[B & C, Nothing, Unit] =\\n    for {\\n      _ <- ZIO.service[B]\\n      _ <- ZIO.service[C]\\n    } yield ()\\n\\n  def run = myApp.provideLayer((a.fresh >>> b) ++ (a.fresh >>> c))\\n}\\n\")), mdx(\"h3\", null, \"Layers are not Memoized When Providing Locally\"), mdx(\"p\", null, \"If we don't provide a layer globally but instead provide them \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#local-environment\"\n  }, \"locally\"), \", that layer doesn't support memoization by default.\"), mdx(\"p\", null, \"In the following example, we provided the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" layer two times locally and the ZIO doesn't memoize the construction of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" layer. So, it will be initialized two times:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[Any, Nothing, Unit] =\\n    for {\\n      _ <- ZIO.service[A].provide(a) // providing locally\\n      _ <- ZIO.service[A].provide(a) // providing locally\\n    } yield ()\\n\\n  def run = myApp\\n}\\n\")), mdx(\"h4\", null, \"Manual Memoization\"), mdx(\"p\", null, \"We can memoize the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" layer manually using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#memoize\"), \" operator. It will return a scoped effect that, if evaluated, will return the lazily computed result of this layer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val myApp: ZIO[Any, Nothing, Unit] =\\n    ZIO.scoped {\\n      a.memoize.flatMap { aLayer =>\\n        for {\\n          _ <- ZIO.service[A].provide(aLayer)\\n          _ <- ZIO.service[A].provide(aLayer)\\n        } yield ()\\n      }\\n    }\\n    \\n  def run = myApp\\n}\\n\")), mdx(\"h2\", null, \"Other Operators\"), mdx(\"h3\", null, \"Converting a Layer to a Scoped Value\"), mdx(\"p\", null, \"Every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" can be converted to a scoped \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer.build\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Database {\\n  def close: UIO[Unit]\\n}\\n\\nobject Database {\\n  def connect: ZIO[Any, Throwable, Database] = ???\\n}\\n\\nval database: ZLayer[Any, Throwable, Database] =\\n  ZLayer.scoped {\\n    ZIO.acquireRelease {\\n      Database.connect.debug(\\\"connecting to the database\\\")\\n    } { database =>\\n      database.close\\n    }\\n  }\\n\\nval scopedDatabase: ZIO[Scope, Throwable, ZEnvironment[Database]] =\\n  database.build\\n\")), mdx(\"h3\", null, \"Falling Back to an Alternate Layer\"), mdx(\"p\", null, \"If a layer fails, we can provide an alternative layer by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#orElse\"), \" so it will fall back to the second layer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ntrait Database\\n\\nval postgresDatabaseLayer: ZLayer[Any, Throwable, Database] = ???\\nval inmemoryDatabaseLayer: ZLayer[Any, Throwable, Database] = ???\\n\\nval databaseLayer: ZLayer[Any, Throwable, Database] =\\n  postgresDatabaseLayer.orElse(inmemoryDatabaseLayer)\\n\")), mdx(\"h3\", null, \"Converting a Layer to a ZIO Application\"), mdx(\"p\", null, \"Sometimes our entire application is a ZIO Layer, e.g. an HTTP Server, so by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#launch\"), \" we can convert that to a ZIO application. This will build the layer and use it until it is interrupted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object MainApp extends ZIOAppDefault {\\n\\n  val httpServer: ZLayer[Any, Nothing, HttpServer] =\\n    ZLayer.make[HttpServer](\\n      JsonParserLive.layer,\\n      TemplateEngineLive.layer \\n    )\\n\\n  def run = httpServer.launch\\n\\n}\\n\")), mdx(\"h3\", null, \"Retrying\"), mdx(\"p\", null, \"We can retry constructing a layer in case of failure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval databaseLayer: ZLayer[Any, Throwable, DatabaseConnection]   = ???\\n\\nval retriedLayer : ZLayer[Clock, Throwable, DatabaseConnection] = databaseLayer.retry(Schedule.fibonacci(1.second))\\n\")), mdx(\"h3\", null, \"Layer Projection\"), mdx(\"p\", null, \"We can project out a part of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" by providing a projection function to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#project\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class Connection(host: String, port: Int)  \\ncase class Login(user: String, password: String)\\n\\ncase class DBConfig(\\n  connection: Connection, \\n  login: Login\\n)\\n\\nval connection: ZLayer[DBConfig, Nothing, Connection] = \\n  ZLayer.service[DBConfig].project(_.connection)\\n\")), mdx(\"h3\", null, \"Tapping\"), mdx(\"p\", null, \"We can perform a specified effect based on the success or failure result of the layer using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#tap\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#tapError\"), \". This would not change the layer's signature:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(host: String, port: Int)\\n\\nval config: ZLayer[Any, Throwable, AppConfig] =\\n  ZLayer.fromZIO(\\n    ZIO.attempt(???) // reading config from a file\\n  )\\n\\nval res: ZLayer[Any, Throwable, AppConfig] =\\n  config\\n    .tap(cnf => ZIO.debug(s\\\"layer acquisition succeeded with $cnf\\\"))\\n    .tapError(err => ZIO.debug(s\\\"error occurred during reading the config $err\\\"))\\n\")), mdx(\"h2\", null, \"Examples\"), mdx(\"h3\", null, \"An Example of a ZIO Application with a Simple Dependency\"), mdx(\"p\", null, \"This application demonstrates a ZIO program with a single dependency on a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppConfig\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class AppConfig(poolSize: Int)\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  // Define our simple ZIO program\\n  val zio: ZIO[AppConfig, Nothing, Unit] = \\n    for {\\n      config <- ZIO.service[AppConfig]\\n      _      <- ZIO.succeed(println(s\\\"Application started with config: $config\\\"))\\n    } yield ()\\n\\n  // Create a ZLayer that produces an AppConfig and can be used to satisfy the AppConfig \\n  // dependency that the program has\\n  val defaultConfig: ULayer[AppConfig] = ZLayer.succeed(AppConfig(10))\\n\\n  // Run the program, providing the `defaultConfig`\\n  def run = zio.provide(defaultConfig)\\n}\\n\")), mdx(\"h3\", null, \"An Example of a ZIO Application with Multiple Dependencies\"), mdx(\"p\", null, \"In the following example, our ZIO application has several dependencies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.Clock\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.Console\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"))), mdx(\"p\", null, \"And also the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" service depends upon the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nimport java.io.IOException\\n\\ntrait A {\\n  def letsGoA(v: Int): UIO[String]\\n}\\n\\nobject A {\\n  def letsGoA(v: Int): URIO[A, String] = ZIO.serviceWithZIO(_.letsGoA(v))\\n}\\n\\ncase class ALive() extends A {\\n  override def letsGoA(v: Int): UIO[String] = ZIO.succeed(s\\\"done: v = $v \\\")\\n}\\n\\nobject ALive {\\n  val layer: ULayer[A] = ZLayer.succeed(ALive())\\n}\\n\\ntrait B {\\n  def letsGoB(v: Int): UIO[String]\\n}\\n\\nobject B {\\n  def letsGoB(v: Int): URIO[B, String] = ZIO.serviceWithZIO(_.letsGoB(v))\\n}\\n\\ncase class BLive(serviceA: A) extends B {\\n  def letsGoB(v: Int): UIO[String] = serviceA.letsGoA(v)\\n}\\n\\nobject BLive {\\n  val layer: ZLayer[A, Nothing, BLive] = ZLayer(ZIO.service[A].map(BLive(_)))\\n}\\n\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val program: ZIO[B, IOException, Unit] =\\n    for {\\n      _ <- Console.printLine(s\\\"Welcome to ZIO!\\\")\\n      _ <- Clock.sleep(1.second)\\n      r <- B.letsGoB(10)\\n      _ <- Console.printLine(r)\\n    } yield ()\\n\\n  def run = program.provide(ALive.layer, BLive.layer)\\n\\n}\\n\")), mdx(\"h3\", null, \"An Example of Manually Generating a Dependency Graph\"), mdx(\"p\", null, \"Suppose we have defined the \\u200D\\u200D\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BlobStorage\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cache\"), \" services and their respective implementations as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ncase class User(email: String, name: String)\\n\\ntrait UserRepo {\\n  def save(user: User): Task[Unit]\\n\\n  def get(email: String): Task[User]\\n}\\n\\nobject UserRepo {\\n  def save(user: User): ZIO[UserRepo, Throwable, Unit] =\\n    ZIO.serviceWithZIO(_.save(user))\\n\\n  def get(email: String): ZIO[UserRepo, Throwable, User] =\\n    ZIO.serviceWithZIO(_.get(email))\\n}\\n\\ncase class UserRepoLive(cache: Cache, database: Database) extends UserRepo {\\n  override def save(user: User): Task[Unit] = ???\\n\\n  override def get(email: String): Task[User] = ???\\n}\\n\\nobject UserRepoLive {\\n  val layer: URLayer[Cache & Database, UserRepo] =\\n    ZLayer {\\n      for {\\n        cache    <- ZIO.service[Cache]\\n        database <- ZIO.service[Database]\\n      } yield UserRepoLive(cache, database)\\n    }\\n}\\n\\ntrait Database\\n\\ncase class DatabaseLive() extends Database\\n\\nobject DatabaseLive {\\n  val layer: ZLayer[Any, Nothing, Database] =\\n    ZLayer.succeed(DatabaseLive())\\n}\\n\\ntrait Cache {\\n  def save(key: String, value: Array[Byte]): Task[Unit]\\n\\n  def get(key: String): Task[Array[Byte]]\\n\\n  def remove(key: String): Task[Unit]\\n}\\n\\nclass InmemeoryCache() extends Cache {\\n  override def save(key: String, value: Array[Byte]): Task[Unit] = ???\\n\\n  override def get(key: String): Task[Array[Byte]] = ???\\n\\n  override def remove(key: String): Task[Unit] = ???\\n}\\n\\nobject InmemoryCache {\\n  val layer: ZLayer[Any, Throwable, Cache] =\\n    ZLayer(ZIO.attempt(new InmemeoryCache).debug(\\\"initialized\\\"))\\n}\\n\\nclass PersistentCache() extends Cache {\\n  override def save(key: String, value: Array[Byte]): Task[Unit] = ???\\n\\n  override def get(key: String): Task[Array[Byte]] = ???\\n\\n  override def remove(key: String): Task[Unit] = ???\\n}\\n\\nobject PersistentCache {\\n  val layer: ZLayer[Any, Throwable, Cache] =\\n    ZLayer(ZIO.attempt(new PersistentCache).debug(\\\"initialized\\\"))\\n}\\n\\ncase class Document(title: String, author: String, body: String)\\n\\ntrait DocumentRepo {\\n  def save(document: Document): Task[Unit]\\n\\n  def get(id: String): Task[Document]\\n}\\n\\nobject DocumentRepo {\\n  def save(document: Document): ZIO[DocumentRepo, Throwable, Unit] =\\n    ZIO.serviceWithZIO(_.save(document))\\n\\n  def get(id: String): ZIO[DocumentRepo, Throwable, Document] =\\n    ZIO.serviceWithZIO(_.get(id))\\n}\\n\\ncase class DocumentRepoLive(cache: Cache, blobStorage: BlobStorage) extends DocumentRepo {\\n  override def save(document: Document): Task[Unit] = ???\\n\\n  override def get(id: String): Task[Document] = ???\\n}\\n\\nobject DocumentRepoLive {\\n  val layer: ZLayer[Cache & BlobStorage, Nothing, DocumentRepo] =\\n    ZLayer {\\n      for {\\n        cache       <- ZIO.service[Cache]\\n        blobStorage <- ZIO.service[BlobStorage]\\n      } yield DocumentRepoLive(cache, blobStorage)\\n    }\\n}\\n\\ntrait BlobStorage {\\n  def store(key: String, value: Array[Byte]): Task[Unit]\\n}\\n\\ncase class BlobStorageLive() extends BlobStorage {\\n  override def store(key: String, value: Array[Byte]): Task[Unit] = ???\\n}\\n\\nobject BlobStorageLive {\\n  val layer: URLayer[Any, BlobStorage] =\\n    ZLayer.succeed(BlobStorageLive())\\n}\\n\")), mdx(\"p\", null, \"And then assume we have the following ZIO application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\ndef myApp: ZIO[DocumentRepo & UserRepo, Throwable, Unit] =\\n  for {\\n    _ <- UserRepo.save(User(\\\"john@doe\\\", \\\"john\\\"))\\n    _ <- DocumentRepo.save(Document(\\\"introduction to zio\\\", \\\"john\\\", \\\"\\\"))\\n    _ <- UserRepo.get(\\\"john@doe\\\").debug(\\\"retrieved john@doe user\\\")\\n    _ <- DocumentRepo.get(\\\"introduction to zio\\\").debug(\\\"retrieved article about zio\\\")\\n  } yield ()\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp\"), \" requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" services to run. So we need to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" which requires no services and produces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \". We can manually create this layer using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#vertical-and-horizontal-composition\"\n  }, \"vertical and horizontal layer composition\"), \": \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val layers: ZLayer[Any, Any, DocumentRepo with UserRepo] =\\n    (BlobStorageLive.layer ++ InmemoryCache.layer ++ DatabaseLive.layer) >>>\\n      (DocumentRepoLive.layer >+> UserRepoLive.layer)\\n\\n  def run = myApp.provideLayer(layers)\\n}\\n\")), mdx(\"h3\", null, \"An Example of Automatically Generating a Dependency Graph\"), mdx(\"p\", null, \"Instead of creating the required layer manually, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#provide\"), \". ZIO internally creates the dependency graph automatically based on all dependencies provided:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  def run =\\n    myApp.provide(\\n      InmemoryCache.layer,\\n      DatabaseLive.layer,\\n      UserRepoLive.layer,\\n      BlobStorageLive.layer,\\n      DocumentRepoLive.layer\\n    )\\n    \\n}\\n\")), mdx(\"h3\", null, \"An Example of Providing Different Implementations of the Same Service\"), mdx(\"p\", null, \"Let's say we want to provide different versions of the same service to different services. In this example, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" services require the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cache\"), \" service. However, we want to provide different cache implementations for these two services. Our goal is to provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InmemoryCache\"), \" layer for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PersistentCache\"), \" layer for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val layers: ZLayer[Any, Throwable, UserRepo with DocumentRepo] =\\n    ((InmemoryCache.layer ++ DatabaseLive.layer) >>> UserRepoLive.layer) ++\\n      ((PersistentCache.layer ++ BlobStorageLive.layer) >>> DocumentRepoLive.layer)\\n\\n  def run = myApp.provideLayer(layers)\\n}\\n\")), mdx(\"h3\", null, \"An Example of How to Get Fresh Layers\"), mdx(\"p\", null, \"Having covered the topic of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#acquiring-a-fresh-version\"\n  }, \"acquiring fresh layers\"), \", let's see an example of using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#fresh\"), \" operator.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" services are dependent on an in-memory cache service. On the other hand, let's assume the cache service is quite simple, and we might be prone to cache conflicts between services. While sharing the cache service may cause some problems for our business logic, we should separate the cache service for both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  val layers: ZLayer[Any, Throwable, UserRepo & DocumentRepo] =\\n    ((InmemoryCache.layer.fresh ++ DatabaseLive.layer) >>> UserRepoLive.layer) ++\\n      ((InmemoryCache.layer.fresh ++ BlobStorageLive.layer) >>> DocumentRepoLive.layer)\\n\\n  def run = myApp.provideLayer(layers)\\n}\\n\")), mdx(\"h3\", null, \"An Example of Pass-through Dependencies\"), mdx(\"p\", null, \"Notice that in the previous examples, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocuemntRepo\"), \" have some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#hidden-versus-passed-through-dependencies\"\n  }, \"hidden dependencies\"), \", such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cache\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Database\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BlobStorage\"), \".  So these hidden dependencies are no longer expressed in the type signature of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layers\"), \". From the perspective of a caller, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layers\"), \" just outputs a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocuemntRepo\"), \" and requires no inputs. The caller does not need to be concerned with the internal implementation details of how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserRepo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DocumentRepo\"), \" are constructed.\"), mdx(\"p\", null, \"An upstream dependency that is used by many other services can be \\\"passed-through\\\" and included in a layer's output. This can be done with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">+>\"), \" operator, which provides the output of one layer to another layer, returning a new layer that outputs the services of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"both\"), \".\"), mdx(\"p\", null, \"The following example shows how to passthrough all dependencies to the final layer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  // passthrough all dependencies\\n  val layers: ZLayer[Any, Throwable, Database & BlobStorage & Cache & DocumentRepo & UserRepo] =\\n    DatabaseLive.layer >+>\\n      BlobStorageLive.layer >+>\\n      InmemoryCache.layer >+>\\n      DocumentRepoLive.layer >+>\\n      UserRepoLive.layer\\n\\n  // providing all passthrough dependencies to the ZIO application\\n  def run = myApp.provideLayer(layers)\\n}\\n\")), mdx(\"h3\", null, \"An Example of Updating Hidden Dependencies\"), mdx(\"p\", null, \"One of the use cases of having explicit all dependencies in the final layer is that we can \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#updating-local-dependencies\"\n  }, \"update\"), \" those hidden layers using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer#update\"), \". In the following example, we are replacing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InmemoryCache\"), \" with another implementation called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PersistentCache\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n\\n  def myApp: ZIO[DocumentRepo & UserRepo, Nothing, Unit] =\\n    for {\\n      _ <- ZIO.service[UserRepo]\\n      _ <- ZIO.service[DocumentRepo]\\n    } yield ()\\n\\n  val layers: ZLayer[Any, Throwable, Database & BlobStorage & Cache & DocumentRepo & UserRepo] =\\n    DatabaseLive.layer >+>\\n      BlobStorageLive.layer >+>\\n      InmemoryCache.layer >+>\\n      DocumentRepoLive.layer >+>\\n      UserRepoLive.layer\\n\\n  def run =\\n    myApp.provideLayer(\\n      layers.update[Cache](_ => new PersistentCache)\\n    )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/contextual/zlayer.md"}},"staticQueryHashes":[]}