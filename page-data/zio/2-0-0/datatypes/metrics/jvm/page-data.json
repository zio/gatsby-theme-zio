{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/metrics/jvm","result":{"data":{"mdx":{"id":"0ffad599-a796-5193-afa2-d31143febed4","slug":"datatypes/metrics/jvm","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"jvm\",\n  \"title\": \"JVM Metrics\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/prometheus/client_java/tree/master/simpleclient_hotspot\"\n  }, \"Prometheus Java Hotspot library\"), \" and compatible with that library.\"), mdx(\"p\", null, \"There are five categories of JVM metrics. Let's look at them one by one:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buffer Pools\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_buffer_pool_used_bytes\"), \" \\u2014 Used bytes of a given JVM buffer pool.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_buffer_pool_capacity_bytes\"), \" \\u2014 Bytes capacity of a given JVM buffer pool.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_buffer_pool_used_buffers\"), \" \\u2014 Used buffers of a given JVM buffer pool.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class Loading\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_classes_loaded\"), \" \\u2014 The number of classes that are currently loaded in the JVM\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_classes_loaded_total\"), \" \\u2014 The total number of classes that have been loaded since the JVM has started execution\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_classes_unloaded_total\"), \" \\u2014 The total number of classes that have been unloaded since the JVM has started\\nexecution\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Garbage Collector\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_gc_collection_seconds_sum\"), \" \\u2014 Time spent in a given JVM garbage collector in seconds.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_gc_collection_seconds_count\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory Allocation\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_pool_allocated_bytes_total\"), \" \\u2014 Total bytes allocated in a given JVM memory pool. Only updated after GC, not continuously.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory Pools\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_bytes_used\"), \" \\u2014 Used bytes of a given JVM memory area.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_bytes_committed\"), \" \\u2014 Committed (bytes) of a given JVM memory area.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_bytes_max\"), \" \\u2014 Max (bytes) of a given JVM memory area.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_bytes_init\"), \" \\u2014 Initial bytes of a given JVM memory area.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_pool_bytes_used\"), \" \\u2014 Used bytes of a given JVM memory pool.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_pool_bytes_committed\"), \" \\u2014 Committed bytes of a given JVM memory pool.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_pool_bytes_max\"), \" \\u2014 Max bytes of a given JVM memory pool.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_memory_pool_bytes_init\"), \" \\u2014 Initial bytes of a given JVM memory pool.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_cpu_seconds_total\"), \" \\u2014 Total user and system CPU time spent in seconds.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_start_time_seconds\"), \" \\u2014 Start time of the process since unix epoch in seconds.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_open_fds\"), \" \\u2014 Number of open file descriptors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_max_fds\"), \" \\u2014 Maximum number of open file descriptors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_virtual_memory_bytes\"), \" \\u2014 Virtual memory size in bytes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process_resident_memory_bytes\"), \" \\u2014 Resident memory size in bytes.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thread\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_current\"), \" \\u2014 Current thread count of a JVM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_daemon\"), \" \\u2014 Daemon thread count of a JVM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_peak\"), \" \\u2014 Peak thread count of a JVM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_started_total\"), \" \\u2014 Started thread count of a JVM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_deadlocked\"), \" \\u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors or ownable synchronizers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_deadlocked_monitor\"), \" \\u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_threads_state\"), \" \\u2014 Current count of threads by state.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Version Info\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jvm_info\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"version\"), \" \\u2014 java.runtime.version \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vendor\"), \" \\u2014 java.vm.vendor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"runtime\"), \" \\u2014 java.runtime.name\")))))), mdx(\"h2\", null, \"Collecting Metrics\"), mdx(\"h3\", null, \"Collecting Inside a ZIO Application\"), mdx(\"p\", null, \"JVM Metrics are collection of the following ZIO services:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BufferPools\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ClassLoading\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GarbageCollector\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MemoryAllocation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MemoryPools\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thread\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"VersionInfo\")), mdx(\"p\", null, \"We can access any of them from the environment and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collectMetrics\"), \" operation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")), mdx(\"p\", null, \"This method of collecting metrics is not idiomatic. It's for educational purposes or rare cases where we need to gather metrics within our main logic. In most cases, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#collecting-as-a-sidecar-to-a-zio-application\"\n  }, \"we collect metrics without involving the core application logic\"), \".\"), mdx(\"h3\", null, \"Collecting as a Sidecar to a ZIO Application\"), mdx(\"p\", null, \"ZIO JVM metrics have built-in applications that collect the JVM metrics. They can be composed with other ZIO applications as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sidecar\"), \". By doing so, we are able to collect JVM metrics without modifying our main ZIO application. They will be executed as a daemon alongside the main app:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/metrics/jvm.md"}},"staticQueryHashes":[]}