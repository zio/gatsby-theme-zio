{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/metrics/setcount","result":{"data":{"mdx":{"id":"ae3cf1af-bf18-5df7-9199-660aaad86fe8","slug":"datatypes/metrics/setcount","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"setcount\",\n  \"title\": \"Frequency\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Frequency\"), \" represents the number of occurrences of specified values. We can think of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Frequency\"), \" as a set of counters associated with each value except that new counters will automatically be created when new values are observed.\"), mdx(\"p\", null, \"Essentially, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Frequency\"), \" is a set of related counters sharing the same name and tags. The counters are set apart from each other by an additional configurable tag. The values of the tag represent the observed distinct values.\"), mdx(\"h2\", null, \"API\"), mdx(\"p\", null, \"TODO\"), mdx(\"h2\", null, \"Use Cases\"), mdx(\"p\", null, \"Sets are used to count the occurrences of distinct string values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tracking number of invocations for each service, for an application that uses logical names for its services.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tracking frequency of different types of failures.\")), mdx(\"h2\", null, \"Examples\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Frequency\"), \" to observe the occurrences of unique \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Strings\"), \". It can be applied to effects yielding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")), mdx(\"p\", null, \"Now we can generate some keys within an effect and start counting the occurrences for each value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/metrics/setcount.md"}},"staticQueryHashes":[]}