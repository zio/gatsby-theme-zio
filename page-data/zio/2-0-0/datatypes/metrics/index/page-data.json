{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/metrics/index","result":{"data":{"mdx":{"id":"8e965971-f491-5f97-a181-1e134bf814ab","slug":"datatypes/metrics/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"index\",\n  \"title\": \"Introduction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In highly concurrent applications, things are interconnected, so maintaining such setup to run smoothly and without application downtimes is very challenging. \"), mdx(\"p\", null, \"Imagine we have a complex infrastructure with lots of services. Services are replicated and distributed across our servers. So we have no insight on what happening on the across our services at level of errors, response latency, service uptime, etc. With ZIO Metrics, we can capture these different metrics and provide them to a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"metric service\"), \" for later investigation.\"), mdx(\"p\", null, \"ZIO supports 5 types of Metrics:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"counter.md\"\n  }, \"Counter\")), \" \\u2014 The Counter is used for any value that increases over time like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"request counts\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"gauge.md\"\n  }, \"Gauge\")), \" \\u2014 The gauge is a single numerical value that can arbitrary goes up or down over time like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"memory usage\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"histogram.md\"\n  }, \"Histogram\")), \" \\u2014 The Histogram is used to track the distribution of a set of observed values across a set of buckets like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"request latencies\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"summary.md\"\n  }, \"Summary\")), \" \\u2014 The Summary represents a sliding window of a time series along with metrics for certain percentiles of the time series, referred to as quantiles like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"request latencies\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"setcount.md\"\n  }, \"Frequency\")), \" \\u2014 The Frequency is a metric that counts the number of occurrences of distinct string values.\")), mdx(\"p\", null, \"All ZIO Metrics are defined in the form of ZIO Aspects that can be applied to effects without changing the signature of the effect it is applied to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")), mdx(\"p\", null, \"After adding metrics into our application, whenever we want we can capture snapshot of all metrics recorded by our application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")), mdx(\"p\", null, \"Also, a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"metric service\"), \" can implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MetricListener\"), \" interface:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")), mdx(\"p\", null, \"And then we can install that to our application which will be notified every time a metric is updated:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"TODO\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/metrics/index.md"}},"staticQueryHashes":[]}