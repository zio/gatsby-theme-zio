{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/fiber/fiberstatus","result":{"data":{"mdx":{"id":"c41573ac-a071-51a6-b480-4062712207bc","slug":"datatypes/fiber/fiberstatus","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"fiberstatus\",\n  \"title\": \"Fiber.Status\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber.Status\"), \" describes the current status of a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fiber.md\"\n  }, \"Fiber\"), \".\"), mdx(\"p\", null, \"Each fiber can be in one of the following status:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Done\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finishing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suspended\")), mdx(\"p\", null, \"In the following example, we are going to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" on a never-ending fiber and determine the id of that fiber, which we are blocking on:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nfor {\\n  f1 <- ZIO.never.fork\\n  f2 <- f1.await.fork\\n  blockingOn <- f2.status\\n    .collect(()) { case Fiber.Status.Suspended(_, _, _, blockingOn, _) =>\\n      blockingOn\\n    }\\n    .eventually\\n} yield (assert(blockingOn == f1.id))\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/fiber/fiberstatus.md"}},"staticQueryHashes":[]}