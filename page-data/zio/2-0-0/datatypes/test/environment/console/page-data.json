{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/test/environment/console","result":{"data":{"mdx":{"id":"020350a8-11ef-5f15-b039-cd96ff305877","slug":"datatypes/test/environment/console","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"console\",\n  \"title\": \"TestConsole\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole\"), \" allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.test.{test, _}\\nimport zio.test.Assertion._\\n\\nval consoleSuite = suite(\\\"ConsoleTest\\\")(\\n  test(\\\"One can test output of console\\\") {\\n    for {\\n      _              <- TestConsole.feedLines(\\\"Jimmy\\\", \\\"37\\\")\\n      _              <- Console.printLine(\\\"What is your name?\\\")\\n      name           <- Console.readLine\\n      _              <- Console.printLine(\\\"What is your age?\\\")\\n      age            <- Console.readLine.map(_.toInt)\\n      questionVector <- TestConsole.output\\n      q1             = questionVector(0)\\n      q2             = questionVector(1)\\n    } yield {\\n      assertTrue(name == \\\"Jimmy\\\") &&\\n        assertTrue(age == 37) &&\\n        assertTrue(q1 == \\\"What is your name?\\\\n\\\") &&\\n        assertTrue(q2 == \\\"What is your age?\\\\n\\\")\\n    }\\n  }\\n)\\n\")), mdx(\"p\", null, \"The above code simulates an application that will ask for the name and age of the user. To test it we prefill buffers with answers with the call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole.feedLines\"), \" method. Calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.readLine\"), \" will get the value from the buffers instead of interacting with the users keyboard.\"), mdx(\"p\", null, \"Also, all output that our program produces by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.printLine\"), \" (and other printing methods) is being gathered and can be accessed with a call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole.output\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole\"), \" provides a testable interface for programs interacting with the console by modeling input and output as reading from and writing to input and output buffers maintained by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole\"), \" and backed by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \".\"), mdx(\"p\", null, \"All calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"printLine\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole\"), \" will write the string to the output buffer and all calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readLine\"), \" will take a string from the input buffer. \"), mdx(\"p\", null, \"To facilitate debugging, by default output will also be rendered to standard output. We can enable or disable this for a scope using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debug\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"silent\"), \", or the corresponding test aspects. \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestConsole\"), \" has several methods to access and manipulate the content of these buffers including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"feedLines\")), \" to feed strings to the input  buffer that will then be returned by calls to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"readLine\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output\")), \" to get the content of the output buffer from calls to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"print\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"printLine\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"clearInput\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"clearOutput\")), \" to clear the respective buffers.\")), mdx(\"p\", null, \"Together, these functions make it easy to test programs interacting with the console.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/test/environment/console.md"}},"staticQueryHashes":[]}