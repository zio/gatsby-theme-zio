{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/test/environment/sized","result":{"data":{"mdx":{"id":"571266ce-c952-55b2-abf8-602ab1284ed1","slug":"datatypes/test/environment/sized","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"sized\",\n  \"title\": \"Sized\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sized\"), \" service enables the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Sized Generators\"), \" to access the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" from the ZIO Test environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait Sized extends Serializable {\\n  def size: UIO[Int]\\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sized\"), \" service has two APIs:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Sized.size\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Sized.withSize\"))), mdx(\"p\", null, \"Let's go through each one:\"), mdx(\"h2\", null, \"Operations\"), mdx(\"h3\", null, \"size\"), mdx(\"p\", null, \"To access the default \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" value from the environment, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sized.size\"), \" API. In ZIO Test, it is used to enable the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sized generators\"), \" access the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" from the environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Sized {\\n  def withSize[R <: Sized, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\\n}\\n\")), mdx(\"p\", null, \"For example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gen.sized\"), \" generator has the following signature:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Gen {\\n  def sized[R <: Sized, A](f: Int => Gen[R, A]): Gen[R, A] = ???\\n}\\n\")), mdx(\"p\", null, \"It applies the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" to the given function of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int => Gen[R, A]\"), \". We should note that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sized\"), \" generator obtains the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" value from the environment internally.\"), mdx(\"p\", null, \"In the following example, we are creating a sized generator, which generates integer values within the specified range. In this generator, the lower bound is bound to zero, and the upper bound is bound to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" value, which is obtained from the ZIO environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.test._\\n\\nval sizedInts: Gen[Sized, Int] = \\n  Gen.sized(Gen.int(0, _))\\n\")), mdx(\"p\", null, \"To generate some sample values, we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gen#runCollectN\"), \" operator on that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val samples: URIO[Sized, List[Int]] = \\n  sizedInts.runCollectN(5).debug\\n\")), mdx(\"p\", null, \"The return type require the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Sized\"), \" service. Therefore, to run this effect, we need to provide this service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"zio.Runtime.default.unsafeRun(\\n  samples.provide(Sized.live(100)) \\n)\\n// Sample Output: List(34, 44, 89, 14, 15)\\n\")), mdx(\"p\", null, \"The previous example was for educational purposes. In the real world, when we are testing, we don't need to manually provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sized.live\"), \" layer. The ZIO Test Runner has a built-in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestEnvironment\"), \" which contains all required services for testing as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sized\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"type TestEnvironment =\\n  Annotations\\n    with Live\\n    with Sized\\n\")), mdx(\"p\", null, \"So when we test a property with ZIO Test, all the required services will be provided to the ZIO Test Runner:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object SizedSpec extends ZIOSpecDefault {\\n  def spec =\\n    suite(\\\"sized\\\") {\\n      test(\\\"bounded int generator shouldn't cross its boundaries\\\") {\\n        check(Gen.sized(Gen.int(0, _))) { n =>\\n          assertTrue(n >= 0 && n <= 100)  // The default size is 100\\n        }\\n      }\\n    }\\n}\\n\")), mdx(\"h3\", null, \"withSize\"), mdx(\"p\", null, \"To change the default \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" temporarily, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Size.withSize\"), \". It takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" and a ZIO effect, and runs that effect bounded with the given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Sized {\\n  def withSize[R <: Sized, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.test._\\n\\nval effect     : UIO[String]             = ZIO.succeed(\\\"effect\\\")\\nval sizedEffect: RIO[Sized, String] = Sized.withSize(10)(effect)\\n\")), mdx(\"p\", null, \"ZIO Test has a test aspect called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestAspect.sized\"), \" which is a helper method for this operation. This test aspect runs each test with the given \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"size\"), \" value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.test._\\n\\nobject SizedSpec extends ZIOSpecDefault {\\n  def spec =\\n    suite(\\\"sized\\\") {\\n      test(\\\"bounded int generator shouldn't cross its boundaries\\\") {\\n        check(Gen.sized(Gen.int(0, _))) { n =>\\n          assertTrue(n >= 0 && n <= 200)\\n        }\\n      } @@ TestAspect.sized(200)\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/test/environment/sized.md"}},"staticQueryHashes":[]}