{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/sync/index","result":{"data":{"mdx":{"id":"57997928-6a16-5005-b302-baf303ba6c6f","slug":"datatypes/sync/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"index\",\n  \"title\": \"Introduction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies.\"), mdx(\"p\", null, \"ZIO has several synchronization tools:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"reentrantlock.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ReentrantLock\"))), \"\\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ReentrantLock\"), \" is a synchronization tool that is useful for synchronizing blocks of code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"countdownlatch.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"CountDownLatch\"))), \"\\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CountDownLatch\"), \" is a synchronization tool that allows one or more fibers to wait for the finalization of multiple operations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"cyclicbarrier.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"CyclicBarrier\"))), \"\\u2014 The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CyclicBarrier\"), \" is a synchronization tool that allows a set of fibers to all wait for each other to reach a common barrier point.\")), mdx(\"p\", null, \"It also has some concurrent data structure:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrentmap.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ConcurrentMap\"))), \"\\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ConcurrentMap\"), \" is a Map wrapper over \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.util.concurrent.ConcurrentHashMap\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"concurrentset.md\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ConcurrentSet\"))), \"\\u2014 A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ConcurrentSet\"), \" is a Set wrapper over \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.util.concurrent.ConcurrentHashMap\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/sync/index.md"}},"staticQueryHashes":[]}