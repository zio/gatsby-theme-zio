{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/sync/countdownlatch","result":{"data":{"mdx":{"id":"81fc074b-cf0f-5549-bfa2-4e008a02ea9a","slug":"datatypes/sync/countdownlatch","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"countdownlatch\",\n  \"title\": \"CountdownLatch\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers\\ncompletes.\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDownLatch\"), \" is initialized with a given count. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" method block until the current count reaches zero due\\nto invocations of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"countDown\"), \" method, after which all waiting fibers are released and any subsequent invocations\\nof \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that\\nresets the count, consider using a [\", \"[CyclicBarrier]\", \"].\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDownLatch\"), \" is a versatile synchronization tool and can be used for a number of purposes. A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDownLatch\"), \"\\ninitialized with a count of one serves as a simple on/off latch, or gate: all fibers invoking \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" wait at the gate\\nuntil it is opened by a fiber invoking \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"countDown\"), \". A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDownLatch\"), \"initialized to N can be used to make one fiber\\nwait until N fibers have completed some action, or some action has been completed N times.\"), mdx(\"p\", null, \"A useful property of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDownLatch\"), \" is that it doesn't require that fibers calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"countDown\"), \" wait for the count to\\nreach zero before proceeding, it simply prevents any fiber from proceeding past an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \"until all fibers could pass.\"), mdx(\"h2\", null, \"Operations\"), mdx(\"h3\", null, \"Creation\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Method\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"make(n: Int): IO[Option[Nothing], CountdownLatch]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Makes a new \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"CountdownLatch\"), \".\")))), mdx(\"h3\", null, \"Use\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Method\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"await: UIO[Unit]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Causes the current fiber to wait until the latch has counted down to zero.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"countDown: UIO[Unit]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Decrements the count of the latch, releasing all waiting fibers if the count reaches zero.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"count: UIO[Int]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Returns the current count.\")))), mdx(\"h2\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.concurrent.CountdownLatch\\n\\nfor {\\n  latch  <- CountdownLatch.make(100)\\n  count  <- Ref.make(0)\\n  ps     <- ZIO.collectAll(List.fill(10)(Promise.make[Nothing, Unit]))\\n  _      <- ZIO.forkAll(ps.map(p => latch.await *> count.update(_ + 1) *> p.succeed(())))\\n  _      <- latch.countDown.repeat(Schedule.recurs(99))\\n  _      <- ZIO.foreachDiscard(ps)(_.await)\\n  result <- count.get\\n} yield assert(result == 10)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/sync/countdownlatch.md"}},"staticQueryHashes":[]}