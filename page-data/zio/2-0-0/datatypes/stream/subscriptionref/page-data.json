{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/stream/subscriptionref","result":{"data":{"mdx":{"id":"9e14a921-c11e-5836-afe9-5fe3f06cc013","slug":"datatypes/stream/subscriptionref","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"subscription-ref\",\n  \"title\": \"SubscriptionRef\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef[A]\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" that lets us subscribe to receive the current value along with all changes to that value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stream._\\n\\ntrait SubscriptionRef[A] extends Ref.Synchronized[A] {\\n  def changes: ZStream[Any, Nothing, A]\\n}\\n\")), mdx(\"p\", null, \"We can use all the normal methods on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref.Synchronized\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modify\"), \" the current value.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changes\"), \" stream can be consumed to observe the current value as well as all changes to that value. Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changes\"), \" is just a description of a stream, each time we run the stream we will observe the current value as of that point in time as well as all changes after that.\"), mdx(\"p\", null, \"To create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \" you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \" constructor, which makes a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \" with the specified initial value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object SubscriptionRef {\\n  def make[A](a: A): UIO[SubscriptionRef[A]] =\\n    ???\\n}\\n\")), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \" can be extremely useful to model some shared state where one or more observers must perform some action for all changes in that shared state. For example, in a functional reactive programming context the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \" might represent one part of the application state and each observer would need to update various user interface elements based on changes in that state.\"), mdx(\"p\", null, \"To see how this works, let's create a simple example where a \\\"server\\\" repeatedly updates a value that is observed by multiple \\\"clients\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def server(ref: Ref[Long]): UIO[Nothing] =\\n  ref.update(_ + 1).forever\\n\")), mdx(\"p\", null, \"Notice that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server\"), \" just takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" and does not need to know anything about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \". From its perspective it is just updating a value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def client(changes: ZStream[Any, Nothing, Long]): URIO[Random, Chunk[Long]] =\\n  for {\\n    n     <- Random.nextLongBetween(1, 200)\\n    chunk <- changes.take(n).runCollect\\n  } yield chunk\\n\")), mdx(\"p\", null, \"Similarly \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client\"), \" just takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream\"), \" of values and does not have to know anything about the source of these values. In this case we will simply observe a fixed number of values.\"), mdx(\"p\", null, \"To wire everything together, we start the server, then start multiple instances of the client in parallel, and finally shut down the server when we are done. We also actually create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SubscriptionRef\"), \" here.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  subscriptionRef <- SubscriptionRef.make(0L)\\n  server          <- server(subscriptionRef).fork\\n  chunks          <- ZIO.collectAllPar(List.fill(100)(client(subscriptionRef.changes)))\\n  _               <- server.interrupt\\n  _               <- ZIO.foreach(chunks)(chunk => Console.printLine(chunk))\\n} yield ()\\n\")), mdx(\"p\", null, \"This will ensure that each client observes the current value when it starts and all changes to the value after that.\"), mdx(\"p\", null, \"Since the changes are just streams it is also easy to build much more complex programs using all the stream operators we are accustomed to. For example, we can transform these streams, filter them, or merge them with other streams.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/stream/subscriptionref.md"}},"staticQueryHashes":[]}