{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/datatypes/concurrency/semaphore","result":{"data":{"mdx":{"id":"f7cf5017-57b1-5d22-94a5-e56324b348e8","slug":"datatypes/concurrency/semaphore","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"semaphore\",\n  \"title\": \"Semaphore\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Semaphore\"), \" datatype which allows synchronization between fibers with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withPermit\"), \" operation, which safely acquires and releases a permit.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Semaphore\"), \" is based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref[A]\"), \" datatype.\"), mdx(\"h2\", null, \"Operations\"), mdx(\"p\", null, \"For example, a synchronization of asynchronous tasks can\\nbe done via acquiring and releasing a semaphore with a given number of permits it can spend.\\nWhen the acquire operation cannot be performed due to no more available \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"permits\"), \" in the semaphore, such task\\nis semantically blocked, until the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"permits\"), \" value is large enough again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import java.util.concurrent.TimeUnit\\nimport zio._\\nimport zio.Console._\\n\\nval task = for {\\n  _ <- printLine(\\\"start\\\")\\n  _ <- ZIO.sleep(Duration(2, TimeUnit.SECONDS))\\n  _ <- printLine(\\\"end\\\")\\n} yield ()\\n\\nval semTask = (sem: Semaphore) => for {\\n  _ <- sem.withPermit(task)\\n} yield ()\\n\\nval semTaskSeq = (sem: Semaphore) => (1 to 3).map(_ => semTask(sem))\\n\\nval program = for {\\n\\n  sem <- Semaphore.make(permits = 1)\\n\\n  seq <- ZIO.succeed(semTaskSeq(sem))\\n\\n  _ <- ZIO.collectAllPar(seq)\\n\\n} yield ()\\n\")), mdx(\"p\", null, \"As the binary semaphore is a special case of a counting semaphore,\\nwe can acquire and release any number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"permits\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val semTaskN = (sem: Semaphore) => for {\\n  _ <- sem.withPermits(5)(task)\\n} yield ()\\n\")), mdx(\"p\", null, \"The guarantee of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withPermit\"), \" (and its corresponding counting version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withPermits\"), \") is that each acquisition will be followed by the equivalent number of releases, regardless of whether the task succeeds, fails, or is interrupted.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/datatypes/concurrency/semaphore.md"}},"staticQueryHashes":[]}