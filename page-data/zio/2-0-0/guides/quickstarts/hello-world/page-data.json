{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/guides/quickstarts/hello-world","result":{"data":{"mdx":{"id":"3682b875-30be-575d-b05e-20c542e7cc72","slug":"guides/quickstarts/hello-world","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"hello-world\",\n  \"title\": \"ZIO Quickstart: Hello World\",\n  \"sidebar_label\": \"Hello World\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps.\"), mdx(\"h2\", null, \"Running The Example\"), mdx(\"p\", null, \"First, open the console and clone the project using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" (or you can simply download the project) and then change the directory:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"git clone git@github.com:khajavi/zio-quickstart-hello-world.git \\ncd zio-quickstart-hello-world\\n\")), mdx(\"p\", null, \"Once you are inside the project directory, run the application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sbt run\\n\")), mdx(\"h2\", null, \"Testing The Quickstart\"), mdx(\"p\", null, \"When we prompt the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sbt run\"), \" the sbt search for the executable class and will find the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.dev.quickstart.MainApp\"), \" which contains the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run = Console.printLine(\\\"Hello, World!\\\")\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MainApp\"), \" is the main object of our application which extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIOAppDefault\"), \" trait. This trait provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" function which can be invoked from IDEs or the command-line, e.g. the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sbt run\"), \".\"), mdx(\"p\", null, \"This example is the simplest, example we can run. Let's change it so that we ask the name of the user and print a hello along with the user's name:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run =\\n    for {\\n      _    <- Console.print(\\\"Please enter your name: \\\")\\n      name <- Console.readLine\\n      _    <- Console.printLine(s\\\"Hello, $name!\\\")\\n    } yield ()\\n}\\n\")), mdx(\"p\", null, \"In this example, we used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-comprehension\"), \" to compose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readLine\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"printLine\"), \" workflows. We can think of it as the following \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatMap\"), \" operations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject MainApp extends ZIOAppDefault {\\n  def run =\\n    Console.print(\\\"Please enter your name: \\\")\\n      .flatMap { _ =>\\n        Console.readLine\\n          .flatMap { name =>\\n            Console.printLine(s\\\"Hello, $name!\\\")\\n          }\\n      }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/guides/quickstarts/hello-world.md"}},"staticQueryHashes":[]}