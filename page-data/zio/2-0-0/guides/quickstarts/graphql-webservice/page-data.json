{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/guides/quickstarts/graphql-webservice","result":{"data":{"mdx":{"id":"9f49c48e-80aa-5196-a030-e52ed4286810","slug":"guides/quickstarts/graphql-webservice","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"graphql-webservice\",\n  \"title\": \"ZIO Quickstart: Building GraphQL Web Service\",\n  \"sidebar_label\": \"GraphQL Web Service\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This quickstart shows how to build a GraphQL web service using ZIO. It uses\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://dream11.github.io/zio-http/\"\n  }, \"ZIO HTTP\"), \" for the HTTP server\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ghostdogpr.github.io/caliban/\"\n  }, \"Caliban\"), \" for the GraphQL\")), mdx(\"p\", null, \"Creating GraphQL API using Caliban is an easy process. We can define our data models using case classes and ADTs. Then Caliban can derive the whole GraphQL schema from these data models.\"), mdx(\"h2\", null, \"Running The Example\"), mdx(\"p\", null, \"First, open the console and clone the project using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" (or you can simply download the project) and then change the directory:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"git clone git@github.com:khajavi/zio-quickstart-graphql-webservice.git \\ncd zio-quickstart-graphql-webservice\\n\")), mdx(\"p\", null, \"Once you are inside the project directory, run the application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sbt run\\n\")), mdx(\"h2\", null, \"Testing The Quickstart\"), mdx(\"p\", null, \"In this project, we have defined models of our employees with their names and roles. Then using GraphQL annotations, we asked Caliban to derive the GraphQL schema from these models.\"), mdx(\"p\", null, \"So we can query all the employees that are software developers using the GraphQL query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query{\\n  employees(role: SoftwareDeveloper){\\n    name\\n    role\\n  }\\n}\\n\")), mdx(\"p\", null, \"To run this query, we can use any of the GraphGL clients or use the following curl command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl 'http://localhost:8088/api/graphql' --data-binary '{\\\"query\\\":\\\"query{\\\\n employees(role: SoftwareDeveloper){\\\\n name\\\\n role\\\\n}\\\\n}\\\"}'\\n\")), mdx(\"p\", null, \"The response will be as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"data\\\" : {\\n    \\\"employees\\\" : [\\n      {\\n        \\\"name\\\" : \\\"Maria\\\",\\n        \\\"role\\\" : \\\"SoftwareDeveloper\\\"\\n      },\\n      {\\n        \\\"name\\\" : \\\"Peter\\\",\\n        \\\"role\\\" : \\\"SoftwareDeveloper\\\"\\n      }\\n    ]\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/guides/quickstarts/graphql-webservice.md"}},"staticQueryHashes":[]}