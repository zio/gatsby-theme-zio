{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/2-0-0/guides/interop/with-monix","result":{"data":{"mdx":{"id":"0ed03358-e6ba-51a4-a130-8ac6d875ff1a","slug":"guides/interop/with-monix","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"with-monix\",\n  \"title\": \"How to Interop with Monix?\",\n  \"sidebar_label\": \"Monix\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Checkout \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/interop-monix\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"interop-monix\")), \" module for inter-operation support.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Task\"), \" conversions\"), mdx(\"p\", null, \"Interop layer provides the following conversions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Task[A]\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"UIO[Task[A]]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Task[A]\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Task[A]\"))), mdx(\"p\", null, \"To convert an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\"), \", use the following method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def toTask: UIO[eval.Task[A]]\\n\")), mdx(\"p\", null, \"To perform conversion in other direction, use the following extension method\\navailable on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" companion object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fromTask[A](task: eval.Task[A])(implicit scheduler: Scheduler): Task[A]\\n\")), mdx(\"p\", null, \"Note that in order to convert the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\"), \" to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \", an appropriate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scheduler\"), \"\\nneeds to be available.\"), mdx(\"h3\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import monix.eval.Task\\nimport monix.execution.Scheduler.Implicits.global\\nimport zio.{ IO, Runtime }\\nimport zio.interop.monix._\\n\\nobject UnsafeExample extends App {\\n\\n  val runtime = Runtime.default\\n\\n  def main(args: Array[String]): Unit = {\\n    val io1 = IO.succeed(10)\\n    val t1  = runtime.unsafeRun(io1.toTask)\\n\\n    t1.runToFuture.foreach(r => println(s\\\"IO to task result is $r\\\"))\\n\\n    val t2  = Task(10)\\n    val io2 = IO.fromTask(t2).map(r => s\\\"Task to IO result is $r\\\")\\n\\n    println(runtime.unsafeRun(io2))\\n  }\\n}\\n\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Coeval\"), \" conversions\"), mdx(\"p\", null, \"To convert an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Coeval\"), \", use the following method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def toCoeval: UIO[eval.Coeval[A]]\\n\")), mdx(\"p\", null, \"To perform conversion in other direction, use the following extension method\\navailable on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" companion object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fromCoeval[A](coeval: eval.Coeval[A]): Task[A]\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import monix.eval.Coeval\\nimport zio.{ IO, Runtime }\\nimport zio.interop.monix._\\n\\nobject UnsafeExample extends App {\\n\\n  val runtime = Runtime.default\\n\\n  def main(args: Array[String]): Unit = {\\n    val io1 = IO.succeed(10)\\n    val c1  = runtime.unsafeRun(io1.toCoeval) \\n\\n    println(s\\\"IO to coeval result is ${c1.value}\\\")\\n\\n    val c2  = Coeval(10)\\n    val io2 = IO.fromCoeval(c2).map(r => s\\\"Coeval to IO result is $r\\\")\\n\\n    println(runtime.unsafeRun(io2))\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core-2/src/docs/guides/interop/with-monix.md"}},"staticQueryHashes":[]}