{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/services/random","result":{"data":{"mdx":{"id":"282ae126-952d-57d0-b98a-d208799f8624","slug":"services/random","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"random\",\n  \"title\": \"Random\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Random service provides utilities to generate random numbers. It's a functional wrapper of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scala.util.Random\"), \". This service contains various different pseudo-random generators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nextInt\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nextBoolean\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nextDouble\"), \". Each random number generator functions return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URIO[Random, T]\"), \" value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.random._\\nimport zio.console._\\nfor {\\n  randomInt <- nextInt\\n  _ <- putStrLn(s\\\"A random Int: $randomInt\\\")\\n  randomChar <- nextPrintableChar\\n  _ <- putStrLn(s\\\"A random Char: $randomChar\\\")\\n  randomDouble <- nextDoubleBetween(1.0, 5.0)\\n  _ <- putStrLn(s\\\"A random double between 1.0 and 5.0: $randomDouble\\\")\\n} yield ()\\n\")), mdx(\"p\", null, \"Random service has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setSeed\"), \" which helps us to alter the state of the random generator. It is useful when writing the test version of Random service when we need a generation of the same sequence of numbers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  _ <- setSeed(0)\\n  nextInts <- (nextInt zip nextInt)\\n} yield assert(nextInts == (-1155484576,-723955400))\\n\")), mdx(\"p\", null, \"Also, it has a utility to shuffle a list or generating random samples from Gaussian distribution:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"shuffle\"), \" - Takes a list as an input and shuffles it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"nextGaussian\"), \" \\u2014 Returns the next pseudorandom, Gaussian (\\\"normally\\\") distributed double value with mean 0.0 and standard deviation 1.0.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"Note\"), \":\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Random numbers that are generated via Random service are not cryptographically strong. Therefore it's not safe to use the ZIO Random service for security domains where a high level of security and randomness is required, such as password generation.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/services/random.md"}},"staticQueryHashes":[]}