{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/guides/mock-services","result":{"data":{"mdx":{"id":"d366f787-ac7d-59de-9d4d-e9b78945a933","slug":"guides/mock-services","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"mock-services\",\n  \"title\": \"How to Mock Services?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"How to test interactions between services?\"), mdx(\"p\", null, \"Whenever possible, we should strive to make our functions pure, which makes testing such function easy - you just need to assert on the return value.\\nHowever in larger applications there is a need for intermediate layers that delegate the work to specialized services.\"), mdx(\"p\", null, \"For example, in a HTTP server the first layer of indirection are so called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \", whose job is to match the request and delegate the processing to\\ndownstream layers. Often below there is a second layer of indirection, so called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"controllers\"), \", which consist of several business logic units grouped\\nby their domain. In a RESTful API that would be all operations on a certain model. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"controller\"), \" to perform its job might call on further\\nspecialized services for communicating with the database, sending email, logging, et cetera.\"), mdx(\"p\", null, \"If the job of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability\"), \" is to call on another \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability\"), \", how should we test it?\"), mdx(\"h2\", null, \"Hidden outputs\"), mdx(\"p\", null, \"A pure function is such a function which operates only on its inputs and produces only its output. Command-like methods, by definition are impure, as\\ntheir job is to change state of the collaborating object (performing a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"side effect\"), \"). For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scala.concurrent.Future\\n\\ndef processEvent(event: Event): Future[Unit] = Future(println(s\\\"Got $event\\\"))\\n\")), mdx(\"p\", null, \"The signature of this method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Event => Future[Unit]\"), \" hints us we're dealing with a command. It returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" (well, wrapped in future, but it does\\nnot matter here), you can't do anything useful with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" and it does not contain any information. It is the equivalent of returning nothing. It is\\nalso an unreliable return type, as when Scala expects the return type to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" it will discard whatever value it had (for details see\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://scala-lang.org/files/archive/spec/2.13/06-expressions.html#value-conversions\"\n  }, \"Section 6.26.1\"), \" of the Scala Language Specification), which may shadow the fact that the final value produced (and discarded) was\\nnot the one you expected.\"), mdx(\"p\", null, \"Inside the future there may be happening any side effects. It may open a file, print to console, connect to databases. We simply don't know. Let's have a look how this problem would be solved using ZIO's effect system:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.console.Console\\n\\ndef processEvent(event: Event): URIO[Console, Unit] =\\n  console.putStrLn(s\\\"Got $event\\\").orDie\\n\")), mdx(\"p\", null, \"With ZIO, we've regained to ability to reason about the effects called. We know that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"processEvent\"), \" can only call on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capabilities\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \", so even though we still have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" as the result, we have narrowed the possible effects space to a few.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" this is true assuming the programmer disciplines themselves to only perform effects expressed in the type signature.\\nThere is no way (at the moment) to enforce this by the compiler. There is some research done in this space, perhaps future programming languages\\nwill enable us to further constrain side effects.\")), mdx(\"p\", null, \"However, the same method could be implemented as:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def processEvent2(event: Event): URIO[Console, Unit] =\\n  ZIO.unit\\n\")), mdx(\"p\", null, \"How can we test it did exactly what we expected it to do?\"), mdx(\"h2\", null, \"Mocking\"), mdx(\"p\", null, \"In this sort of situations we need mock implementations of our collaborator service. As \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Martin Fowler\"), \" puts it in his excellent article\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://martinfowler.com/articles/mocksArentStubs.html\"\n  }, \"Mocks Aren't Stubs\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mocks\"), \" are (...) objects pre-programmed with expectations which form a specification of the calls they are expected to receive.\")), mdx(\"p\", null, \"ZIO Test provides a framework for mocking your modules.\"), mdx(\"h2\", null, \"Creating a mock service\"), mdx(\"p\", null, \"We'll be assuming you've read about modules and layers in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../datatypes/contextual/index.md\"\n  }, \"contextual types\"), \" guide. In the main sources we define the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"service\"), \", a module alias and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability accessors\"), \". In test sources we're defining the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mock object\"), \" which extends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.test.mock.Mock\"), \" which holds \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tags\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compose layer\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// main sources\\n\\nimport zio.stream.{ ZSink, ZStream }\\nimport zio.test.mock._\\n\\ntype Example = Has[Example.Service]\\n\\nobject Example {\\n  trait Service {\\n    val static                                 : UIO[String]\\n    def zeroArgs                               : UIO[Int]\\n    def zeroArgsWithParens()                   : UIO[Long]\\n    def singleArg(arg1: Int)                   : UIO[String]\\n    def multiArgs(arg1: Int, arg2: Long)       : UIO[String]\\n    def multiParamLists(arg1: Int)(arg2: Long) : UIO[String]\\n    def command(arg1: Int)                     : UIO[Unit]\\n    def overloaded(arg1: Int)                  : UIO[String]\\n    def overloaded(arg1: Long)                 : UIO[String]\\n    def function(arg1: Int)                    : String\\n    def sink(a: Int)                           : ZSink[Any, String, Int, Int, List[Int]]\\n    def stream(a: Int)                         : ZStream[Any, String, Int]\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// test sources\\n\\nobject ExampleMock extends Mock[Example] {\\n  object Static             extends Effect[Unit, Nothing, String]\\n  object ZeroArgs           extends Effect[Unit, Nothing, Int]\\n  object ZeroArgsWithParens extends Effect[Unit, Nothing, Long]\\n  object SingleArg          extends Effect[Int, Nothing, String]\\n  object MultiArgs          extends Effect[(Int, Long), Nothing, String]\\n  object MultiParamLists    extends Effect[(Int, Long), Nothing, String]\\n  object Command            extends Effect[Int, Nothing, Unit]\\n  object Overloaded {\\n    object _0 extends Effect[Int, Nothing, String]\\n    object _1 extends Effect[Long, Nothing, String]\\n  }\\n  object Function extends Method[Int, Throwable, String]\\n  object Sink     extends Sink[Any, String, Int, Int, List[Int]]\\n  object Stream   extends Stream[Any, String, Int]\\n\\n  val compose: URLayer[Has[Proxy], Example] = ???\\n}\\n\")), mdx(\"p\", null, \"A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tag\"), \" is just a value which extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.test.mock.Capability[R <: Has[_], I, E, A]\"), \" type constructor, where:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \" is the type of environment the method belongs to\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I\"), \" is the type of methods input arguments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \" is the type of error it can fail with\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" is the type of return value it can produce\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Capability\"), \" type is not publicly available, instead you have to extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mock\"), \" dependent types \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Effect\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Method\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sink\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stream\"), \".\"), mdx(\"p\", null, \"We model input arguments according to following scheme:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for zero arguments the type is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Unit\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for one or more arguments, regardless in how many parameter lists, the type is a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TupleN\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" is the size of arguments list\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" we're using tuples to represent multiple argument methods, which follows with a limit to max 22 arguments, as is Scala itself limited.\")), mdx(\"p\", null, \"For overloaded methods we nest a list of numbered objects, each representing subsequent overloads.\"), mdx(\"p\", null, \"Finally we need to define a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compose layer\"), \" that can create our environment from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Proxy\"), \".\\nA \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Proxy\"), \" holds the mock state and serves predefined responses to calls.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import ExampleMock._\\n\\nval compose: URLayer[Has[Proxy], Example] =\\n  ZLayer.fromServiceM { proxy =>\\n    withRuntime.map { rts =>\\n      new Example.Service {\\n        val static                                 = proxy(Static)\\n        def zeroArgs                               = proxy(ZeroArgs)\\n        def zeroArgsWithParens()                   = proxy(ZeroArgsWithParens)\\n        def singleArg(arg1: Int)                   = proxy(SingleArg, arg1)\\n        def multiArgs(arg1: Int, arg2: Long)       = proxy(MultiArgs, arg1, arg2)\\n        def multiParamLists(arg1: Int)(arg2: Long) = proxy(MultiParamLists, arg1, arg2)\\n        def command(arg1: Int)                     = proxy(Command, arg1)\\n        def overloaded(arg1: Int)                  = proxy(Overloaded._0, arg1)\\n        def overloaded(arg1: Long)                 = proxy(Overloaded._1, arg1)\\n        def function(arg1: Int)                    = rts.unsafeRunTask(proxy(Function, arg1))\\n        def sink(a: Int)                           = rts.unsafeRun(proxy(Sink, a).catchAll(error => UIO(ZSink.fail[String, Int](error))))\\n        def stream(a: Int)                         = rts.unsafeRun(proxy(Stream, a))\\n      }\\n    }\\n  }\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withRuntime\"), \" helper is defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mock\"), \". It accesses the Runtime via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.runtime\"), \" and if you're on JS platform, it will replace the executor to an unyielding one.\")), mdx(\"p\", null, \"A reference to this layer is passed to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tags\"), \" so it can be used to automatically build environment for composed expectations on\\nmultiple services.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" for non-effectful capabilities you need to unsafely run the final effect to satisfy the required interface. For \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" you also need to map the error into a failed sink as demonstrated above.\")), mdx(\"h2\", null, \"Complete example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// main sources\\n\\nimport zio._\\nimport zio.console.Console\\nimport zio.test.mock._\\n\\ntype AccountObserver = Has[AccountObserver.Service]\\n\\nobject AccountObserver {\\n  trait Service {\\n    def processEvent(event: AccountEvent): UIO[Unit]\\n    def runCommand(): UIO[Unit]\\n  }\\n\\n  def processEvent(event: AccountEvent) =\\n    ZIO.accessM[AccountObserver](_.get.processEvent(event))\\n\\n  def runCommand() =\\n    ZIO.accessM[AccountObserver](_.get.runCommand)\\n\\n  val live: ZLayer[Console, Nothing, AccountObserver] =\\n    ZLayer.fromService[Console.Service, Service] { console =>\\n      new Service {\\n        def processEvent(event: AccountEvent): UIO[Unit] =\\n          for {\\n            _    <- console.putStrLn(s\\\"Got $event\\\").orDie\\n            line <- console.getStrLn.orDie\\n            _    <- console.putStrLn(s\\\"You entered: $line\\\").orDie\\n          } yield ()\\n\\n        def runCommand(): UIO[Unit] =\\n          console.putStrLn(\\\"Done!\\\").orDie\\n      }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// test sources\\n\\nobject AccountObserverMock extends Mock[AccountObserver] {\\n\\n  object ProcessEvent extends Effect[AccountEvent, Nothing, Unit]\\n  object RunCommand   extends Effect[Unit, Nothing, Unit]\\n\\n  val compose: URLayer[Has[Proxy], AccountObserver] =\\n    ZLayer.fromService { proxy =>\\n      new AccountObserver.Service {\\n        def processEvent(event: AccountEvent) = proxy(ProcessEvent, event)\\n        def runCommand(): UIO[Unit]           = proxy(RunCommand)\\n      }\\n    }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" ZIO provides some useful macros to help you generate repetitive code, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"howto-macros.md\"\n  }, \"Scrapping the boilerplate with macros\"), \".\")), mdx(\"h2\", null, \"Provided ZIO services\"), mdx(\"p\", null, \"For each built-in ZIO service you will find their mockable counterparts in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.test.mock\"), \" package:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MockClock\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.clock.Clock\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MockConsole\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.console.Console\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MockRandom\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.random.Random\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MockSystem\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zio.system.System\"))), mdx(\"h2\", null, \"Setting up expectations\"), mdx(\"p\", null, \"To create expectations we use the previously defined \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tags\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.test.Assertion._\\nimport zio.test.mock.Expectation._\\nimport zio.test.mock.MockSystem\\n\\nval exp01 = ExampleMock.SingleArg( // capability to build an expectation for\\n  equalTo(42), // assertion of the expected input argument\\n  value(\\\"bar\\\") // result, that will be returned\\n)\\n\")), mdx(\"p\", null, \"For methods that take input, the first argument will be an assertion on input, and the second the predefined result.\"), mdx(\"p\", null, \"In the most robust example, the result can be either a successful value or a failure. To construct either we must use\\none of following combinators from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.test.mock.Expectation\"), \" companion object:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"failure[E](failure: E)\"), \" Expectation result failing with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"failureF[I, E](f: I => E)\"), \" Maps the input arguments \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I\"), \" to expectation result failing with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"failureM[I, E](f: I => IO[E, Nothing])\"), \" Effectfully maps the input arguments \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I\"), \" to expectation result failing with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"never\"), \" Expectation result computing forever.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unit\"), \" Expectation result succeeding with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Unit\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value[A](value: A)\"), \" Expectation result succeeding with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"valueF[I, A](f: I => A)\"), \" Maps the input arguments \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I\"), \" to expectation result succeeding with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"valueM[I, A](f: I => IO[Nothing, A])\"), \" Effectfully maps the input arguments \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I\"), \" expectation result succeeding with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \".\")), mdx(\"p\", null, \"For methods that take no input, we only define the expected output.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val exp02 = ExampleMock.ZeroArgs(value(42))\\n\")), mdx(\"p\", null, \"For methods that may return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \", we may skip the predefined result (it will default to successful value) or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unit\"), \" helper.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.test.mock.MockConsole\\n\\nval exp03 = MockConsole.PutStrLn(equalTo(\\\"Welcome to ZIO!\\\"))\\nval exp04 = MockConsole.PutStrLn(equalTo(\\\"Welcome to ZIO!\\\"), unit)\\n\")), mdx(\"p\", null, \"For methods that may return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" and take no input we can skip both:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val exp05 = AccountObserverMock.RunCommand()\\n\")), mdx(\"p\", null, \"Finally we're all set and can create ad-hoc mock environments with our services.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.test._\\n\\nval event = new AccountEvent {}\\nval app: URIO[AccountObserver, Unit] = AccountObserver.processEvent(event)\\nval mockEnv: ULayer[Console] = (\\n  MockConsole.PutStrLn(equalTo(s\\\"Got $event\\\"), unit) ++\\n  MockConsole.GetStrLn(value(\\\"42\\\")) ++\\n  MockConsole.PutStrLn(equalTo(\\\"You entered: 42\\\"))\\n)\\n\")), mdx(\"p\", null, \"We can combine our expectation to build complex scenarios using combinators defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.test.mock.Expectation\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"andThen\"), \" (alias \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"++\"), \") Compose two expectations, producing a new expectation to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"satisfy both sequentially\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"and\"), \" (alias \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&&\"), \") Compose two expectations, producing a new expectation to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"satisfy both in any order\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"or\"), \" (alias \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"||\"), \") Compose two expectations, producing a new expectation to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"satisfy only one of them\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"repeated\"), \" Repeat expectation within given bounds, produces a new expectation to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"satisfy itself sequentially given number of times\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atLeast\"), \" Lower-bounded variant of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"repeated\"), \", produces a new expectation to satisfy \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"itself sequentially at least given number of times\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atMost\"), \" Upper-bounded variant of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"repeated\"), \", produces a new expectation to satisfy \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"itself sequentially at most given number of times\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"optional\"), \" Alias for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atMost(1)\"), \", produces a new expectation to satisfy \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"itself at most once\"), \".\")), mdx(\"h2\", null, \"Providing mocked environment\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object AccountObserverSpec extends DefaultRunnableSpec {\\n  def spec = suite(\\\"processEvent\\\")(\\n    testM(\\\"calls putStrLn > getStrLn > putStrLn and returns unit\\\") {\\n      val result = app.provideLayer(mockEnv >>> AccountObserver.live)\\n      assertM(result)(isUnit)\\n    }\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Mocking unused collaborators\"), mdx(\"p\", null, \"Often the dependency on a collaborator is only in some branches of the code. To test the correct behaviour of branches without depedencies, we still have to provide it to the environment, but we would like to assert it was never called. With the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mock.empty\"), \" method you can obtain a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" with an empty service (no calls expected).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object MaybeConsoleSpec extends DefaultRunnableSpec {\\n  def spec = suite(\\\"processEvent\\\")(\\n    testM(\\\"expect no call\\\") {\\n      def maybeConsole(invokeConsole: Boolean) =\\n        ZIO.when(invokeConsole)(console.putStrLn(\\\"foo\\\"))\\n\\n      val maybeTest1 = maybeConsole(false).provideLayer(MockConsole.empty)\\n      val maybeTest2 = maybeConsole(true).provideLayer(MockConsole.PutStrLn(equalTo(\\\"foo\\\")))\\n      assertM(maybeTest1)(isUnit) *> assertM(maybeTest2)(isUnit)\\n    }\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Mocking multiple collaborators\"), mdx(\"p\", null, \"In some cases we have more than one collaborating service being called. You can create mocks for rich environments and as you enrich the environment by using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tags\"), \" from another service, the underlaying mocked layer will be updated.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.Console\\nimport zio.random.Random\\nimport zio.test.mock.MockRandom\\n\\nval combinedEnv: ULayer[Console with Random] = (\\n  MockConsole.PutStrLn(equalTo(\\\"What is your name?\\\")) ++\\n  MockConsole.GetStrLn(value(\\\"Mike\\\")) ++\\n  MockRandom.NextInt(value(42)) ++\\n  MockConsole.PutStrLn(equalTo(\\\"Mike, your lucky number today is 42!\\\"))\\n)\\n\\nval combinedApp =\\n  for {\\n    _    <- console.putStrLn(\\\"What is your name?\\\")\\n    name <- console.getStrLn.orDie\\n    num  <- random.nextInt\\n    _    <- console.putStrLn(s\\\"$name, your lucky number today is $num!\\\")\\n  } yield ()\\n\\nval result = combinedApp.provideLayer(combinedEnv)\\nassertM(result)(isUnit)\\n\")), mdx(\"h2\", null, \"Polymorphic capabilities\"), mdx(\"p\", null, \"Mocking polymorphic methods is also supported, but the interface must require \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.Tag\"), \" implicit evidence for each type parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// main sources\\ntype PolyExample = Has[PolyExample.Service]\\n\\nobject PolyExample {\\n  trait Service {\\n    def polyInput[I: Tag](input: I): Task[String]\\n    def polyError[E: Tag](input: Int): IO[E, String]\\n    def polyOutput[A: Tag](input: Int): Task[A]\\n    def polyAll[I: Tag, E: Tag, A: Tag](input: I): IO[E, A]\\n  }\\n}\\n\")), mdx(\"p\", null, \"In the test sources we construct partially applied \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"capability tags\"), \" by extending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Method.Poly\"), \" family. The unknown types\\nmust be provided at call site. To produce a final monomorphic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Method\"), \" tag we must use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"of\"), \" combinator and pass the\\nmissing types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// test sources\\nobject PolyExampleMock extends Mock[PolyExample] {\\n\\n  object PolyInput  extends Poly.Effect.Input[Throwable, String]\\n  object PolyError  extends Poly.Effect.Error[Int, String]\\n  object PolyOutput extends Poly.Effect.Output[Int, Throwable]\\n  object PolyAll    extends Poly.Effect.InputErrorOutput\\n\\n  val compose: URLayer[Has[Proxy], PolyExample] =\\n    ZLayer.fromServiceM { proxy =>\\n      withRuntime.map { rts =>\\n        new PolyExample.Service {\\n          def polyInput[I: Tag](input: I)                     = proxy(PolyInput.of[I], input)\\n          def polyError[E: Tag](input: Int)                   = proxy(PolyError.of[E], input)\\n          def polyOutput[A: Tag](input: Int)                  = proxy(PolyOutput.of[A], input)\\n          def polyAll[I: Tag, E: Tag, A: Tag](input: I) = proxy(PolyAll.of[I, E, A], input)\\n        }\\n      }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Similarly, we use the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"of\"), \" combinator to refer to concrete monomorphic call in our test suite when building expectations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import PolyExampleMock._\\n\\nval exp06 = PolyInput.of[String](equalTo(\\\"foo\\\"), value(\\\"bar\\\"))\\nval exp07 = PolyInput.of[Int](equalTo(42), failure(new Exception))\\nval exp08 = PolyInput.of[Long](equalTo(42L), value(\\\"baz\\\"))\\n\\nval exp09 = PolyAll.of[Int, Throwable, String](equalTo(42), value(\\\"foo\\\"))\\nval exp10 = PolyAll.of[Int, Throwable, String](equalTo(42), failure(new Exception))\\n\")), mdx(\"h2\", null, \"More examples\"), mdx(\"p\", null, \"You can find more examples in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test-tests\"), \" subproject:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/zio/zio/blob/master/examples/shared/src/test/scala/zio/examples/test/MockExampleSpec.scala\"\n  }, \"MockExampleSpec\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/EmptyMockSpec.scala\"\n  }, \"EmptyMockSpec\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedMockSpec.scala\"\n  }, \"ComposedMockSpec\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedEmptyMockSpec.scala\"\n  }, \"ComposedEmptyMockSpec\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/PolyMockSpec.scala\"\n  }, \"PolyMockSpec\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/guides/mock-services.md"}},"staticQueryHashes":[]}