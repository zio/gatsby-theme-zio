{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/guides/interop/with-reactive-streams","result":{"data":{"mdx":{"id":"47f11c23-181a-5c51-a641-691bc5bff4a1","slug":"guides/interop/with-reactive-streams","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"with-reactive-streams\",\n  \"title\": \"How to Interop with Reactive Streams?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Checkout the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/interop-reactive-streams\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"interop-reactive-streams\")), \" module for inter-operation support.\"), mdx(\"h2\", null, \"Reactive Streams \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Producer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Subscriber\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" integrates with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://reactivestreams.org\"\n  }, \"Reactive Streams\"), \" by providing conversions from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.stream.Stream\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org.reactivestreams.Publisher\"), \"\\nand from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.stream.Sink\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org.reactivestreams.Subscriber\"), \" and vice versa. Simply import \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import zio.interop.reactivestreams._\"), \" to make the\\nconversions available.\"), mdx(\"h2\", null, \"Examples\"), mdx(\"p\", null, \"First, let's get a few imports out of the way.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import org.reactivestreams.example.unicast._\\nimport zio._\\nimport zio.interop.reactivestreams._\\nimport zio.stream._\\n\\nval runtime = Runtime.default\\n\")), mdx(\"p\", null, \"We use the following \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Publisher\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subscriber\"), \" for the examples: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val publisher = new RangePublisher(3, 10)\\nval subscriber = new SyncSubscriber[Int] {\\n  override protected def whenNext(v: Int): Boolean = {\\n    print(s\\\"$v, \\\")\\n    true\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Publisher to Stream\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Publisher\"), \" used as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stream\"), \" buffers up to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qSize\"), \" elements. If possible, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qSize\"), \" should be\\na power of two for best performance. The default is 16.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val streamFromPublisher = publisher.toStream(qSize = 16)\\nruntime.unsafeRun(\\n  streamFromPublisher.run(Sink.collectAll[Integer])\\n)\\n\")), mdx(\"h3\", null, \"Subscriber to Sink\"), mdx(\"p\", null, \"When running a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stream\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subscriber\"), \", a side channel is needed for signalling failures.\\nFor this reason \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toSink\"), \" returns a tuple of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sink\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \" must be failed\\non \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stream\"), \" failure. The type parameter on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toSink\"), \" is the error type of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"the Stream\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val asSink = subscriber.toSink[Throwable]\\nval failingStream = Stream.range(3, 13) ++ Stream.fail(new RuntimeException(\\\"boom!\\\"))\\nruntime.unsafeRun(\\n  asSink.flatMap { case (errorP, sink) =>\\n    failingStream.run(sink).catchAll(errorP.fail)\\n  }\\n)\\n\")), mdx(\"h3\", null, \"Stream to Publisher\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val stream = Stream.range(3, 13)\\nruntime.unsafeRun(\\n  stream.toPublisher.flatMap { publisher =>\\n    UIO(publisher.subscribe(subscriber))\\n  }\\n)\\n\")), mdx(\"h3\", null, \"Sink to Subscriber\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toSubscriber\"), \" returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subscriber\"), \" and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO\"), \" which completes with the result of running the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sink\"), \" or the error if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Publisher\"), \" fails.\\nA \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sink\"), \" used as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subscriber\"), \" buffers up to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qSize\"), \" elements. If possible, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qSize\"), \" should be\\na power of two for best performance. The default is 16.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink = Sink.collectAll[Integer]\\nruntime.unsafeRun(\\n  sink.toSubscriber(qSize = 16).flatMap { case (subscriber, result) => \\n    UIO(publisher.subscribe(subscriber)) *> result\\n  }\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/guides/interop/with-reactive-streams.md"}},"staticQueryHashes":[]}