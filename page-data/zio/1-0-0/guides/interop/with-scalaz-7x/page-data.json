{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/guides/interop/with-scalaz-7x","result":{"data":{"mdx":{"id":"96435f58-f40e-5c94-83c2-7dc1ba9f73cd","slug":"guides/interop/with-scalaz-7x","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"with-scalaz-7x\",\n  \"title\": \"How to Interop with Scalaz 7.x?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"ZIO\"), \" Instances\"), mdx(\"p\", null, \"If you are a happy Scalaz 7.2 user \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/interop-scalaz\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"interop-scala7x\")), \" module offers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" instances for several typeclasses.\"), mdx(\"h3\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scalaz._, Scalaz._\\nimport zio.interop.scalaz72._\\n\\ntype Database = IList[User]\\n\\ndef findUser(id: UserId): ZIO[Database, UserError, User] = ...\\ndef findUsers(ids: IList[UserId]): ZIO[Database, UserError, IList[User]] = ids.traverse(findUser(_))\\n\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"ZIO\"), \" parallel \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Applicative\"), \" instance\"), mdx(\"p\", null, \"Due to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Applicative\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Monad\"), \" coherence law \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Applicative\"), \" instance has to be implemented in terms of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bind\"), \" hence when composing multiple effects using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Applicative\"), \" they will be sequenced. To cope with that limitation \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" tagged with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Parallel\"), \" has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Applicative\"), \" instance which is not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Monad\"), \" and operates in parallel.\"), mdx(\"h3\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scalaz._, Scalaz._\\nimport zio.interop.scalaz72._\\n\\ncase class Dashboard(details: UserDetails, history: TransactionHistory)\\n\\ndef getDetails(id: UserId): ZIO[Database, UserError, UserDetails] = ...\\ndef getHistory(id: UserId): ZIO[Database, UserError, TransactionHistory] = ...\\n\\ndef buildDashboard(id: UserId): ZIO[Database, UserError, Dashboard] =\\n  Tag.unwrap(^(par(getDetails(id)), par(getHistory(id)))(Dashboard.apply))\\n\\ndef par[R, E, A](io: ZIO[R, E, A]): scalaz72.ParIO[R, E, A] = Tag(io)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/guides/interop/with-scalaz-7x.md"}},"staticQueryHashes":[]}