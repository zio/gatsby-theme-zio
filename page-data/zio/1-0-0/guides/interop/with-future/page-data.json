{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/guides/interop/with-future","result":{"data":{"mdx":{"id":"3bad2434-9c13-54b8-a180-337158e8bf60","slug":"guides/interop/with-future","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"with-future\",\n  \"title\": \"How to Interop with Future?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Scala Future\"), mdx(\"p\", null, \"Basic interoperability with Scala's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" is now provided by ZIO, and does not require a separate module.\"), mdx(\"h3\", null, \"From Future\"), mdx(\"p\", null, \"Scala's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" can be converted into a ZIO effect with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromFuture\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def loggedFuture[A](future: ExecutionContext => Future[A]): UIO[Task[A]] = {\\n  ZIO.fromFuture { implicit ec =>\\n    future(ec).flatMap { result =>\\n      Future(println(\\\"Future succeeded with \\\" + result)).map(_ => result)\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Scala's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" can also be converted into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber.fromFuture\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def futureToFiber[A](future: => Future[A]): Fiber[Throwable, A] = \\n  Fiber.fromFuture(future)\\n\")), mdx(\"p\", null, \"This is a pure operation, given any sensible notion of fiber equality.\"), mdx(\"h3\", null, \"To Future\"), mdx(\"p\", null, \"A ZIO \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\"), \" effect can be converted into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#toFuture\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def taskToFuture[A](task: Task[A]): UIO[Future[A]] = \\n  task.toFuture\\n\")), mdx(\"p\", null, \"Because converting a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\"), \" into an (eager) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" is effectful, the return value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#toFuture\"), \" is an effect. To actually begin the computation, and access the started \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \", it is necessary to execute the effect with a runtime.\"), mdx(\"p\", null, \"A ZIO \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" can be converted into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber#toFuture\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fiberToFuture[A](fiber: Fiber[Throwable, A]): UIO[Future[A]] = \\n  fiber.toFuture\\n\")), mdx(\"h2\", null, \"Run to Future\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Runtime\"), \" type has a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unsafeRunToFuture\"), \", which can execute a ZIO effect asynchronously, and return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" that will be completed when the execution of the effect is complete.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/guides/interop/with-future.md"}},"staticQueryHashes":[]}