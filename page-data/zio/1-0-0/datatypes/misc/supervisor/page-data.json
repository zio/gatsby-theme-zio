{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/misc/supervisor","result":{"data":{"mdx":{"id":"2bee942d-bf2b-5c9d-898e-7c3b95b964da","slug":"datatypes/misc/supervisor","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"supervisor\",\n  \"title\": \"Supervisor\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Supervisor[A]\"), \" is allowed to supervise the launching and termination of fibers, producing some visible value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" from the supervision.\"), mdx(\"h2\", null, \"Creation\"), mdx(\"h3\", null, \"track\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"track\"), \" creates a new supervisor that tracks children in a set. It takes a boolean \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weak\"), \" parameter as input, which indicates whether track children in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weakset\"), \" or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val supervisor = Supervisor.track(true)\\n// supervisor: zio.package.UIO[Supervisor[zio.Chunk[zio.Fiber.Runtime[Any, Any]]]] = zio.ZIO$EffectTotal@681dca89\\n\")), mdx(\"p\", null, \"We can periodically, report the status of the fibers of our program with the help of the Supervisor.\"), mdx(\"h3\", null, \"fibersIn\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibersIn\"), \" creates a new supervisor with an initial sorted set of fibers.\"), mdx(\"p\", null, \"In the following example we are creating a new supervisor from an initial set of fibers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fiberListSupervisor = for { \\n  ref <- Ref.make(SortedSet.from(fibers))\\n  s <- Supervisor.fibersIn(ref)\\n} yield (s)\\n\")), mdx(\"h2\", null, \"Supervising\"), mdx(\"p\", null, \"Whenever we need to supervise a ZIO effect, we can call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#supervised\"), \" function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"supervised\"), \" takes a supervisor and return another effect. The behavior of children fibers is reported to the provided supervisor:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val supervised = supervisor.flatMap(s => fib(20).supervised(s))\\n\")), mdx(\"p\", null, \"Now we can access all information of children fibers through the supervisor.\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"In the following example we are going to periodically monitor the number of fibers throughout our application life cycle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object SupervisorExample extends zio.App {\\n  import zio.duration._\\n\\n  val program = for {\\n    supervisor <- Supervisor.track(true)\\n    fiber <- fib(20).supervised(supervisor).fork\\n    policy = Schedule\\n      .spaced(500.milliseconds)\\n      .whileInputM[Any, Unit](_ => fiber.status.map(x => !x.isDone))\\n    logger <- monitorFibers(supervisor)\\n      .repeat(policy).fork\\n    _ <- logger.join\\n    result <- fiber.join\\n    _ <- putStrLn(s\\\"fibonacci result: $result\\\")\\n  } yield ()\\n\\n  def monitorFibers(supervisor: Supervisor[Chunk[Fiber.Runtime[Any, Any]]]) = for {\\n    length <- supervisor.value.map(_.length)\\n    _ <- putStrLn(s\\\"number of fibers: $length\\\")\\n  } yield ()\\n\\n  def fib(n: Int): ZIO[Clock, Nothing, Int] =\\n    if (n <= 1) {\\n      ZIO.succeed(1)\\n    } else {\\n      for {\\n        _ <- sleep(500.milliseconds)\\n        fiber1 <- fib(n - 2).fork\\n        fiber2 <- fib(n - 1).fork\\n        v2 <- fiber2.join\\n        v1 <- fiber1.join\\n      } yield v1 + v2\\n    }\\n\\n  override def run(args: List[String]) = program.exitCode\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/misc/supervisor.md"}},"staticQueryHashes":[]}