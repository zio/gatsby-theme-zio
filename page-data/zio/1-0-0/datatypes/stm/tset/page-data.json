{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/stm/tset","result":{"data":{"mdx":{"id":"c55d8030-0e4f-5aab-9579-2b950ec78c49","slug":"datatypes/stm/tset","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"tset\",\n  \"title\": \"TSet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet[A]\"), \" is a mutable set that can participate in transactions in STM.\"), mdx(\"h2\", null, \"Create a TSet\"), mdx(\"p\", null, \"Creating an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval emptyTSet: STM[Nothing, TSet[Int]] = TSet.empty[Int]\\n\")), mdx(\"p\", null, \"Or creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \" with specified values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval specifiedValuesTSet: STM[Nothing, TSet[Int]] = TSet.make(1, 2, 3)\\n\")), mdx(\"p\", null, \"Alternatively, you can create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \" by providing a collection of values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval iterableTSet: STM[Nothing, TSet[Int]] = TSet.fromIterable(List(1, 2, 3))\\n\")), mdx(\"p\", null, \"In case there are duplicates provided, the last one is taken.\"), mdx(\"h2\", null, \"Put an element to a TSet\"), mdx(\"p\", null, \"The new element can be added to the set in the following way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval putElem: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2)\\n  _    <- tSet.put(3)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"In case the set already contains the element, no modification will happen.\"), mdx(\"h2\", null, \"Remove an element from a TSet\"), mdx(\"p\", null, \"The simplest way to remove an element from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \" is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval deleteElem: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3)\\n  _    <- tSet.delete(1)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Also, it is possible to remove every element that satisfies provided predicate:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval removedEvenElems: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.removeIf(_ % 2 == 0)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Or you can keep all the elements that match predicate function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval retainedEvenElems: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.retainIf(_ % 2 == 0)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retainIf\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeIf\"), \" serve the same purpose as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterNot\"), \". The reason for naming them differently was to emphasize a distinction in their nature. Namely, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retainIf\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeIf\"), \" are destructive - calling them can modify the collection.\"), mdx(\"h2\", null, \"Union of a TSet\"), mdx(\"p\", null, \"Union of the sets A and B represents the set of elements belonging to set A or set B, or both.\\nUsing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A union B\"), \" method modifies set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\n// unionTSet = {1, 2, 3, 4, 5, 6}\\nval unionTSet: UIO[TSet[Int]] = (for {\\n  tSetA <- TSet.make(1, 2, 3, 4)\\n  tSetB <- TSet.make(3, 4, 5, 6)\\n  _     <- tSetA.union(tSetB)\\n} yield tSetA).commit\\n\")), mdx(\"h2\", null, \"Intersection of a TSet\"), mdx(\"p\", null, \"The intersection of the sets A and B is the set of elements belonging to both A and B.\\nUsing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A intersect B\"), \" method modifies set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\n// intersectionTSet = {3, 4}\\nval intersectionTSet: UIO[TSet[Int]] = (for {\\n  tSetA <- TSet.make(1, 2, 3, 4)\\n  tSetB <- TSet.make(3, 4, 5, 6)\\n  _     <- tSetA.intersect(tSetB)\\n} yield tSetA).commit\\n\")), mdx(\"h2\", null, \"Difference of a TSet\"), mdx(\"p\", null, \"The difference between sets A and B is the set containing elements of set A but not in B.\\nUsing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A diff B\"), \" method modifies set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\n// diffTSet = {1, 2}\\nval diffTSet: UIO[TSet[Int]] = (for {\\n  tSetA <- TSet.make(1, 2, 3, 4)\\n  tSetB <- TSet.make(3, 4, 5, 6)\\n  _     <- tSetA.diff(tSetB)\\n} yield tSetA).commit\\n\")), mdx(\"h2\", null, \"Transform elements of a TSet\"), mdx(\"p\", null, \"The transform function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A => A\"), \" allows computing a new value for every element in the set: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval transformTSet: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.transform(a => a * a)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Note that it is possible to shrink a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval shrinkTSet: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.transform(_ => 1)\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Resulting set in example above has only one element.\"), mdx(\"p\", null, \"Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transform\"), \" serves the same purpose as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \". The reason for naming it differently was to emphasize a distinction in its nature. Namely, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transform\"), \" is destructive - calling it can modify the collection.\"), mdx(\"p\", null, \"The elements can be mapped effectfully via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformM\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval transformMTSet: UIO[TSet[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.transformM(a => STM.succeed(a * a))\\n} yield tSet).commit\\n\")), mdx(\"p\", null, \"Folds the elements of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \" using the specified associative binary operator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foldTSet: UIO[Int] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  sum  <- tSet.fold(0)(_ + _)\\n} yield sum).commit\\n\")), mdx(\"p\", null, \"The elements can be folded effectfully via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foldM\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foldMTSet: UIO[Int] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  sum  <- tSet.foldM(0)((acc, el) => STM.succeed(acc + el))\\n} yield sum).commit\\n\")), mdx(\"h2\", null, \"Perform side-effect for TSet elements\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foreach\"), \" is used for performing side-effect for each element in set:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval foreachTSet = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  _    <- tSet.foreach(a => STM.succeed(println(a)))\\n} yield tSet).commit\\n\")), mdx(\"h2\", null, \"Check TSet membership\"), mdx(\"p\", null, \"Checking whether the element is present in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TSet\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tSetContainsElem: UIO[Boolean] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  res  <- tSet.contains(3)\\n} yield res).commit\\n\")), mdx(\"h2\", null, \"Convert TSet to a List\"), mdx(\"p\", null, \"List of set elements can be obtained as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tSetToList: UIO[List[Int]] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  list <- tSet.toList\\n} yield list).commit\\n\")), mdx(\"h2\", null, \"Size of a TSet\"), mdx(\"p\", null, \"Set's size can be obtained as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stm._\\n\\nval tSetSize: UIO[Int] = (for {\\n  tSet <- TSet.make(1, 2, 3, 4)\\n  size <- tSet.size\\n} yield size).commit\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/stm/tset.md"}},"staticQueryHashes":[]}