{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/core/zio","result":{"data":{"mdx":{"id":"052c781c-66e6-57d9-b74c-3a2a1b9b15ab","slug":"datatypes/core/zio","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zio\",\n  \"title\": \"ZIO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" value is an immutable value that lazily describes a workflow or job. The workflow requires some environment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", and may fail with an error of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \", or succeed with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"p\", null, \"A value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" is like an effectful version of the following function type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"R => Either[E, A]\\n\")), mdx(\"p\", null, \"This function, which requires an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", might produce either an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \", representing failure, or an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", representing success. ZIO effects are not actually functions, of course, because they model complex effects, like asynchronous and concurrent effects.\"), mdx(\"p\", null, \"ZIO effects model resourceful interaction with the outside world, including synchronous, asynchronous, concurrent, and parallel interaction.\"), mdx(\"p\", null, \"ZIO effects use a fiber-based concurrency model, with built-in support for\\nscheduling, fine-grained interruption, structured concurrency, and high scalability.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" data type has three type parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"R\"), \" - Environment Type\"), \". The effect requires an environment of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"R\"), \". If this type parameter is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Any\"), \", it means the effect has no requirements, because we can run the effect with any value (for example, the unit value \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"E\"), \" - Failure Type\"), \". The effect may fail with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"E\"), \". Some applications will use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Throwable\"), \". If this type parameter is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Nothing\"), \", it means the effect cannot fail, because there are no values of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Nothing\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"A\"), \" - Success Type\"), \". The effect may succeed with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". If this type parameter is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Unit\"), \", it means the effect produces no useful information, while if it is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Nothing\"), \", it means the effect runs forever (or until failure).\")), mdx(\"p\", null, \"In the following example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStrLn\"), \" function requires the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" service, it may fail with value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IOException\"), \", or may succeed with a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val getStrLn: ZIO[Console, IOException, String] =\\n  ZIO.accessM(_.get.getStrLn)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" values are immutable, and all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" functions produce new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" values, enabling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" to be reasoned about and used like any ordinary Scala immutable data structure.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" values do not actually \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"do\"), \" anything; they are just values that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"model\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"describe\"), \" effectful interactions.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" can be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"interpreted\"), \" by the ZIO runtime system into effectful interactions with the external world. Ideally, this occurs at a single time, in our application's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" function. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" class provides this functionality automatically.\"), mdx(\"h2\", null, \"Table of Content\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#creation\"\n  }, \"Creation\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#success-values\"\n  }, \"Success Values\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#failure-values\"\n  }, \"Failure Values\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#from-values\"\n  }, \"From Values\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#option\"\n  }, \"Option\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#either\"\n  }, \"Either\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#try\"\n  }, \"Try\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#function\"\n  }, \"Function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#future\"\n  }, \"Future\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#promise\"\n  }, \"Promise\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fiber\"\n  }, \"Fiber\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#from-side-effects\"\n  }, \"From Side-Effects\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#synchronous\"\n  }, \"Synchronous\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#blocking-synchronous-side-effects\"\n  }, \"Blocking Synchronous Side-Effects\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#asynchronous\"\n  }, \"Asynchronous\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#creating-suspended-effects\"\n  }, \"Creating Suspended Effects\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#mapping\"\n  }, \"Mapping\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#map\"\n  }, \"map\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#maperror\"\n  }, \"mapError\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#mapeffect\"\n  }, \"mapEffect\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#zipping\"\n  }, \"Zipping\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#zipleft-and-zipright\"\n  }, \"zipLeft and zipRight\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#chaining\"\n  }, \"Chaining\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#parallelism\"\n  }, \"Parallelism\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#racing\"\n  }, \"Racing\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#timeout\"\n  }, \"Timeout\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#resource-management\"\n  }, \"Resource Management\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#finalizing\"\n  }, \"Finalizing\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#asynchronous-try--finally\"\n  }, \"Asynchronous Try / Finally\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#unstoppable-finalizers\"\n  }, \"Unstoppable Finalizers\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#brackets\"\n  }, \"Brackets\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#unswallowed-exceptions\"\n  }, \"Unswallowed Exceptions\"))), mdx(\"h2\", null, \"Creation\"), mdx(\"p\", null, \"In this section we explore some of the common ways to create ZIO effects from values, from common Scala types, and from both synchronous and asynchronous side-effects. Here is the summary list of them:\"), mdx(\"h3\", null, \"Success Values\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"succeed\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[A]\"))))), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.succeed\"), \" method, we can create an effect that succeeds with the specified value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val s1 = ZIO.succeed(42)\\n\")), mdx(\"p\", null, \"We can also use methods in the companion objects of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" type aliases:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val s2: Task[Int] = Task.succeed(42)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"Note:\")), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeed\"), \" vs. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectTotal\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeed\"), \" is nothing different than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectTotal\"), \" they are the same but for different purposes for clarity. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeed\"), \" method takes a by-name parameter to make sure that any accidental side effects from constructing the value can be properly managed by the ZIO Runtime. However, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeed\"), \" is intended for values which do not have any side effects. If we know that our value does have side effects, we should consider using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effectTotal\"), \" for clarity.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val now = ZIO.effectTotal(System.currentTimeMillis())\\n\")), mdx(\"p\", null, \"The value inside a successful effect constructed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effectTotal\"), \" will only be constructed if absolutely required.\"), mdx(\"h3\", null, \"Failure Values\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fail\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, Nothing]\"))))), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fail\"), \" method, we can create an effect that models failure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val f1 = ZIO.fail(\\\"Uh oh!\\\")\\n\")), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type, there is no restriction on the error type. We may use strings, exceptions, or custom data types appropriate for our application.\"), mdx(\"p\", null, \"Many applications will model failures with classes that extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Exception\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val f2 = Task.fail(new Exception(\\\"Uh oh!\\\"))\\n\")), mdx(\"p\", null, \"Note that unlike the other effect companion objects, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO\"), \" companion object does not have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO.fail\"), \", because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UIO\"), \" values cannot fail.\"), mdx(\"h3\", null, \"From Values\"), mdx(\"p\", null, \"ZIO contains several constructors which help us to convert various data types into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effect.\"), mdx(\"h4\", null, \"Option\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromOption\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Option[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[Option[Nothing], A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"some\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[Option[A]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"none\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[Option[Nothing]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"getOrFail\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Option[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Task[A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"getOrFailUnit\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Option[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[Unit, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"getOrFailWith\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"e:=> E, v:=> Option[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, A]\"))))), mdx(\"p\", null, \"An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option\"), \" can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromOption\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zoption: IO[Option[Nothing], Int] = ZIO.fromOption(Some(2))\\n\")), mdx(\"p\", null, \"The error type of the resulting effect is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option[Nothing]\"), \", which provides no information on why the value is not there. We can change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option[Nothing]\"), \" into a more specific error type using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#mapError\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zoption2: IO[String, Int] = zoption.mapError(_ => \\\"It wasn't there!\\\")\\n\")), mdx(\"p\", null, \"We can also readily compose it with other operators while preserving the optional nature of the result (similar to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OptionT\"), \")\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val maybeId: IO[Option[Nothing], String] = ZIO.fromOption(Some(\\\"abc123\\\"))\\ndef getUser(userId: String): IO[Throwable, Option[User]] = ???\\ndef getTeam(teamId: String): IO[Throwable, Team] = ???\\n\\n\\nval result: IO[Throwable, Option[(User, Team)]] = (for {\\n  id   <- maybeId\\n  user <- getUser(id).some\\n  team <- getTeam(user.teamId).asSomeError \\n} yield (user, team)).optional \\n\")), mdx(\"h4\", null, \"Either\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromEither\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Either[E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"left\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[Either[A, Nothing]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[Either[Nothing, B]]\"))))), mdx(\"p\", null, \"An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either\"), \" can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromEither\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zeither = ZIO.fromEither(Right(\\\"Success!\\\"))\\n\")), mdx(\"p\", null, \"The error type of the resulting effect will be whatever type the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Left\"), \" case has, while the success type will be whatever type the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Right\"), \" case has.\"), mdx(\"h4\", null, \"Try\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromTry\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"scala.util.Try[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Task[A]\"))))), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Try\"), \" value can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromTry\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scala.util.Try\\n\\nval ztry = ZIO.fromTry(Try(42 / 0))\\n\")), mdx(\"p\", null, \"The error type of the resulting effect will always be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \", because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Try\"), \" can only fail with values of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \".\"), mdx(\"h4\", null, \"Function\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFunction\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"R => A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"URIO[R, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFunctionM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"R => IO[E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))))), mdx(\"p\", null, \"A function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A => B\"), \" can be converted into a ZIO effect with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromFunction\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zfun: URIO[Int, Int] =\\n  ZIO.fromFunction((i: Int) => i * i)\\n\")), mdx(\"p\", null, \"The environment type of the effect is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" (the input type of the function), because in order to run the effect, it must be supplied with a value of this type.\"), mdx(\"h4\", null, \"Future\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFuture\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ExecutionContext => scala.concurrent.Future[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Task[A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFutureJava\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"java.util.concurrent.Future[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[Blocking, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFunctionFuture\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"R => scala.concurrent.Future[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[R, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFutureInterrupt\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ExecutionContext => scala.concurrent.Future[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Task[A]\"))))), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromFuture\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scala.concurrent.Future\\n\\nlazy val future = Future.successful(\\\"Hello!\\\")\\n\\nval zfuture: Task[String] =\\n  ZIO.fromFuture { implicit ec =>\\n    future.map(_ => \\\"Goodbye!\\\")\\n  }\\n\")), mdx(\"p\", null, \"The function passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fromFuture\"), \" is passed an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecutionContext\"), \", which allows ZIO to manage where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" runs (of course, we can ignore this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecutionContext\"), \").\"), mdx(\"p\", null, \"The error type of the resulting effect will always be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \", because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" can only fail with values of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \".\"), mdx(\"h4\", null, \"Promise\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromPromiseScala\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"scala.concurrent.Promise[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Task[A]\"))))), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \" can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromPromiseScala\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val func: String => String = s => s.toUpperCase\\nfor {\\n  promise <- ZIO.succeed(scala.concurrent.Promise[String]())\\n  _ <- ZIO.effect {\\n    Try(func(\\\"hello world from future\\\")) match {\\n      case Success(value) => promise.success(value)\\n      case Failure(exception) => promise.failure(exception)\\n    }\\n  }.fork\\n  value <- ZIO.fromPromiseScala(promise)\\n  _ <- putStrLn(s\\\"Hello World in UpperCase: $value\\\")\\n} yield ()\\n\")), mdx(\"h4\", null, \"Fiber\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFiber\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Fiber[E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromFiberM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, Fiber[E, A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"IO[E, A]\"))))), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fiber\"), \" can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.fromFiber\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val io: IO[Nothing, String] = ZIO.fromFiber(Fiber.succeed(\\\"Hello From Fiber!\\\"))\\n\")), mdx(\"h3\", null, \"From Side-Effects\"), mdx(\"p\", null, \"ZIO can convert both synchronous and asynchronous side-effects into ZIO effects (pure values).\"), mdx(\"p\", null, \"These functions can be used to wrap procedural code, allowing us to seamlessly use all features of ZIO with legacy Scala and Java code, as well as third-party libraries.\"), mdx(\"h4\", null, \"Synchronous\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Note\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectTotal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"UIO[A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Imports a total synchronous effect\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effect\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Task\", \"[A]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Imports a (partial) synchronous side-effect\")))), mdx(\"p\", null, \"A synchronous side-effect can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effect\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scala.io.StdIn\\n\\nval getStrLine: Task[String] =\\n  ZIO.effect(StdIn.readLine())\\n\")), mdx(\"p\", null, \"The error type of the resulting effect will always be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \", because side-effects may throw exceptions with any value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Throwable\"), \". \"), mdx(\"p\", null, \"If a given side-effect is known to not throw any exceptions, then the side-effect can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effectTotal\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def putStrLine(line: String): UIO[Unit] =\\n  ZIO.effectTotal(println(line))\\n\\nval effectTotalTask: UIO[Long] =\\n  ZIO.effectTotal(System.nanoTime())\\n\")), mdx(\"p\", null, \"We should be careful when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effectTotal\"), \"\\u2014when in doubt about whether or not a side-effect is total, prefer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effect\"), \" to convert the effect.\"), mdx(\"p\", null, \"If this is too broad, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"refineOrDie\"), \" method of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" may be used to retain only certain types of exceptions, and to die on any other types of exceptions:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import java.io.IOException\\n\\nval getStrLn2: IO[IOException, String] =\\n  ZIO.effect(StdIn.readLine()).refineToOrDie[IOException]\\n\")), mdx(\"h5\", null, \"Blocking Synchronous Side-Effects\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"blocking\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectBlocking\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[Blocking, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectBlockingCancelable\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effect: => A\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"cancel: UIO[Unit]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[Blocking, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectBlockingInterrupt\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[Blocking, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectBlockingIO\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[Blocking, IOException, A]\"))))), mdx(\"p\", null, \"Some side-effects use blocking IO or otherwise put a thread into a waiting state. If not carefully managed, these side-effects can deplete threads from our application's main thread pool, resulting in work starvation.\"), mdx(\"p\", null, \"ZIO provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.blocking\"), \" package, which can be used to safely convert such blocking side-effects into ZIO effects.\"), mdx(\"p\", null, \"A blocking side-effect can be converted directly into a ZIO effect blocking with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectBlocking\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.blocking._\\n\\nval sleeping =\\n  effectBlocking(Thread.sleep(Long.MaxValue))\\n\")), mdx(\"p\", null, \"The resulting effect will be executed on a separate thread pool designed specifically for blocking effects.\"), mdx(\"p\", null, \"Blocking side-effects can be interrupted by invoking \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Thread.interrupt\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectBlockingInterrupt\"), \" method.\"), mdx(\"p\", null, \"Some blocking side-effects can only be interrupted by invoking a cancellation effect. We can convert these side-effects using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectBlockingCancelable\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import java.net.ServerSocket\\nimport zio.UIO\\n\\ndef accept(l: ServerSocket) =\\n  effectBlockingCancelable(l.accept())(UIO.effectTotal(l.close()))\\n\")), mdx(\"p\", null, \"If a side-effect has already been converted into a ZIO effect, then instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectBlocking\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blocking\"), \" method can be used to ensure the effect will be executed on the blocking thread pool:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import scala.io.{ Codec, Source }\\n\\ndef download(url: String) =\\n  Task.effect {\\n    Source.fromURL(url)(Codec.UTF8).mkString\\n  }\\n\\ndef safeDownload(url: String) =\\n  blocking(download(url))\\n\")), mdx(\"h4\", null, \"Asynchronous\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectAsync\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(ZIO[R, E, A] => Unit) => Any\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectAsyncM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(ZIO[R, E, A] => Unit) => ZIO[R, E, Any]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectAsyncMaybe\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(ZIO[R, E, A] => Unit) => Option[ZIO[R, E, A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectAsyncInterrupt\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(ZIO[R, E, A] => Unit) => Either[Canceler[R], ZIO[R, E, A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))))), mdx(\"p\", null, \"An asynchronous side-effect with a callback-based API can be converted into a ZIO effect using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.effectAsync\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object legacy {\\n  def login(\\n    onSuccess: User => Unit,\\n    onFailure: AuthError => Unit): Unit = ???\\n}\\n\\nval login: IO[AuthError, User] =\\n  IO.effectAsync[AuthError, User] { callback =>\\n    legacy.login(\\n      user => callback(IO.succeed(user)),\\n      err  => callback(IO.fail(err))\\n    )\\n  }\\n\")), mdx(\"p\", null, \"Asynchronous ZIO effects are much easier to use than callback-based APIs, and they benefit from ZIO features like interruption, resource-safety, and superior error handling.\"), mdx(\"h3\", null, \"Creating Suspended Effects\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectSuspend\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[R, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[R, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectSuspendTotal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectSuspendTotalWith\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(Platform, Fiber.Id) => ZIO[R, E, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"effectSuspendWith\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(Platform, Fiber.Id) => RIO[R, A]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"RIO[R, A]\"))))), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIO[R, A]\"), \" effect can be suspended using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effectSuspend\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val suspendedEffect: RIO[Any, ZIO[Console, IOException, Unit]] =\\n  ZIO.effectSuspend(ZIO.effect(putStrLn(\\\"Suspended Hello World!\\\")))\\n\")), mdx(\"h2\", null, \"Mapping\"), mdx(\"h3\", null, \"map\"), mdx(\"p\", null, \"We can change an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO[E, A]\"), \" to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO[E, B]\"), \" by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" method with a function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A => B\"), \". This lets us transform values produced by actions into other values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.{ UIO, IO }\\n\\nval mappedValue: UIO[Int] = IO.succeed(21).map(_ * 2)\\n\")), mdx(\"h3\", null, \"mapError\"), mdx(\"p\", null, \"We can transform an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO[E, A]\"), \" into an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IO[E2, A]\"), \" by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapError\"), \" method with a function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E => E2\"), \".  This lets us transform the failure values of effects:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val mappedError: IO[Exception, String] = \\n  IO.fail(\\\"No no!\\\").mapError(msg => new Exception(msg))\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"Note:\"))), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note that mapping over an effect's success or error channel does not change the success or failure of the effect, in the same way that mapping over an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either\"), \" does not change whether the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Left\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Right\"), \".\")), mdx(\"h3\", null, \"mapEffect\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapEffect\"), \" returns an effect whose success is mapped by the specified side-effecting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f\"), \" function, translating any thrown exceptions into typed failed effects.\"), mdx(\"p\", null, \"Converting literal \\\"Five\\\" String to Int by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toInt\"), \" is a side effecting because it will throws \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberFormatException\"), \" exception:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val task: RIO[Any, Int] = ZIO.succeed(\\\"hello\\\").mapEffect(_.toInt)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapEffect\"), \" converts an unchecked exception to a checked one by returning the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIO\"), \" effect.\"), mdx(\"h2\", null, \"Chaining\"), mdx(\"p\", null, \"We can execute two actions in sequence with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatMap\"), \" method. The second action may depend on the value produced by the first action.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val chainedActionsValue: UIO[List[Int]] = IO.succeed(List(1, 2, 3)).flatMap { list =>\\n  IO.succeed(list.map(_ + 1))\\n}\\n\")), mdx(\"p\", null, \"If the first effect fails, the callback passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatMap\"), \" will never be invoked, and the composed effect returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatMap\"), \" will also fail.\"), mdx(\"p\", null, \"In \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"any\"), \" chain of effects, the first failure will short-circuit the whole chain, just like throwing an exception will prematurely exit a sequence of statements.\"), mdx(\"p\", null, \"Because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type supports both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatMap\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \", we can use Scala's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"for comprehensions\"), \" to build sequential effects:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val program = \\n  for {\\n    _    <- putStrLn(\\\"Hello! What is your name?\\\")\\n    name <- getStrLn\\n    _    <- putStrLn(s\\\"Hello, ${name}, welcome to ZIO!\\\")\\n  } yield ()\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"For comprehensions\"), \" provide a more procedural syntax for composing chains of effects.\"), mdx(\"h2\", null, \"Zipping\"), mdx(\"p\", null, \"We can combine two effects into a single effect with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zip\"), \" method. The resulting effect succeeds with a tuple that contains the success values of both effects:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zipped: UIO[(String, Int)] = \\n  ZIO.succeed(\\\"4\\\").zip(ZIO.succeed(2))\\n\")), mdx(\"p\", null, \"Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zip\"), \" operates sequentially: the effect on the left side is executed before the effect on the right side.\"), mdx(\"p\", null, \"In any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zip\"), \" operation, if either the left or right-hand sides fail, then the composed effect will fail, because \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"both\"), \" values are required to construct the tuple.\"), mdx(\"h3\", null, \"zipLeft and zipRight\"), mdx(\"p\", null, \"Sometimes, when the success value of an effect is not useful (or example, it is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \"), it can be more convenient to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zipLeft\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zipRight\"), \" functions, which first perform a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zip\"), \", and then map over the tuple to discard one side or the other:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zipRight1 = \\n  putStrLn(\\\"What is your name?\\\").zipRight(getStrLn)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zipRight\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zipLeft\"), \" functions have symbolic aliases, known as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<*\"), \", respectively. Some developers find these operators easier to read:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zipRight2 = \\n  putStrLn(\\\"What is your name?\\\") *>\\n  getStrLn\\n\")), mdx(\"h2\", null, \"Parallelism\"), mdx(\"p\", null, \"ZIO provides many operations for performing effects in parallel. These methods are all named with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Par\"), \" suffix that helps us identify opportunities to parallelize our code.\"), mdx(\"p\", null, \"For example, the ordinary \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#zip\"), \" method zips two effects together, sequentially. But there is also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#zipPar\"), \" method, which zips two effects together in parallel.\"), mdx(\"p\", null, \"The following table summarizes some of the sequential operations and their corresponding parallel versions:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Sequential\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Parallel\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Zips two effects into one\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zip\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Zips two effects into one\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipWith\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#zipWithPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Collects from many effects\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.collectAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.collectAllPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Effectfully loop over values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.foreach\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.foreachPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Reduces many values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.reduceAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.reduceAllPar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"Merges many values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.mergeAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.mergeAllPar\"))))), mdx(\"p\", null, \"For all the parallel operations, if one effect fails, then others will be interrupted, to minimize unnecessary computation.\"), mdx(\"p\", null, \"If the fail-fast behavior is not desired, potentially failing effects can be first converted into infallible effects using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#either\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#option\"), \" methods.\"), mdx(\"h3\", null, \"Racing\"), mdx(\"p\", null, \"ZIO lets us race multiple effects in parallel, returning the first successful result:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"for {\\n  winner <- IO.succeed(\\\"Hello\\\").race(IO.succeed(\\\"Goodbye\\\"))\\n} yield winner\\n\")), mdx(\"p\", null, \"If we want the first success or failure, rather than the first success, then we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left.either race right.either\"), \", for any effects \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \".\"), mdx(\"h2\", null, \"Timeout\"), mdx(\"p\", null, \"ZIO lets us timeout any effect using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#timeout\"), \" method, which returns a new effect that succeeds with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option\"), \". A value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \" indicates the timeout elapsed before the effect completed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.duration._\\n\\nIO.succeed(\\\"Hello\\\").timeout(10.seconds)\\n\")), mdx(\"p\", null, \"If an effect times out, then instead of continuing to execute in the background, it will be interrupted so no resources will be wasted.\"), mdx(\"h2\", null, \"Error Management\"), mdx(\"h3\", null, \"Either\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#either\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"URIO[R, Either[E, A]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO.absolve\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, Either[E, A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))))), mdx(\"p\", null, \"We can surface failures with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#either\"), \", which takes an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \" and produces an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, Nothing, Either[E, A]]\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val zeither: UIO[Either[String, Int]] = \\n  IO.fail(\\\"Uh oh!\\\").either\\n\")), mdx(\"p\", null, \"We can submerge failures with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.absolve\"), \", which is the opposite of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"either\"), \" and turns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, Nothing, Either[E, A]]\"), \" into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, E, A]\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def sqrt(io: UIO[Double]): IO[String, Double] =\\n  ZIO.absolve(\\n    io.map(value =>\\n      if (value < 0.0) Left(\\\"Value must be >= 0.0\\\")\\n      else Right(Math.sqrt(value))\\n    )\\n  )\\n\")), mdx(\"h3\", null, \"Catching\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchAll\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E => ZIO[R1, E2, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchAllCause\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Cause[E] => ZIO[R1, E2, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchAllDefect\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Throwable => ZIO[R1, E1, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E1, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchAllTrace\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"((E, Option[ZTrace])) => ZIO[R1, E2, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchSome\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"PartialFunction[E, ZIO[R1, E1, A1]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E1, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchSomeCause\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"PartialFunction[Cause[E], ZIO[R1, E1, A1]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E1, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchSomeDefect\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"PartialFunction[Throwable, ZIO[R1, E1, A1]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E1, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO#catchSomeTrace\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"PartialFunction[(E, Option[ZTrace]), ZIO[R1, E1, A1]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E1, A1]\"))))), mdx(\"h4\", null, \"Catching All Errors\"), mdx(\"p\", null, \"If we want to catch and recover from all types of errors and effectfully attempt recovery, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchAll\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val z: IO[IOException, Array[Byte]] = \\n  readFile(\\\"primary.json\\\").catchAll(_ => \\n    readFile(\\\"backup.json\\\"))\\n\")), mdx(\"p\", null, \"In the callback passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchAll\"), \", we may return an effect with a different error type (or perhaps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \"), which will be reflected in the type of effect returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchAll\"), \".\"), mdx(\"h4\", null, \"Catching Some Errors\"), mdx(\"p\", null, \"If we want to catch and recover from only some types of exceptions and effectfully attempt recovery, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchSome\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val data: IO[IOException, Array[Byte]] = \\n  readFile(\\\"primary.data\\\").catchSome {\\n    case _ : FileNotFoundException => \\n      readFile(\\\"backup.data\\\")\\n  }\\n\")), mdx(\"p\", null, \"Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchAll\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catchSome\"), \" cannot reduce or eliminate the error type, although it can widen the error type to a broader class of errors.\"), mdx(\"h3\", null, \"Fallback\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orElse\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orElseEither\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, B]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, Either[A, B]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orElseFail\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E1\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E1, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orElseOptional\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, Option[E1], A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, Option[E1], A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orElseSucceed\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"A1\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"URIO[R, A1]\"))))), mdx(\"p\", null, \"We can try one effect, or, if it fails, try another effect, with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"orElse\"), \" combinator:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val primaryOrBackupData: IO[IOException, Array[Byte]] = \\n  readFile(\\\"primary.data\\\").orElse(readFile(\\\"backup.data\\\"))\\n\")), mdx(\"h3\", null, \"Folding\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fold\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"failure: E => B, success: A => B\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"URIO[R, B]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"foldCause\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"failure: Cause[E] => B, success: A => B\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"URIO[R, B]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"foldM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"failure: E => ZIO[R1, E2, B], success: A => ZIO[R1, E2, B]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, B]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"foldCauseM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"failure: Cause[E] => ZIO[R1, E2, B], success: A => ZIO[R1, E2, B]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, B]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"foldTraceM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"failure: ((E, Option[ZTrace])) => ZIO[R1, E2, B], success: A => ZIO[R1, E2, B]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E2, B]\"))))), mdx(\"p\", null, \"Scala's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either\"), \" data types have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fold\"), \", which let us handle both failure and success at the same time. In a similar fashion, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" effects also have several methods that allow us to handle both failure and success.\"), mdx(\"p\", null, \"The first fold method, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fold\"), \", lets us non-effectfully handle both failure and success, by supplying a non-effectful handler for each case:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"lazy val DefaultData: Array[Byte] = Array(0, 0)\\n\\nval primaryOrDefaultData: UIO[Array[Byte]] = \\n  readFile(\\\"primary.data\\\").fold(\\n    _    => DefaultData,\\n    data => data)\\n\")), mdx(\"p\", null, \"The second fold method, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foldM\"), \", lets us effectfully handle both failure and success, by supplying an effectful (but still pure) handler for each case:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val primaryOrSecondaryData: IO[IOException, Array[Byte]] = \\n  readFile(\\\"primary.data\\\").foldM(\\n    _    => readFile(\\\"secondary.data\\\"),\\n    data => ZIO.succeed(data))\\n\")), mdx(\"p\", null, \"Nearly all error handling methods are defined in terms of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foldM\"), \", because it is both powerful and fast.\"), mdx(\"p\", null, \"In the following example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foldM\"), \" is used to handle both failure and success of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readUrls\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val urls: UIO[Content] =\\n  readUrls(\\\"urls.json\\\").foldM(\\n    error   => IO.succeed(NoContent(error)), \\n    success => fetchContent(success)\\n  )\\n\")), mdx(\"h3\", null, \"Retrying\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Output Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retry\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Schedule[R1, E, S]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1 with Clock, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryN\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"n: Int\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryOrElse\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"policy: Schedule[R1, E, S], orElse: (E, S) => ZIO[R1, E1, A1]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1 with Clock, E1, A1]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryOrElseEither\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"schedule: Schedule[R1, E, Out], orElse: (E, Out) => ZIO[R1, E1, B]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1 with Clock, E1, Either[B, A]]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryUntil\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E => Boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryUntilEquals\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E1\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E1, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryUntilM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E => URIO[R1, Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryWhile\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E => Boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryWhileEquals\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E1\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R, E1, A]\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retryWhileM\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"E => URIO[R1, Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ZIO[R1, E, A]\"))))), mdx(\"p\", null, \"When we are building applications we want to be resilient in the face of a transient failure. This is where we need to retry to overcome these failures.\"), mdx(\"p\", null, \"There are a number of useful methods on the ZIO data type for retrying failed effects. \"), mdx(\"p\", null, \"The most basic of these is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#retry\"), \", which takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Schedule\"), \" and returns a new effect that will retry the first effect if it fails, according to the specified policy:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.clock._\\n\\nval retriedOpenFile: ZIO[Clock, IOException, Array[Byte]] = \\n  readFile(\\\"primary.data\\\").retry(Schedule.recurs(5))\\n\")), mdx(\"p\", null, \"The next most powerful function is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#retryOrElse\"), \", which allows specification of a fallback to use, if the effect does not succeed with the specified policy:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"readFile(\\\"primary.data\\\").retryOrElse(\\n  Schedule.recurs(5), \\n  (_, _:Long) => ZIO.succeed(DefaultData)\\n)\\n\")), mdx(\"p\", null, \"The final method, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#retryOrElseEither\"), \", allows returning a different type for the fallback.\"), mdx(\"h2\", null, \"Resource Management\"), mdx(\"p\", null, \"ZIO's resource management features work across synchronous, asynchronous, concurrent, and other effect types, and provide strong guarantees even in the presence of failure, interruption, or defects in the application.\"), mdx(\"h3\", null, \"Finalizing\"), mdx(\"p\", null, \"Scala has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" construct which helps us to make sure we don't leak resources because no matter what happens in the try, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" block will be executed. So we can open files in the try block, and then we can close them in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" block, and that gives us the guarantee that we will not leak resources.\"), mdx(\"h4\", null, \"Asynchronous Try / Finally\"), mdx(\"p\", null, \"The problem with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" construct is that it only applies with synchronous code, they don't work for asynchronous code. ZIO gives us a method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \" that works with either synchronous or asynchronous actions. So we have a functional try/finally but across the async region of our code, also our finalizer could have async regions.\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \" operation guarantees that if an effect begins executing and then terminates (for whatever reason), then the finalizer will begin executing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val finalizer = \\n  UIO.effectTotal(println(\\\"Finalizing!\\\"))\\n// finalizer: UIO[Unit] = zio.ZIO$EffectTotal@1d6075e\\n\\nval finalized: IO[String, Unit] = \\n  IO.fail(\\\"Failed!\\\").ensuring(finalizer)\\n// finalized: IO[String, Unit] = zio.ZIO$CheckInterrupt@25aa24ac\\n\")), mdx(\"p\", null, \"The finalizer is not allowed to fail, which means that it must handle any errors internally.\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", finalizers can be nested, and the failure of any inner finalizer will not affect outer finalizers. Nested finalizers will be executed in reverse order, and linearly (not in parallel).\"), mdx(\"p\", null, \"Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \" works across all types of effects, including asynchronous and concurrent effects.\"), mdx(\"p\", null, \"Here is another example of ensuring that our clean-up action called before our effect is done:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.Task\\nvar i: Int = 0\\nval action: Task[String] =\\n  Task.effectTotal(i += 1) *>\\n    Task.fail(new Throwable(\\\"Boom!\\\"))\\nval cleanupAction: UIO[Unit] = UIO.effectTotal(i -= 1)\\nval composite = action.ensuring(cleanupAction)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"_\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \"\\nFinalizers offer very powerful guarantees, but they are low-level, and should generally not be used for releasing resources. For higher-level logic built on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ensuring\"), \", see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#bracket\"), \" on the bracket section.\")), mdx(\"h4\", null, \"Unstoppable Finalizers\"), mdx(\"p\", null, \"In Scala when we nest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" finalizers, they cannot be stopped. If we have nested finalizers and one of them fails for some sort of catastrophic reason the ones on the outside will still be run and in the correct order. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"try {\\n  try {\\n    try {\\n      ...\\n    } finally f1\\n  } finally f2\\n} finally f3\\n\")), mdx(\"p\", null, \"Also in ZIO like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \", the finalizers are unstoppable. This means if we have a buggy finalizer, and it is going to leak some resources that unfortunately happens, we will leak the minimum amount of resources because all other finalizers will be run in the correct order.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val io = ???\\nio.ensuring(f1)\\n .ensuring(f2)\\n .ensuring(f3)\\n\")), mdx(\"h3\", null, \"Brackets\"), mdx(\"p\", null, \"In Scala the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" is often used to manage resources. A common use for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \" is safely acquiring and releasing resources, such as new socket connections or opened files:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val handle = openFile(name)\\n\\ntry {\\n  processFile(handle)\\n} finally closeFile(handle)\\n\")), mdx(\"p\", null, \"ZIO encapsulates this common pattern with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO#bracket\"), \", which allows us to specify an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"acquire\"), \" effect, which acquires a resource; a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"release\"), \" effect, which releases it; and a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"use\"), \" effect, which uses the resource. Bracket lets us open a file and close the file and no matter what happens when we are using that resource.\"), mdx(\"p\", null, \"The release action is guaranteed to be executed by the runtime system, even if the utilize action throws an exception or the executing fiber is interrupted.\"), mdx(\"p\", null, \"Brackets are a built-in primitive that let us safely acquire and release resources. They are used for a similar purpose as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try/catch/finally\"), \", only brackets work with synchronous and asynchronous actions, work seamlessly with fiber interruption, and are built on a different error model that ensures no errors are ever swallowed.\"), mdx(\"p\", null, \"Brackets consist of an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"acquire\"), \" action, a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"utilize\"), \" action (which uses the acquired resource), and a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"release\"), \" action.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.{ UIO, IO }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val groupedFileData: IO[IOException, Unit] = openFile(\\\"data.json\\\").bracket(closeFile(_)) { file =>\\n  for {\\n    data    <- decodeData(file)\\n    grouped <- groupData(data)\\n  } yield grouped\\n}\\n\")), mdx(\"p\", null, \"Brackets have compositional semantics, so if a bracket is nested inside another bracket, and the outer bracket acquires a resource, then the outer bracket's release will always be called, even if, for example, the inner bracket's release fails.\"), mdx(\"p\", null, \"Let's look at a full working example on using brackets:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.{ ExitCode, Task, UIO }\\nimport java.io.{ File, FileInputStream }\\nimport java.nio.charset.StandardCharsets\\n\\nobject Main extends App {\\n\\n  // run my bracket\\n  def run(args: List[String]) =\\n    mybracket.orDie.as(ExitCode.success)\\n\\n  def closeStream(is: FileInputStream) =\\n    UIO(is.close())\\n\\n  // helper method to work around in Java 8\\n  def readAll(fis: FileInputStream, len: Long): Array[Byte] = {\\n    val content: Array[Byte] = Array.ofDim(len.toInt)\\n    fis.read(content)\\n    content\\n  }\\n\\n  def convertBytes(is: FileInputStream, len: Long) =\\n    Task.effect(println(new String(readAll(is, len), StandardCharsets.UTF_8))) // Java 8\\n  //Task.effect(println(new String(is.readAllBytes(), StandardCharsets.UTF_8))) // Java 11+\\n\\n  // mybracket is just a value. Won't execute anything here until interpreted\\n  val mybracket: Task[Unit] = for {\\n    file   <- Task(new File(\\\"/tmp/hello\\\"))\\n    len    = file.length\\n    string <- Task(new FileInputStream(file)).bracket(closeStream)(convertBytes(_, len))\\n  } yield string\\n}\\n\")), mdx(\"h2\", null, \"Unswallowed Exceptions\"), mdx(\"p\", null, \"The Java and Scala error models are broken. Because if we have the right combinations of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finally\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \"es we can actually throw many exceptions, and then we are only able to catch one of them. All the other ones are lost. They are swallowed into a black hole, and also the one that we catch is the wrong one. It is not the primary cause of the failure. \"), mdx(\"p\", null, \"In the following example, we are going to show this behavior:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \" try {\\n    try throw new Error(\\\"e1\\\")\\n    finally throw new Error(\\\"e2\\\")\\n } catch {\\n   case e: Error => println(e) \\n }\\n\")), mdx(\"p\", null, \"The above program just prints the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e2\"), \", which is lossy and, also is not the primary cause of failure.\"), mdx(\"p\", null, \"But in the ZIO version, all the errors will still be reported. So even though we are only able to catch one error, the other ones will be reported which we have full control over them. They don't get lost.\"), mdx(\"p\", null, \"Let's write a ZIO version:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"IO.fail(\\\"e1\\\")\\n  .ensuring(IO.effectTotal(throw new Exception(\\\"e2\\\")))\\n  .catchAll {\\n    case \\\"e1\\\" => putStrLn(\\\"e1\\\")\\n    case \\\"e2\\\" => putStrLn(\\\"e2\\\")\\n  }\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/core/zio.md"}},"staticQueryHashes":[]}