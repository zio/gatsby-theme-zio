{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/core/urio","result":{"data":{"mdx":{"id":"430e44a1-166a-5ff8-b2a5-08d9ab2963da","slug":"datatypes/core/urio","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"urio\",\n  \"title\": \"URIO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URIO[R, A]\"), \" is a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, Nothing, A]\"), \", which represents an effect that requires an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", and cannot fail, but can succeed with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note:\"))), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In Scala, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"type alias\"), \" is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design.\")), mdx(\"p\", null, \"Let's see how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URIO\"), \" type alias is defined:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"type URIO[-R, +A] = ZIO[R, Nothing, A]\\n\")), mdx(\"p\", null, \"So the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URIO\"), \" just equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" which requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" and cannot fail because in the Scala the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \" type has no inhabitant, we can't create an instance of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nothing\"), \". It succeeds with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \".\"), mdx(\"p\", null, \"In following example, the type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"putStrLn\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URIO[Console, Unit]\"), \" which means, it requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console\"), \" service as an environment, and it succeeds with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unit\"), \" value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def putStrLn(line: => String): ZIO[Console, IOException, Unit] =\\n  ZIO.accessM(_.get putStrLn line)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Principle of The Least Power\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" type, specific for a less powerful workflow. \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So there is no need to convert type aliases to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type, whenever the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO\"), \" data type is required, we can use the most precise type alias to fit our workflow requirement.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/core/urio.md"}},"staticQueryHashes":[]}