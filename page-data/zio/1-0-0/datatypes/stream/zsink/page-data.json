{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/stream/zsink","result":{"data":{"mdx":{"id":"70c9e041-8ef4-5102-9dac-a1f06f876314","slug":"datatypes/stream/zsink","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zsink\",\n  \"title\": \"ZSink\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink[R, E, I, L, Z]\"), \" is used to consume elements produced by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream\"), \". You can think of a sink as a function that will consume a variable amount of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I\"), \" elements (could be 0, 1, or many!), might fail with an error of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"E\"), \", and will eventually yield a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Z\"), \" together with a remainder of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"L\"), \" as leftover.\"), mdx(\"p\", null, \"To consume a stream using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" we can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream#run\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.stream._\\n\\nval stream = ZStream.fromIterable(1 to 1000)\\nval sink   = ZSink.sum[Int]\\nval sum    = stream.run(sink)\\n\")), mdx(\"h2\", null, \"Creating sinks\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.stream\"), \" provides numerous kinds of sinks to use.\"), mdx(\"h3\", null, \"Common Constructors\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.head\"), \" \\u2014 It creates a sink containing the first element, returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \" for empty streams:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink: ZSink[Any, Nothing, Int, Int, Option[Int]] = ZSink.head[Int]\\nval head: ZIO[Any, Nothing, Option[Int]]             = ZStream(1, 2, 3, 4).run(sink)\\n// Result: Some(1)\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.last\"), \" \\u2014 It consumes all elements of a stream and returns the last element of the stream:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink: ZSink[Any, Nothing, Int, Nothing, Option[Int]] = ZSink.last[Int]\\nval last: ZIO[Any, Nothing, Option[Int]]                 = ZStream(1, 2, 3, 4).run(sink)\\n// Result: Some(4)\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.count\"), \" \\u2014 A sink that consumes all elements of the stream and counts the number of elements fed to it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink : ZSink[Any, Nothing, Int, Nothing, Int] = ZSink.sum[Int]\\nval count: ZIO[Any, Nothing, Int]                 = ZStream(1, 2, 3, 4, 5).run(sink)\\n// Result: 5\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.sum\"), \" \\u2014 A sink that consumes all elements of the stream and sums incoming numeric values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink : ZSink[Any, Nothing, Int, Nothing, Int] = ZSink.sum[Int]\\nval sum: ZIO[Any, Nothing, Int]                 = ZStream(1, 2, 3, 4, 5).run(sink)\\n// Result: 15\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.take\"), \" \\u2014 A sink that takes the specified number of values and result in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chunk\"), \" data type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink  : ZSink[Any, Nothing, Int, Int, Chunk[Int]] = ZSink.take[Int](3)\\nval stream: ZIO[Any, Nothing, Chunk[Int]]             = ZStream(1, 2, 3, 4, 5).run(sink)\\n// Result: Chunk(1, 2, 3)\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.drain\"), \" \\u2014 A sink that ignores its inputs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val drain: ZSink[Any, Nothing, Any, Nothing, Unit] = ZSink.drain\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.timed\"), \" \\u2014 A sink that executes the stream and times its execution:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val timed: ZSink[Clock, Nothing, Any, Nothing, Duration] = ZSink.timed\\nval stream: ZIO[Clock, Nothing, Long] =\\n  ZStream(1, 2, 3, 4, 5).fixed(2.seconds).run(timed).map(_.getSeconds)\\n// Result: 10\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ZSink.foreach\"), \" \\u2014 A sink that executes the provided effectful function for every element fed to it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val printer: ZSink[Console, IOException, Int, Int, Unit] =\\n  ZSink.foreach((i: Int) => zio.console.putStrLn(i.toString))\\nval stream : ZIO[Console, IOException, Unit]             =\\n  ZStream(1, 2, 3, 4, 5).run(printer)\\n\")), mdx(\"h3\", null, \"From Success and Failure\"), mdx(\"p\", null, \"Similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream\"), \" data type, we can create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeed\"), \" methods.\"), mdx(\"p\", null, \"A sink that doesn't consume any element of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" from its upstream and successes with a value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \" type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val succeed: ZSink[Any, Nothing, String, String, Int] = ZSink.succeed[String, Int](5)\\n\")), mdx(\"p\", null, \"A sink that doesn't consume any element of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \" from its upstream and intentionally fails with a message of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val failed : ZSink[Any, String, Int, Int, Nothing] = ZSink.fail[String, Int](\\\"fail!\\\")\\n\")), mdx(\"h3\", null, \"Collecting\"), mdx(\"p\", null, \"To create a sink that collects all elements of a stream into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chunk[A]\"), \", we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.collectAll\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val stream    : UStream[Int]    = UStream(1, 2, 3, 4, 5)\\nval collection: UIO[Chunk[Int]] = stream.run(ZSink.collectAll[Int])\\n// Output: Chunk(1, 2, 3, 4, 5)\\n\")), mdx(\"p\", null, \"We can collect all elements into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val collectAllToSet: ZSink[Any, Nothing, Int, Nothing, Set[Int]] = ZSink.collectAllToSet[Int]\\nval stream: ZIO[Any, Nothing, Set[Int]] = ZStream(1, 3, 2, 3, 1, 5, 1).run(collectAllToSet)\\n// Output: Set(1, 3, 2, 5)\\n\")), mdx(\"p\", null, \"Or we can collect and merge them into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map[K, A]\"), \" using a merge function. In the following example, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(_:Int) % 3\"), \" to determine map keys and, we provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_ + _\"), \" function to merge multiple elements with the same key:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val collectAllToMap: ZSink[Any, Nothing, Int, Nothing, Map[Int, Int]] = ZSink.collectAllToMap((_: Int) % 3)(_ + _)\\nval stream: ZIO[Any, Nothing, Map[Int, Int]] = ZStream(1, 3, 2, 3, 1, 5, 1).run(collectAllToMap)\\n// Output: Map(1 -> 3, 0 -> 6, 2 -> 7)\\n\")), mdx(\"h3\", null, \"Folding\"), mdx(\"p\", null, \"Basic fold accumulation of received elements:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"ZSink.foldLeft[Int, Int](0)(_ + _)\\n\")), mdx(\"p\", null, \"A fold with short-circuiting has a termination predicate that determines the end of the folding process:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"ZStream.iterate(0)(_ + 1).run(\\n  ZSink.fold(0)(sum => sum <= 10)((acc, n: Int) => acc + n)\\n)\\n// Output: 15\\n\")), mdx(\"h3\", null, \"From Effect\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromEffect\"), \" creates a single-value sink produced from an effect:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val sink = ZSink.fromEffect(ZIO.succeed(1))\\n\")), mdx(\"h3\", null, \"From File\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromFile\"), \" creates a file sink that consumes byte chunks and writes them to the specified file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fileSink(path: Path): ZSink[Blocking, Throwable, String, Byte, Long] =\\n  ZSink\\n    .fromFile(path)\\n    .contramapChunks[String](_.flatMap(_.getBytes))\\n\\nval result = ZStream(\\\"Hello\\\", \\\"ZIO\\\", \\\"World!\\\")\\n  .intersperse(\\\"\\\\n\\\")\\n  .run(fileSink(Paths.get(\\\"file.txt\\\")))\\n\")), mdx(\"h3\", null, \"From OutputStream\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromOutputStream\"), \" creates a sink that consumes byte chunks and write them to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OutputStream\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"ZStream(\\\"Application\\\", \\\"Error\\\", \\\"Logs\\\")\\n  .intersperse(\\\"\\\\n\\\")\\n  .run(\\n    ZSink\\n      .fromOutputStream(System.err)\\n      .contramapChunks[String](_.flatMap(_.getBytes))\\n  )\\n\")), mdx(\"h3\", null, \"From Queue\"), mdx(\"p\", null, \"A queue has a finite or infinite buffer size, so they are useful in situations where we need to consume streams as fast as we can, and then do some batching operations on consumed messages. By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromQueue\"), \" we can create a sink that is backed by a queue; it enqueues each element into the specified queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val myApp: ZIO[Console with Clock, IOException, Unit] =\\n  for {\\n    queue    <- ZQueue.bounded[Int](32)\\n    producer <- ZStream\\n      .iterate(1)(_ + 1)\\n      .fixed(200.millis)\\n      .run(ZSink.fromQueue(queue))\\n      .fork\\n    consumer <- queue.take.flatMap(x => putStrLn(x.toString)).forever\\n    _        <- producer.zip(consumer).join\\n  } yield ()\\n\")), mdx(\"h3\", null, \"From Hub\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hub\"), \" is an asynchronous data type in which publisher can publish their messages to that and subscribers can subscribe to take messages from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hub\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromHub\"), \" takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZHub\"), \" and returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" which publishes each element to that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZHub\"), \".\"), mdx(\"p\", null, \"In the following example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sink\"), \" consumes elements of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"producer\"), \" stream and publishes them to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hub\"), \". We have two consumers that are subscribed to that hub and they are taking its elements forever:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val myApp: ZIO[Console with Clock, IOException, Unit] =\\n  for {\\n    promise <- Promise.make[Nothing, Unit]\\n    hub <- ZHub.bounded[Int](1)\\n    sink <- ZIO.succeed(ZSink.fromHub(hub))\\n    producer <- ZStream.iterate(0)(_ + 1).fixed(1.seconds).run(sink).fork\\n    consumers <- hub.subscribe.zip(hub.subscribe).use { case (left, right) =>\\n      for {\\n        _ <- promise.succeed(())\\n        f1 <- left.take.flatMap(e => putStrLn(s\\\"Left Queue: $e\\\")).forever.fork\\n        f2 <- right.take.flatMap(e => putStrLn(s\\\"Right Queue: $e\\\")).forever.fork\\n        _ <- f1.zip(f2).join\\n      } yield ()\\n    }.fork\\n    _ <- promise.await\\n    _ <- producer.zip(consumers).join\\n  } yield ()\\n\")), mdx(\"h3\", null, \"From Push\"), mdx(\"p\", null, \"Before deepening into creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \" data-type, we need to learn more about the implementation details of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \". Note that this topic is for advanced users, and we do not require using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \" data-type to create ZIO sinks, most of the time.\"), mdx(\"h4\", null, \"ZSink's Encoding\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" is a wrapper data-type around \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"managed\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"abstract class ZSink[-R, +E, -I, +L, +Z] private (\\n    val push: ZManaged[R, Nothing, ZSink.Push[R, E, I, L, Z]]\\n) \\n\\nobject ZSink {\\n  type Push[-R, +E, -I, +L, +Z] =\\n    Option[Chunk[I]] => ZIO[R, (Either[E, Z], Chunk[L]), Unit]\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \" is a function from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option[Chunk[I]]\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO[R, (Either[E, Z], Chunk[L]), Unit]\"), \". We can create four different data-types using its smart constructors:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Push.more\"), \" \\u2014 Using this constructor we create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Push\"), \" data-type that requires more values to consume (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option[Chunk[I]] => UIO[Unit]\"), \"):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Push {\\n  val more: ZIO[Any, Nothing, Unit] = UIO.unit\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Push.emit\"), \" \\u2014 By providing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"z\"), \" (as an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"end\"), \" value) and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"leftover\"), \" arguments to this constructor we can create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Push\"), \" data-type describing a sink that ends with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"z\"), \" value and emits its leftovers (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option[Chunk[I]] => IO[(Right[Nothing, Z], Chunk[I]), Nothing]\"), \"):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Push {\\ndef emit[I, Z](\\n    z: Z,\\n    leftover: Chunk[I]\\n): IO[(Right[Nothing, Z], Chunk[I]), Nothing] =\\n  IO.fail((Right(z), leftover))\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Push.fail\"), \" \\u2014 By providing an error message and leftover to this constructor, we can create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Push\"), \" data-type describing a sink that fails with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"e\"), \" and emits the leftover (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option[Chunk[I]] => IO[(Left[E, Nothing], Chunk[I]), Nothing]\"), \"):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def fail[I, E](\\n    e: E,\\n    leftover: Chunk[I]\\n): IO[(Left[E, Nothing], Chunk[I]), Nothing] = \\n  IO.fail((Left(e), leftover))\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Push.halt\"), \" \\u2014 By providing a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cause\"), \" we can create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Push\"), \" data-type describing a sink that halts the process of consuming elements (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option[Chunk[I]] => ZIO[Any, (Left[E, Nothing], Chunk[Nothing]), Nothing]\"), \"):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def halt[E](\\n    c: Cause[E]\\n): ZIO[Any, (Left[E, Nothing], Chunk[Nothing]), Nothing] =\\n  IO.halt(c).mapError(e => (Left(e), Chunk.empty))\\n\")), mdx(\"p\", null, \"Now, we are ready to see how the existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.head\"), \" sink is implemented using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \" data-type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def head[I]: ZSink[Any, Nothing, I, I, Option[I]] =\\n  ZSink[Any, Nothing, I, I, Option[I]](ZManaged.succeed({\\n    case Some(ch) =>\\n      if (ch.isEmpty) { // If the chunk is empty, we require more elements\\n        Push.more\\n      } else {\\n        Push.emit(Some(ch.head), ch.drop(1))\\n      }\\n    case None => Push.emit(None, Chunk.empty)\\n  }))\\n\")), mdx(\"h4\", null, \"Creating ZSink using Push\"), mdx(\"p\", null, \"To create a ZSink using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Push\"), \" data-type, we should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fromPush\"), \" constructor. This constructor is implemented as below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object ZSink {\\n  def fromPush[R, E, I, L, Z](sink: Push[R, E, I, L, Z]): ZSink[R, E, I, L, Z] =\\n    ZSink(Managed.succeed(sink))\\n}\\n\")), mdx(\"p\", null, \"So nothing special, it just creates us a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" containing a managed push. \"), mdx(\"p\", null, \"Let's rewrite \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.succeed\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.fail\"), \" \\u2014 the two existing ZIO sinks \\u2014 using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fromPush\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def succeed[I, Z](z: => Z): ZSink[Any, Nothing, I, I, Z] =\\n  ZSink.fromPush[Any, Nothing, I, I, Z] { c =>\\n    val leftover = c.fold[Chunk[I]](Chunk.empty)(identity)\\n    Push.emit(z, leftover)\\n  }\\n  \\ndef fail[E, I](e: => E): ZSink[Any, E, I, I, Nothing] =\\n  ZSink.fromPush[Any, E, I, I, Nothing] { c =>\\n    val leftover = c.fold[Chunk[I]](Chunk.empty)(identity)\\n    Push.fail(e, leftover)\\n  }\\n\")), mdx(\"h2\", null, \"Operations\"), mdx(\"p\", null, \"Having created the sink, we can transform it with provided operations.\"), mdx(\"h3\", null, \"contramap\"), mdx(\"p\", null, \"Contramap is a simple combinator to change the domain of an existing function. While \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"map\"), \" changes the co-domain of a function, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"contramap\"), \" changes the domain of a function. So the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"contramap\"), \" takes a function and maps over its input.\"), mdx(\"p\", null, \"This is useful when we have a fixed output, and our existing function cannot consume those outputs. So we can use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"contramap\"), \" to create a new function that can consume that fixed output. Assume we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.sum\"), \" that sums incoming numeric values, but we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" values. We can convert the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink.sum\"), \" to a sink that can consume \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" values;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val numericSum: ZSink[Any, Nothing, Int, Nothing, Int]    = \\n  ZSink.sum[Int]\\nval stringSum : ZSink[Any, Nothing, String, Nothing, Int] = \\n  numericSum.contramap((x: String) => x.toInt)\\n\\nval sum: ZIO[Any, Nothing, Int] =\\n  ZStream(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\").run(stringSum)\\n// Output: 15\\n\")), mdx(\"h3\", null, \"dimap\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dimap\"), \" is an extended \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contramap\"), \" that additionally transforms sink's output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// Convert its input to integers, do the computation and then convert them back to a string\\nval sumSink: ZSink[Any, Nothing, String, Nothing, String] =\\n  numericSum.dimap[String, String](_.toInt, _.toString)\\n  \\nval sum: ZIO[Any, Nothing, String] =\\n  ZStream(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\").run(sumSink)\\n// Output: 15\\n\")), mdx(\"h2\", null, \"Concurrency and Parallelism\"), mdx(\"h3\", null, \"Parallel Zipping\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZStream\"), \", two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink\"), \" can be zipped together. Both of them will be run in parallel, and their results will be combined in a tuple:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val kafkaSink: ZSink[Any, Throwable, Record, Record, Unit] =\\n  ZSink.foreach[Any, Throwable, Record](record => ZIO.effect(???))\\n\\nval pulsarSink: ZSink[Any, Throwable, Record, Record, Unit] =\\n  ZSink.foreach[Any, Throwable, Record](record => ZIO.effect(???))\\n\\nval stream: ZSink[Any, Throwable, Record, Record, (Unit, Unit)] =\\n  kafkaSink zipPar pulsarSink \\n\")), mdx(\"h3\", null, \"Racing\"), mdx(\"p\", null, \"We are able to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"race\"), \" multiple sinks, they will run in parallel, and the one that wins will provide the result of our program:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val stream: ZSink[Any, Throwable, Record, Record, Unit] =\\n  kafkaSink race pulsarSink \\n\")), mdx(\"p\", null, \"To determine which one succeeded, we should use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink#raceBoth\"), \" combinator, it returns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Either\"), \" result.\"), mdx(\"h2\", null, \"Leftovers\"), mdx(\"h3\", null, \"Exposing Leftovers\"), mdx(\"p\", null, \"A sink consumes a variable amount of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I\"), \" elements (zero or more) from the upstream. If the upstream is finite, we can expose leftover values by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink#exposeLeftOver\"), \". It returns a tuple that contains the result of the previous sink and its leftovers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val s1: ZIO[Any, Nothing, (Chunk[Int], Chunk[Int])] =\\n  ZStream(1, 2, 3, 4, 5).run(\\n    ZSink.take(3).exposeLeftover\\n  )\\n// Output: (Chunk(1, 2, 3), Chunk(4, 5))\\n\\n\\nval s2: ZIO[Any, Nothing, (Option[Int], Chunk[Int])] =\\n  ZStream(1, 2, 3, 4, 5).run(\\n    ZSink.head[Int].exposeLeftover\\n  )\\n// Output: (Some(1), Chunk(2, 3, 4, 5))\\n\")), mdx(\"h3\", null, \"Dropping Leftovers\"), mdx(\"p\", null, \"If we don't need leftovers, we can drop them by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZSink#dropLeftover\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"ZSink.take[Int](3).dropLeftover\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/stream/zsink.md"}},"staticQueryHashes":[]}