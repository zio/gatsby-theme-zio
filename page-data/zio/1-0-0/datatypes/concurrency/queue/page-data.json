{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/concurrency/queue","result":{"data":{"mdx":{"id":"47a1a3e8-6aa0-5918-857d-96fa5efc65b1","slug":"datatypes/concurrency/queue","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"queue\",\n  \"title\": \"Queue\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue\"), \" is a lightweight in-memory queue built on ZIO with composable and transparent back-pressure. It is fully asynchronous (no locks or blocking), purely-functional and type-safe.\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue[A]\"), \" contains values of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" and has two basic operations: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offer\"), \", which places an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"take\"), \" which removes and returns the oldest value in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nval res: UIO[Int] = for {\\n  queue <- Queue.bounded[Int](100)\\n  _ <- queue.offer(1)\\n  v1 <- queue.take\\n} yield v1\\n\")), mdx(\"h2\", null, \"Creating a queue\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue\"), \" can be bounded (with a limited capacity) or unbounded.\"), mdx(\"p\", null, \"There are several strategies to process new values when the queue is full:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bounded\"), \" queue is back-pressured: when full, any offering fiber will be suspended until the queue is able to add the item;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dropping\"), \" queue will drop new items when the queue is full;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sliding\"), \" queue will drop old items when the queue is full.\")), mdx(\"p\", null, \"To create a back-pressured bounded queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val boundedQueue: UIO[Queue[Int]] = Queue.bounded[Int](100)\\n\")), mdx(\"p\", null, \"To create a dropping queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val droppingQueue: UIO[Queue[Int]] = Queue.dropping[Int](100)\\n\")), mdx(\"p\", null, \"To create a sliding queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val slidingQueue: UIO[Queue[Int]] = Queue.sliding[Int](100)\\n\")), mdx(\"p\", null, \"To create an unbounded queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val unboundedQueue: UIO[Queue[Int]] = Queue.unbounded[Int]\\n\")), mdx(\"h2\", null, \"Adding items to a queue\"), mdx(\"p\", null, \"The simplest way to add a value to the queue is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val res1: UIO[Unit] = for {\\n  queue <- Queue.bounded[Int](100)\\n  _ <- queue.offer(1)\\n} yield ()\\n\")), mdx(\"p\", null, \"When using a back-pressured queue, offer might suspend if the queue is full: you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fork\"), \" to wait in a different fiber.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val res2: UIO[Unit] = for {\\n  queue <- Queue.bounded[Int](1)\\n  _ <- queue.offer(1)\\n  f <- queue.offer(1).fork // will be suspended because the queue is full\\n  _ <- queue.take\\n  _ <- f.join\\n} yield ()\\n\")), mdx(\"p\", null, \"It is also possible to add multiple values at once with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offerAll\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val res3: UIO[Unit] = for {\\n  queue <- Queue.bounded[Int](100)\\n  items = Range.inclusive(1, 10).toList\\n  _ <- queue.offerAll(items)\\n} yield ()\\n\")), mdx(\"h2\", null, \"Consuming Items from a Queue\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"take\"), \" operation removes the oldest item from the queue and returns it. If the queue is empty, this will suspend, and resume only when an item has been added to the queue. As with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offer\"), \", you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fork\"), \" to wait for the value in a different fiber.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val oldestItem: UIO[String] = for {\\n  queue <- Queue.bounded[String](100)\\n  f <- queue.take.fork // will be suspended because the queue is empty\\n  _ <- queue.offer(\\\"something\\\")\\n  v <- f.join\\n} yield v\\n\")), mdx(\"p\", null, \"You can consume the first item with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"poll\"), \". If the queue is empty you will get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \", otherwise the top item will be returned wrapped in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Some\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val polled: UIO[Option[Int]] = for {\\n  queue <- Queue.bounded[Int](100)\\n  _ <- queue.offer(10)\\n  _ <- queue.offer(20)\\n  head <- queue.poll\\n} yield head\\n\")), mdx(\"p\", null, \"You can consume multiple items at once with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"takeUpTo\"), \". If the queue doesn't have enough items to return, it will return all the items without waiting for more offers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val taken: UIO[List[Int]] = for {\\n  queue <- Queue.bounded[Int](100)\\n  _ <- queue.offer(10)\\n  _ <- queue.offer(20)\\n  list  <- queue.takeUpTo(5)\\n} yield list\\n\")), mdx(\"p\", null, \"Similarly, you can get all items at once with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"takeAll\"), \". It also returns without waiting (an empty list if the queue is empty).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val all: UIO[List[Int]] = for {\\n  queue <- Queue.bounded[Int](100)\\n  _ <- queue.offer(10)\\n  _ <- queue.offer(20)\\n  list  <- queue.takeAll\\n} yield list\\n\")), mdx(\"h2\", null, \"Shutting Down a Queue\"), mdx(\"p\", null, \"It is possible with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shutdown\"), \" to interrupt all the fibers that are suspended on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offer*\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"take*\"), \". It will also empty the queue and make all future calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offer*\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"take*\"), \" terminate immediately.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val takeFromShutdownQueue: UIO[Unit] = for {\\n  queue <- Queue.bounded[Int](3)\\n  f <- queue.take.fork\\n  _ <- queue.shutdown // will interrupt f\\n  _ <- f.join // Will terminate\\n} yield ()\\n\")), mdx(\"p\", null, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awaitShutdown\"), \" to execute an effect when the queue is shut down. This will wait until the queue is shut down. If the queue is already shutdown, it will resume right away.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val awaitShutdown: UIO[Unit] = for {\\n  queue <- Queue.bounded[Int](3)\\n  p <- Promise.make[Nothing, Boolean]\\n  f <- queue.awaitShutdown.fork\\n  _ <- queue.shutdown\\n  _ <- f.join\\n} yield ()\\n\")), mdx(\"h2\", null, \"Transforming queues\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue[A]\"), \" is in fact a type alias for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZQueue[Any, Any, Nothing, Nothing, A, A]\"), \".\\nThe signature for the expanded version is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"trait ZQueue[RA, RB, EA, EB, A, B]\\n\")), mdx(\"p\", null, \"Which is to say:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The queue may be offered values of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". The enqueueing operations require an environment of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RA\"), \" and may fail with errors of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EA\"), \";\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The queue will yield values of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \". The dequeueing operations require an environment of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RB\"), \" and may fail with errors of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EB\"), \".\")), mdx(\"p\", null, \"Note how the basic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queue[A]\"), \" cannot fail or require any environment for any of its operations.\"), mdx(\"p\", null, \"With separate type parameters for input and output, there are rich composition opportunities for queues:\"), mdx(\"h3\", null, \"ZQueue#map\"), mdx(\"p\", null, \"The output of the queue may be mapped:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val mapped: UIO[String] = \\n  for {\\n    queue  <- Queue.bounded[Int](3)\\n    mapped = queue.map(_.toString)\\n    _      <- mapped.offer(1)\\n    s      <- mapped.take\\n  } yield s\\n\")), mdx(\"h3\", null, \"ZQueue#mapM\"), mdx(\"p\", null, \"We may also use an effectful function to map the output. For example,\\nwe could annotate each element with the timestamp at which it was dequeued:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import java.util.concurrent.TimeUnit\\nimport zio.clock._\\n\\nval currentTimeMillis = currentTime(TimeUnit.MILLISECONDS)\\n\\nval annotatedOut: UIO[ZQueue[Any, Clock, Nothing, Nothing, String, (Long, String)]] =\\n  for {\\n    queue <- Queue.bounded[String](3)\\n    mapped = queue.mapM { el =>\\n      currentTimeMillis.map((_, el))\\n    }\\n  } yield mapped\\n\")), mdx(\"h3\", null, \"ZQueue#contramapM\"), mdx(\"p\", null, \"Similarly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapM\"), \", we can also apply an effectful function to\\nelements as they are enqueued. This queue will annotate the elements\\nwith their enqueue timestamp:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val annotatedIn: UIO[ZQueue[Clock, Any, Nothing, Nothing, String, (Long, String)]] =\\n  for {\\n    queue <- Queue.bounded[(Long, String)](3)\\n    mapped = queue.contramapM { el: String =>\\n      currentTimeMillis.map((_, el))\\n    }\\n  } yield mapped\\n\")), mdx(\"p\", null, \"This queue has the same type as the previous one, but the timestamp is\\nattached to the elements when they are enqueued. This is reflected in\\nthe type of the environment required by the queue for enqueueing.\"), mdx(\"p\", null, \"To complete this example, we could combine this queue with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapM\"), \" to\\ncompute the time that the elements stayed in the queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.duration._\\n\\nval timeQueued: UIO[ZQueue[Clock, Clock, Nothing, Nothing, String, (Duration, String)]] =\\n  for {\\n    queue <- Queue.bounded[(Long, String)](3)\\n    enqueueTimestamps = queue.contramapM { el: String =>\\n      currentTimeMillis.map((_, el))\\n    }\\n    durations = enqueueTimestamps.mapM { case (enqueueTs, el) =>\\n      currentTimeMillis\\n        .map(dequeueTs => ((dequeueTs - enqueueTs).millis, el))\\n    }\\n  } yield durations\\n\")), mdx(\"h3\", null, \"ZQueue#bothWith\"), mdx(\"p\", null, \"We may also compose two queues together into a single queue that\\nbroadcasts offers and takes from both of the queues:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val fromComposedQueues: UIO[(Int, String)] = \\n  for {\\n    q1       <- Queue.bounded[Int](3)\\n    q2       <- Queue.bounded[Int](3)\\n    q2Mapped =  q2.map(_.toString)\\n    both     =  q1.bothWith(q2Mapped)((_, _))\\n    _        <- both.offer(1)\\n    iAndS    <- both.take\\n    (i, s)   =  iAndS\\n  } yield (i, s)\\n\")), mdx(\"h2\", null, \"Additional Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.slideshare.net/jdegoes/zio-queue\"\n  }, \"ZIO Queue Talk by John De Goes @ ScalaWave 2018\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.slideshare.net/wiemzin/psug-zio-queue\"\n  }, \"ZIO Queue Talk by Wiem Zine El Abidine @ PSUG 2018\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/@wiemzin/elevator-control-system-using-zio-c718ae423c58\"\n  }, \"Elevator Control System using ZIO\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.softwaremill.com/scalaz-8-io-vs-akka-typed-actors-vs-monix-part-1-5672657169e1\"\n  }, \"Scalaz 8 IO vs Akka (typed) actors vs Monix\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/concurrency/queue.md"}},"staticQueryHashes":[]}