{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/concurrency/zref","result":{"data":{"mdx":{"id":"d9e0fab5-0294-50f2-bdf5-2b7e63e27c2c","slug":"datatypes/concurrency/zref","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"zref\",\n  \"title\": \"ZRef\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef[EA, EB, A, B]\"), \" is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \". \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"set\")), \" takes a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" and sets the reference to a new value, potentially failing with an error of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EA\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"get\")), \" gets the current value of the reference and returns a value of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \", potentially\\nfailing with an error of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EB\"), \".\")), mdx(\"p\", null, \"When the error and value types of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" are unified, that is, it is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef[E, E, A, A]\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" also supports atomic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modify\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update\"), \" operations. All operations are guaranteed to be safe for concurrent access.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"Note:\"))), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"While \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" provides the functional equivalent of a mutable reference, the value inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" should be immutable. For performance reasons \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZRef\"), \" is implemented in terms of compare and swap operations rather than synchronization. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"These operations are not safe for mutable values that do not support concurrent access\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/concurrency/zref.md"}},"staticQueryHashes":[]}