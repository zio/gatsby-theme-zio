{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/datatypes/sync/concurrentset","result":{"data":{"mdx":{"id":"58cca155-8d4c-5366-b0d2-dfddb23644e8","slug":"datatypes/sync/concurrentset","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"concurrentSet\",\n  \"title\": \"ConcurrentSet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConcurrentSet\"), \" is a Set wrapper over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.util.concurrent.ConcurrentHashMap\"), \".\"), mdx(\"h2\", null, \"Operations\"), mdx(\"h3\", null, \"Creation\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Method\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"empty[A]: UIO[ConcurrentSet[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Makes an empty \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ConcurrentSet\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"empty[A](initialCapacity: Int): UIO[ConcurrentSet[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Makes an empty \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ConcurrentSet\"), \" with \\xECnitial capacity\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fromIterable[A](as: Iterable[(A)]): UIO[ConcurrentSet[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Makes a new \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ConcurrentSet\"), \" initialized with the provided collection\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"make[A](as: A*): UIO[ConcurrentSet[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Makes a new \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ConcurrentSet\"), \" initialized with the provided elements\")))), mdx(\"h3\", null, \"Use\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Method\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"add(x: A): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Adds a new value.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"addAll(xs: Iterable[A]): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Adds all new values.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"collectFirst[B](pf: PartialFunction[(A, B)): UIO[Option[B]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Finds the first element of a set for which the partial function is defined and applies the function to it.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"exists(p: A => Boolean): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tests whether a given predicate holds true for at least one element in the set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fold[R, E, S](zero: S)(f: (S, A) => S): UIO[S]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Folds the elements of a set using the given binary operator.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"forall(p: A => Boolean): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tests whether a predicate is satisfied by all elements of a set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"find[B](p: A => Boolean): UIO[Option[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Retrieves the elements in which predicate is satisfied.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"remove(x: A): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Removes the entry for the given value if it is mapped to an existing element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"removeAll(xs: Iterable[A]): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Removes all the entries for the given values if they are mapped to an existing element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"removeIf(p: A => Boolean): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Removes all elements which satisfy the given predicate.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retainAll(xs: Iterable[A]): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Retain all the entries for the given values if they are mapped to an existing element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"retainIf(p: A => Boolean): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Removes all elements which do not satisfy the given predicate.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"clear: UIO[Unit]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Removes all elements.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"contains(x: A): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tests whether if the element is in the set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"containsAll(xs: Iterable[A]): UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tests if the elements in the collection are a subset of the set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size: UIO[Int]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Number of elements in the set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isEmpty: UIO[Boolean]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"True if there are no elements in the set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"toSet: UIO[Set[A]]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Create a concurrent set from a set.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"transform(f: A => A): UIO[Unit]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Create a concurrent set from a collection.\")))), mdx(\"h2\", null, \"Example Usage\"), mdx(\"p\", null, \"Given:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.concurrent.ConcurrentSet\\n\\nfor {\\n  emptySet  <- ConcurrentSet.empty[Int] \\n  setA      <- ConcurrentSet.make[Int](1, 2, 3, 4)\\n} yield ()\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Operation\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Result\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"emptySet.add(1).toSet\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(1)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.addAll(Chunk(5, 6).toSet)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(1, 2, 3, 4, 5, 6)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.remove(1).toSet\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(2, 3, 4)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.removeAll(1, 3).toSet\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(2, 4)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.retainAll(List(1, 3, 5, 6)).toSet\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(1, 3)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.clear.isEmpty\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.contains(5)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.containsAll(Chunk(1, 2, 3))\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.exists(_ > 4)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.forAll(_ < 5)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.removeIf(_ % 2 == 0)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(2, 4)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.retainIf(_ % 2 == 0)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(1, 3)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.find(_ > 2)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(3, 4)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.collectFirst { case 3 => \\\"Three\\\" }\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(3)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.size\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.transform(_ + 10)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set(11, 12, 13, 14)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setA.fold(0)(_ + _)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"10\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/datatypes/sync/concurrentset.md"}},"staticQueryHashes":[]}