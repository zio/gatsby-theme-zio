{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/getting-started","result":{"data":{"mdx":{"id":"4ad8fc91-10cc-52b4-a752-d97087f7019a","slug":"getting_started","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"getting_started\",\n  \"title\": \"Getting Started\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Include ZIO in your project by adding the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"resolvers += Resolver.sonatypeRepo(\\\"snapshots\\\")\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio\\\" % \\\"1.0.15+1-4541a378-SNAPSHOT\\\"\\n\")), mdx(\"p\", null, \"If you want to use ZIO streams, you should also include the following dependency:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"resolvers += Resolver.sonatypeRepo(\\\"snapshots\\\")\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-streams\\\" % \\\"1.0.15+1-4541a378-SNAPSHOT\\\"\\n\")), mdx(\"h2\", null, \"Main\"), mdx(\"p\", null, \"Your application can extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \", which provides a complete runtime system and allows you to write your whole program using ZIO:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console._\\n\\nobject MyApp extends zio.App {\\n\\n  def run(args: List[String]) =\\n    myAppLogic.exitCode\\n\\n  val myAppLogic =\\n    for {\\n      _    <- putStrLn(\\\"Hello! What is your name?\\\")\\n      name <- getStrLn\\n      _    <- putStrLn(s\\\"Hello, ${name}, welcome to ZIO!\\\")\\n    } yield ()\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" method should return a ZIO value which has all its errors handled,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"which, in ZIO parlance, is an unexceptional ZIO value.  \"), mdx(\"p\", null, \"One way to do this is to invoke \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fold\"), \" over a ZIO value, to get an unexceptional ZIO value.\\nThat requires two handler functions: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eh: E => B\"), \" (the error handler) and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ah: A => B\"), \" (the success handler).\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myAppLogic\"), \" fails, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eh\"), \" will be used to get from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e: E\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b: B\"), \";\\nif it succeeds, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ah\"), \" will be used to get from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a: A\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b: B\"), \". \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myAppLogic\"), \", as folded above, produces an unexceptional ZIO value, with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" being \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myAppLogic\"), \" fails, there will be a 1; if it succeeds, there will be a 0.\"), mdx(\"hr\", null), mdx(\"p\", null, \"If you are integrating ZIO into an existing application, using dependency injection, or do not control your main function, then you can create a runtime system in order to execute your ZIO programs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\n\\nobject IntegrationExample {\\n  val runtime = Runtime.default\\n\\n  runtime.unsafeRun(Task(println(\\\"Hello World!\\\")))\\n}\\n\")), mdx(\"p\", null, \"Ideally, your application should have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"single\"), \" runtime, because each runtime has its own resources (including thread pool and unhandled error reporter).\"), mdx(\"h2\", null, \"Console\"), mdx(\"p\", null, \"ZIO provides a module for interacting with the console. You can import the functions in this module with the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console._\\n\")), mdx(\"p\", null, \"If you need to print text to the console, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"putStr\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"putStrLn\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// Print without trailing line break\\nputStr(\\\"Hello World\\\")\\n// res8: ZIO[Console, java.io.IOException, Unit] = zio.ZIO$Read@461ab0a5\\n\\n// Print string and include trailing line break\\nputStrLn(\\\"Hello World\\\")\\n// res9: ZIO[Console, java.io.IOException, Unit] = zio.ZIO$Read@45218adf\\n\")), mdx(\"p\", null, \"If you need to read input from the console, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStrLn\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val echo = getStrLn.flatMap(line => putStrLn(line))\\n// echo: ZIO[Console, java.io.IOException, Unit] = zio.ZIO$FlatMap@58b8cb6e\\n\")), mdx(\"h2\", null, \"Learning More\"), mdx(\"p\", null, \"To learn more about ZIO, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"overview/index.md\"\n  }, \"Overview\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/getting_started.md"}},"staticQueryHashes":[]}