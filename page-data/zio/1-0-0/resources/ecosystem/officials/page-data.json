{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio/1-0-0/resources/ecosystem/officials","result":{"data":{"mdx":{"id":"3a696067-38f5-5af4-ace2-d070db7f4471","slug":"resources/ecosystem/officials","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"officials\",\n  \"title\": \"Official ZIO Libraries\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Official ZIO libraries are hosted in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/\"\n  }, \"ZIO organization\"), \" on Github, and are generally maintained by core contributors to ZIO.\"), mdx(\"p\", null, \"Each project in the ZIO organization namespace has a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Stage Badge\"), \" which indicates the current status of that project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Production Ready\"), \" \\u2014 The project is stable and already used in production. We can expect reliability for the implemented use cases.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Development\"), \" \\u2014 The project already has RC or milestone releases, but is still under active development. We should not expect full stability yet.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Experimental\"), \" \\u2014 The project is not yet released, but an important part of the work is already done.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Research\"), \" \\u2014 The project is at the design stage, with some sketches of work but nothing usable yet.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Concept\"), \" \\u2014 The project is just an idea, development hasn't started yet.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Deprecated\"), \" \\u2014 The project is not maintained anymore, and we don't recommend its usage.\"))), mdx(\"h2\", null, \"ZIO Actors\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-actors\"\n  }, \"ZIO Actors\"), \" is a high-performance, purely functional library for building, composing, and supervising typed actors based on ZIO.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Actors is based on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor Model\"), \" which is a conceptual model of concurrent computation. In the actor model, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"actor\"), \" is the fundamental unit of computation, unlike the ZIO concurrency model, which is the fiber.\"), mdx(\"p\", null, \"Each actor has a mailbox that stores and processes the incoming messages in FIFO order. An actor allowed to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create another actor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"send a message to itself or other actors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"handle the incoming message, and:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"decide \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"what to do\"), \" based on the current state and the received message.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"decide \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"what is the next state\"), \" based on the current state and the received message.\")))), mdx(\"p\", null, \"Some characteristics of an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor Model\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Isolated State\"), \" \\u2014 Each actor holds its private state. They only have access to their internal state. They are isolated from each other, and they do not share the memory. The only way to change the state of an actor is to send a message to that actor.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Process of One Message at a Time\"), \" \\u2014 Each actor handles and processes one message at a time. They read messages from their inboxes and process them sequentially.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Actor Persistence\"), \" \\u2014 A persistent actor records its state as events. The actor can recover its state from persisted events after a crash or restart.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Remote Messaging\"), \" \\u2014 Actors can communicate with each other only through messages. They can run locally or remotely on another machine. Remote actors can communicate with each other transparently as if there are located locally.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Actor Supervision\"), \" \\u2014 Parent actors can supervise their child actors. For example, if a child actor fails, the supervisor actor can restart that actor.\"))), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"To use this library, we need to add the following line to our library dependencies in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-actors\\\" % \\\"0.0.9\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's try to implement a simple Counter Actor which receives two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Increase\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Get\"), \" commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.actors.Actor.Stateful\\nimport zio.actors._\\nimport zio.clock.Clock\\nimport zio.console.putStrLn\\nimport zio.{ExitCode, UIO, URIO, ZIO}\\n\\nsealed trait Message[+_]\\ncase object Increase extends Message[Unit]\\ncase object Get      extends Message[Int]\\n\\nobject CounterActorExample extends zio.App {\\n\\n  // Definition of stateful actor\\n  val counterActor: Stateful[Any, Int, Message] =\\n    new Stateful[Any, Int, Message] {\\n      override def receive[A](\\n          state: Int,\\n          msg: Message[A],\\n          context: Context\\n      ): UIO[(Int, A)] =\\n        msg match {\\n          case Increase => UIO((state + 1, ()))\\n          case Get      => UIO((state, state))\\n        }\\n    }\\n\\n  val myApp: ZIO[Clock, Throwable, Int] =\\n    for {\\n      system <- ActorSystem(\\\"MyActorSystem\\\")\\n      actor  <- system.make(\\\"counter\\\", Supervisor.none, 0, counterActor)\\n      _      <- actor ! Increase\\n      _      <- actor ! Increase\\n      s      <- actor ? Get\\n    } yield s\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp\\n      .flatMap(state => putStrLn(s\\\"The final state of counter: $state\\\"))\\n      .exitCode\\n}\\n\")), mdx(\"p\", null, \"Akka actors also has some other optional modules for persistence (which is useful for event sourcing) and integration with Akka toolkit:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-actors-persistence\\\" % zioActorsVersion\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-actors-persistence-jdbc\\\" % zioActorVersion\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-actors-akka-interop\\\" % zioActorVersion\\n\")), mdx(\"h2\", null, \"ZIO Akka Cluster\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-akka-cluster\"\n  }, \"ZIO Akka Cluster\"), \" library is a ZIO wrapper on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.akka.io/docs/akka/current/index-cluster.html\"\n  }, \"Akka Cluster\"), \". We can use clustering features of the Akka toolkit without the need to use the actor model.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"This library provides us following features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Akka Cluster\"), \" \\u2014 This feature contains two Akka Cluster Membership operations called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"join\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leave\"), \" and also it has some methods to retrieve \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Cluster State\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Cluster Events\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Akka Distributed PubSub\"), \" \\u2014 Akka has a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Distributed Publish Subscribe\"), \" facility in the cluster. It helps us to send a message to all actors in the cluster that have registered and subscribed for a specific topic name without knowing their physical address or without knowing which node they are running on.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Akka Cluster Sharding\"), \" \\u2014 Cluster sharding is useful when we need to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"distribute actors across several nodes in the cluster\"), \" and want to be able to interact with them using their logical identifier without having to care about their physical location in the cluster, which might also change over time. When we have many stateful entities in our application that together they consume more resources (e.g. memory) than fit on one machine, it is useful to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Akka Cluster Sharding\"), \" to distribute our entities to multiple nodes.\"))), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-akka-cluster\\\" % \\\"0.2.0\\\" // Check the repo for the latest version\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In the following example, we are using all these three features. We have a distributed counter application that lives in the Akka Cluster using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Akka Cluster Sharding\"), \" feature. So the location of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LiveUsers\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TotalRequests\"), \" entities in the cluster is transparent for us. We send the result of each entity to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Distributed PubSub\"), \". So every node in the cluster can subscribe and listen to those results. Also, we have created a fiber that is subscribed to the cluster events. All the new events will be logged to the console:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import akka.actor.ActorSystem\\nimport com.typesafe.config.{Config, ConfigFactory}\\nimport zio.akka.cluster.Cluster\\nimport zio.akka.cluster.sharding.{Entity, Sharding}\\nimport zio.console.putStrLn\\nimport zio.{ExitCode, Has, Managed, Task, URIO, ZIO, ZLayer}\\n\\nsealed trait Counter extends Product with Serializable\\ncase object Inc extends Counter\\ncase object Dec extends Counter\\n\\ncase class CounterApp(port: String) {\\n  val config: Config =\\n    ConfigFactory.parseString(\\n      s\\\"\\\"\\\"\\n         |akka {\\n         |  actor {\\n         |    provider = \\\"cluster\\\"\\n         |  }\\n         |  remote {\\n         |    netty.tcp {\\n         |      hostname = \\\"127.0.0.1\\\"\\n         |      port = $port\\n         |    }\\n         |  }\\n         |  cluster {\\n         |    seed-nodes = [\\\"akka.tcp://CounterApp@127.0.0.1:2551\\\"]\\n         |  }\\n         |}\\n         |\\\"\\\"\\\".stripMargin)\\n\\n  val actorSystem: ZLayer[Any, Throwable, Has[ActorSystem]] =\\n    ZLayer.fromManaged(\\n      Managed.make(Task(ActorSystem(\\\"CounterApp\\\", config)))(sys =>\\n        Task.fromFuture(_ => sys.terminate()).either\\n      )\\n    )\\n\\n  val counterApp: ZIO[zio.ZEnv, Throwable, Unit] =\\n    actorSystem.build.use(sys =>\\n      for {\\n        queue <- Cluster\\n          .clusterEvents(true)\\n          .provideCustomLayer(ZLayer.succeedMany(sys))\\n\\n        pubsub <- zio.akka.cluster.pubsub.PubSub\\n          .createPubSub[Int]\\n          .provideCustomLayer(ZLayer.succeedMany(sys))\\n\\n        liveUsersLogger <- pubsub\\n          .listen(\\\"LiveUsers\\\")\\n          .flatMap(\\n            _.take.tap(u => putStrLn(s\\\"Number of live users: $u\\\")).forever\\n          )\\n          .fork\\n        totalRequestLogger <- pubsub\\n          .listen(\\\"TotalRequests\\\")\\n          .flatMap(\\n            _.take.tap(r => putStrLn(s\\\"Total request until now: $r\\\")).forever\\n          )\\n          .fork\\n\\n        clusterEvents <- queue.take\\n          .tap(x => putStrLn(\\\"New event in cluster: \\\" + x.toString))\\n          .forever\\n          .fork\\n\\n        counterEntityLogic = (c: Counter) =>\\n          for {\\n            entity <- ZIO.environment[Entity[Int]]\\n            newState <- c match {\\n              case Inc =>\\n                entity.get.state.updateAndGet(s => Some(s.getOrElse(0) + 1))\\n              case Dec =>\\n                entity.get.state.updateAndGet(s => Some(s.getOrElse(0) - 1))\\n            }\\n            _ <- pubsub.publish(entity.get.id, newState.getOrElse(0)).orDie\\n          } yield ()\\n        cluster <- Sharding\\n          .start(\\\"CounterEntity\\\", counterEntityLogic)\\n          .provideCustomLayer(ZLayer.succeedMany(sys))\\n\\n        _ <- cluster.send(\\\"LiveUsers\\\", Inc)\\n        _ <- cluster.send(\\\"TotalRequests\\\", Inc)\\n        _ <- cluster.send(\\\"LiveUsers\\\", Dec)\\n        _ <- cluster.send(\\\"LiveUsers\\\", Inc)\\n        _ <- cluster.send(\\\"LiveUsers\\\", Inc)\\n        _ <- cluster.send(\\\"TotalRequests\\\", Inc)\\n        _ <- cluster.send(\\\"TotalRequests\\\", Inc)\\n\\n        _ <-\\n          clusterEvents.join zipPar liveUsersLogger.join zipPar totalRequestLogger.join\\n      } yield ()\\n    )\\n}\\n\")), mdx(\"p\", null, \"Now, let's create a cluster comprising two nodes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object CounterApp1 extends zio.App {\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = \\n    CounterApp(\\\"2551\\\").counterApp.exitCode\\n}\\n\\nobject CounterApp2 extends zio.App {\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = \\n    CounterApp(\\\"2552\\\").counterApp.exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO Cache\"), mdx(\"p\", null, \"ZIO Cache is a library that makes it easy to optimize the performance of our application by caching values.\"), mdx(\"p\", null, \"Sometimes we may call or receive requests to do overlapping work. Assume we are writing a service that is going to handle all incoming requests. We don't want to handle duplicate requests. Using ZIO Cache we can make our application to be more \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"performant\"), \" by preventing duplicated works.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Some key features of ZIO Cache:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compositionality\"), \" \\u2014 If we want our applications to be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"compositional\"), \", different parts of our application may do overlapping work. ZIO Cache helps us to stay benefit from compositionality while using caching.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unification of Synchronous and Asynchronous Caches\"), \" \\u2014 Compositional definition of cache in terms of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lookup function\"), \" unifies synchronous and asynchronous caches. So the lookup function can compute value either synchronously or asynchronously.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Deep ZIO Integration\"), \" \\u2014 ZIO Cache is a ZIO native solution. So without losing the power of ZIO it includes support for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"concurrent lookups\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"failure\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"interruption\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Caching Policy\"), \" \\u2014 Using caching policy, the ZIO Cache can determine when values should/may be removed from the cache. So, if we want to build something more complex and custom we have a lot of flexibility. The caching policy has two parts and together they define a whole caching policy:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Priority (Optional Removal)\"), \" \\u2014 When we are running out of space, it defines the order that the existing values \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"might\"), \" be removed from the cache to make more space.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Evict (Mandatory Removal)\"), \" \\u2014 Regardless of space when we \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"must\"), \" remove existing values because they are no longer valid anymore. They might be invalid because they do not satisfy business requirements (e.g., maybe it's too old). This is a function that determines whether an entry is valid based on the entry and the current time.\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Composition Caching Policy\"), \" \\u2014 We can define much more complicated caching policies out of much simpler ones.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cache/Entry Statistics\"), \" \\u2014 ZIO Cache maintains some good statistic metrics, such as entries, memory size, hits, misses, loads, evictions, and total load time. So we can look at how our cache is doing and decide where we should change our caching policy to improve caching metrics.\"))), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-cache\\\" % \\\"0.1.0\\\" // Check the repo for the latest version\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example, we are calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeConsumingEffect\"), \" three times in parallel with the same key. The ZIO Cache runs this effect only once. So the concurrent lookups will suspend until the value being computed is available:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.cache.{Cache, Lookup}\\nimport zio.clock.Clock\\nimport zio.console.{Console, putStrLn}\\nimport zio.duration.{Duration, durationInt}\\nimport zio.{ExitCode, URIO, ZIO}\\n\\nimport java.io.IOException\\n\\ndef timeConsumingEffect(key: String): ZIO[Clock, Nothing, Int] =\\n  ZIO.sleep(5.seconds) *> ZIO.succeed(key.hashCode)\\n\\nval myApp: ZIO[Console with Clock, IOException, Unit] =\\n  for {\\n    cache <- Cache.make(\\n      capacity = 100,\\n      timeToLive = Duration.Infinity,\\n      lookup = Lookup(timeConsumingEffect)\\n    )\\n    result <- cache.get(\\\"key1\\\")\\n                .zipPar(cache.get(\\\"key1\\\"))\\n                .zipPar(cache.get(\\\"key1\\\"))\\n    _ <- putStrLn(s\\\"Result of parallel execution three effects with the same key: $result\\\")\\n\\n    hits <- cache.cacheStats.map(_.hits)\\n    misses <- cache.cacheStats.map(_.misses)\\n    _ <- putStrLn(s\\\"Number of cache hits: $hits\\\")\\n    _ <- putStrLn(s\\\"Number of cache misses: $misses\\\")\\n  } yield ()\\n\")), mdx(\"p\", null, \"The output of this program should be as follows: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Result of parallel execution three effects with the same key: ((3288498,3288498),3288498)\\nNumber of cache hits: 2\\nNumber of cache misses: 1\\n\")), mdx(\"h2\", null, \"ZIO Config\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zio.github.io/zio-config/\"\n  }, \"ZIO Config\"), \" is a ZIO-based library for loading and parsing configuration sources.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"In the real world, config retrieval is the first to develop applications. We mostly have some application config that should be loaded and parsed through our application. Doing such things manually is always boring and error-prone and also has lots of boilerplates.\"), mdx(\"p\", null, \"The ZIO Config has a lot of features, and it is more than just a config parsing library. Let's enumerate some key features of this library:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Support for Various Sources\"), \" \\u2014 It can read/write flat or nested configurations from/to various formats and sources.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Composable sources\"), \" \\u2014 ZIO Config can compose sources of configuration, so we can have, e.g. environmental or command-line overrides.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Automatic Document Generation\"), \" \\u2014 It can auto-generate documentation of configurations. So developers or DevOps engineers know how to configure the application.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Report generation\"), \" \\u2014 It has a report generation that shows where each piece of configuration data came from.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Automatic Derivation\"), \" \\u2014 It has built-in support for automatic derivation of readers and writers for case classes and sealed traits.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Type-level Constraints and Automatic Validation\"), \" \\u2014 because it supports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Refined\"), \" types, we can write type-level predicates which constrain the set of values described for data types.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Descriptive Errors\"), \" \\u2014 It accumulates all errors and reports all of them to the user rather than failing fast.\"))), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-config\\\" % <version>\\n\")), mdx(\"p\", null, \"There are also some optional dependencies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-config-mangolia\"), \" \\u2014 Auto Derivation \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-config-refined\"), \" \\u2014 Integration with Refined Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-config-typesafe\"), \" \\u2014 HOCON/Json Support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-config-yaml\"), \" \\u2014 Yaml Support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-config-gen\"), \" \\u2014 Random Config Generation\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's add these four lines to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file as we are using these modules in our example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-config\\\"          % \\\"1.0.6\\\"\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-config-magnolia\\\" % \\\"1.0.6\\\"\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-config-typesafe\\\" % \\\"1.0.6\\\"\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-config-refined\\\"  % \\\"1.0.6\\\"\\n\")), mdx(\"p\", null, \"In this example we are reading from HOCON config format using type derivation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import eu.timepit.refined.W\\nimport eu.timepit.refined.api.Refined\\nimport eu.timepit.refined.collection.NonEmpty\\nimport eu.timepit.refined.numeric.GreaterEqual\\nimport zio.config.magnolia.{describe, descriptor}\\nimport zio.config.typesafe.TypesafeConfigSource\\nimport zio.console.putStrLn\\nimport zio.{ExitCode, URIO, ZIO}\\n\\nsealed trait DataSource\\n\\nfinal case class Database(\\n    @describe(\\\"Database Host Name\\\")\\n    host: Refined[String, NonEmpty],\\n    @describe(\\\"Database Port\\\")\\n    port: Refined[Int, GreaterEqual[W.`1024`.T]]\\n) extends DataSource\\n\\nfinal case class Kafka(\\n    @describe(\\\"Kafka Topics\\\")\\n    topicName: String,\\n    @describe(\\\"Kafka Brokers\\\")\\n    brokers: List[String]\\n) extends DataSource\\n\\nobject ZIOConfigExample extends zio.App {\\n  import zio.config._\\n  import zio.config.refined._\\n\\n  val json =\\n    s\\\"\\\"\\\"\\n       |\\\"Database\\\" : {\\n       |  \\\"port\\\" : \\\"1024\\\",\\n       |  \\\"host\\\" : \\\"localhost\\\"\\n       |}\\n       |\\\"\\\"\\\".stripMargin\\n\\n  val myApp =\\n    for {\\n      source <- ZIO.fromEither(TypesafeConfigSource.fromHoconString(json))\\n      desc = descriptor[DataSource] from source\\n      dataSource <- ZIO.fromEither(read(desc))\\n      // Printing Auto Generated Documentation of Application Config\\n      _ <- putStrLn(generateDocs(desc).toTable.toGithubFlavouredMarkdown)\\n      _ <- dataSource match {\\n        case Database(host, port) =>\\n          putStrLn(s\\\"Start connecting to the database: $host:$port\\\")\\n        case Kafka(_, brokers) =>\\n          putStrLn(s\\\"Start connecting to the kafka brokers: $brokers\\\")\\n      }\\n    } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO FTP\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-ftp\"\n  }, \"ZIO FTP\"), \" is a simple, idiomatic (S)FTP client for ZIO.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-ftp\\\" % \\\"0.3.0\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"First we need an FTP server if we don't have:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker run -d \\\\\\n    -p 21:21 \\\\\\n    -p 21000-21010:21000-21010 \\\\\\n    -e USERS=\\\"one|1234\\\" \\\\\\n    -e ADDRESS=localhost \\\\\\n    delfer/alpine-ftp-server\\n\")), mdx(\"p\", null, \"Now we can run the example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.blocking.Blocking\\nimport zio.console.putStrLn\\nimport zio.ftp.Ftp._\\nimport zio.ftp._\\nimport zio.stream.{Transducer, ZStream}\\nimport zio.{Chunk, ExitCode, URIO, ZIO}\\n\\nobject ZIOFTPExample extends zio.App {\\n  private val settings =\\n    UnsecureFtpSettings(\\\"127.0.0.1\\\", 21, FtpCredentials(\\\"one\\\", \\\"1234\\\"))\\n\\n  private val myApp = for {\\n    _        <- putStrLn(\\\"List of files at root directory:\\\")\\n    resource <- ls(\\\"/\\\").runCollect\\n    _        <- ZIO.foreach(resource)(e => putStrLn(e.path))\\n    path = \\\"~/file.txt\\\"\\n    _ <- upload(\\n      path,\\n      ZStream.fromChunk(\\n        Chunk.fromArray(\\\"Hello, ZIO FTP!\\\\nHello, World!\\\".getBytes)\\n      )\\n    )\\n    file <- readFile(path)\\n      .transduce(Transducer.utf8Decode)\\n      .runCollect\\n    _ <- putStrLn(s\\\"Content of $path file:\\\")\\n    _ <- putStrLn(file.fold(\\\"\\\")(_ + _))\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = myApp\\n    .provideCustomLayer(\\n      unsecure(settings) ++ Blocking.live\\n    )\\n    .exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO JSON\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-json\"\n  }, \"ZIO Json\"), \" is a fast and secure JSON library with tight ZIO integration.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"The goal of this project is to create the best all-round JSON library for Scala:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance\"), \" to handle more requests per second than the incumbents, i.e. reduced operational costs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Security\"), \" to mitigate against adversarial JSON payloads that threaten the capacity of the server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fast Compilation\"), \" no shapeless, no type astronautics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Future-Proof\"), \", prepared for Scala 3 and next-generation Java.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Simple\"), \" small codebase, concise documentation that covers everything.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Helpful errors\"), \" are readable by humans and machines.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Integration\"), \" so nothing more is required.\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-json\\\" % \\\"0.1.5\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's try a simple example of encoding and decoding JSON using ZIO JSON:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.json._\\n\\nsealed trait Fruit                   extends Product with Serializable\\ncase class Banana(curvature: Double) extends Fruit\\ncase class Apple(poison: Boolean)    extends Fruit\\n\\nobject Fruit {\\n  implicit val decoder: JsonDecoder[Fruit] =\\n    DeriveJsonDecoder.gen[Fruit]\\n\\n  implicit val encoder: JsonEncoder[Fruit] =\\n    DeriveJsonEncoder.gen[Fruit]\\n}\\n\\nval json1         = \\\"\\\"\\\"{ \\\"Banana\\\":{ \\\"curvature\\\":0.5 }}\\\"\\\"\\\"\\n// json1: String = \\\"{ \\\\\\\"Banana\\\\\\\":{ \\\\\\\"curvature\\\\\\\":0.5 }}\\\"\\nval json2         = \\\"\\\"\\\"{ \\\"Apple\\\": { \\\"poison\\\": false }}\\\"\\\"\\\"\\n// json2: String = \\\"{ \\\\\\\"Apple\\\\\\\": { \\\\\\\"poison\\\\\\\": false }}\\\"\\nval malformedJson = \\\"\\\"\\\"{ \\\"Banana\\\":{ \\\"curvature\\\": true }}\\\"\\\"\\\"\\n// malformedJson: String = \\\"{ \\\\\\\"Banana\\\\\\\":{ \\\\\\\"curvature\\\\\\\": true }}\\\"\\n\\njson1.fromJson[Fruit]\\n// res0: Either[String, Fruit] = Right(value = Banana(curvature = 0.5))\\njson2.fromJson[Fruit]\\n// res1: Either[String, Fruit] = Right(value = Apple(poison = false))\\nmalformedJson.fromJson[Fruit]\\n// res2: Either[String, Fruit] = Left(\\n//   value = \\\".Banana.curvature(expected a number, got t)\\\"\\n// )\\n\\nList(Apple(false), Banana(0.4)).toJsonPretty\\n// res3: String = \\\"\\\"\\\"[{\\n//   \\\"Apple\\\" : {\\n//     \\\"poison\\\" : false\\n//   }\\n// }, {\\n//   \\\"Banana\\\" : {\\n//     \\\"curvature\\\" : 0.4\\n//   }\\n// }]\\\"\\\"\\\"\\n\")), mdx(\"h2\", null, \"ZIO Kafka\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-kafka\"\n  }, \"ZIO Kafka\"), \" is a Kafka client for ZIO. It provides a purely functional, streams-based interface to the Kafka client and integrates effortlessly with ZIO and ZIO Streams.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Apache Kafka is a distributed event streaming platform that acts as a distributed publish-subscribe messaging system. It enables us to build distributed streaming data pipelines and event-driven applications.\"), mdx(\"p\", null, \"Kafka has a mature Java client for producing and consuming events, but it has a low-level API. ZIO Kafka is a ZIO native client for Apache Kafka. It has a high-level streaming API on top of the Java client. So we can produce and consume events using the declarative concurrency model of ZIO Streams.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-kafka\\\" % \\\"0.15.0\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's write a simple Kafka producer and consumer using ZIO Kafka with ZIO Streams. Before everything, we need a running instance of Kafka. We can do that by saving the following docker-compose script in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" file and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-docker\"\n  }, \"version: '2'\\nservices:\\n  zookeeper:\\n    image: confluentinc/cp-zookeeper:latest\\n    environment:\\n      ZOOKEEPER_CLIENT_PORT: 2181\\n      ZOOKEEPER_TICK_TIME: 2000\\n    ports:\\n      - 22181:2181\\n  \\n  kafka:\\n    image: confluentinc/cp-kafka:latest\\n    depends_on:\\n      - zookeeper\\n    ports:\\n      - 29092:29092\\n    environment:\\n      KAFKA_BROKER_ID: 1\\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\\n      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\\n\")), mdx(\"p\", null, \"Now, we can run our ZIO Kafka Streaming application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.console.putStrLn\\nimport zio.duration.durationInt\\nimport zio.kafka.consumer.{Consumer, ConsumerSettings, _}\\nimport zio.kafka.producer.{Producer, ProducerSettings}\\nimport zio.kafka.serde._\\nimport zio.stream.ZStream\\n\\nobject ZIOKafkaProducerConsumerExample extends zio.App {\\n  val producer =\\n    ZStream\\n      .repeatEffect(zio.random.nextIntBetween(0, Int.MaxValue))\\n      .schedule(Schedule.fixed(2.seconds))\\n      .mapM { random =>\\n        Producer.produce[Any, Long, String](\\n          topic = \\\"random\\\",\\n          key = random % 4,\\n          value = random.toString,\\n          keySerializer = Serde.long,\\n          valueSerializer = Serde.string\\n        )\\n      }\\n      .drain\\n\\n  val consumer =\\n    Consumer\\n      .subscribeAnd(Subscription.topics(\\\"random\\\"))\\n      .plainStream(Serde.long, Serde.string)\\n      .tap(r => putStrLn(r.value))\\n      .map(_.offset)\\n      .aggregateAsync(Consumer.offsetBatches)\\n      .mapM(_.commit)\\n      .drain\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    producer\\n      .merge(consumer)\\n      .runDrain\\n      .provideCustomLayer(appLayer)\\n      .exitCode\\n\\n  def producerLayer = ZLayer.fromManaged(\\n    Producer.make(\\n      settings = ProducerSettings(List(\\\"localhost:29092\\\"))\\n    )\\n  )\\n\\n  def consumerLayer = ZLayer.fromManaged(\\n    Consumer.make(\\n      ConsumerSettings(List(\\\"localhost:29092\\\")).withGroupId(\\\"group\\\")\\n    )\\n  )\\n\\n  def appLayer = producerLayer ++ consumerLayer\\n}\\n\")), mdx(\"h2\", null, \"ZIO Logging\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-logging\"\n  }, \"ZIO Logging\"), \" is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"When we are writing our applications using ZIO effects, to log easy way we need a ZIO native solution for logging. ZIO Logging is an environmental effect for adding logging into our ZIO applications.\"), mdx(\"p\", null, \"Key features of ZIO Logging:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Native\"), \" \\u2014 Other than it is a type-safe and purely functional solution, it leverages ZIO's features.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Multi-Platform\"), \" - It supports both JVM and JS platforms.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Composable\"), \" \\u2014 Loggers are composable together via contraMap.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pluggable Backends\"), \" \\u2014 Support multiple backends like ZIO Console, SLF4j, JS Console, JS HTTP endpoint.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Logger Context\"), \" \\u2014 It has a first citizen \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Logger Context\"), \" implemented on top of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FiberRef\"), \". The Logger Context maintains information like logger name, filters, correlation id, and so forth across different fibers. It supports \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Mapped Diagnostic Context (MDC)\"), \" which manages contextual information across fibers in a concurrent environment.\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-logging\\\" % \\\"0.5.13\\\" \\n\")), mdx(\"p\", null, \"There are also some optional dependencies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-slf4j\"), \" \\u2014 SLF4j integration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-slf4j-bridge\"), \" \\u2014 Using ZIO Logging for SLF4j loggers, usually third-party non-ZIO libraries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-jsconsole\"), \" \\u2014 Scala.js console integration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zio-logging-jshttp\"), \" \\u2014 Scala.js HTTP Logger which sends logs to a backend via Ajax POST\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of ZIO Logging which demonstrates a simple application of ZIO logging along with its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Logger Context\"), \" feature:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.clock.Clock\\nimport zio.duration.durationInt\\nimport zio.logging._\\nimport zio.random.Random\\nimport zio.{ExitCode, NonEmptyChunk, ZIO}\\n\\nobject ZIOLoggingExample extends zio.App {\\n\\n  val myApp: ZIO[Logging with Clock with Random, Nothing, Unit] =\\n    for {\\n      _ <- log.info(\\\"Hello from ZIO logger\\\")\\n      _ <-\\n        ZIO.foreachPar(NonEmptyChunk(\\\"UserA\\\", \\\"UserB\\\", \\\"UserC\\\")) { user =>\\n          log.locally(UserId(Some(user))) {\\n            for {\\n              _ <- log.info(\\\"User validation\\\")\\n              _ <- zio.random\\n                .nextIntBounded(1000)\\n                .flatMap(t => ZIO.sleep(t.millis))\\n              _ <- log.info(\\\"Connecting to the database\\\")\\n              _ <- zio.random\\n                .nextIntBounded(100)\\n                .flatMap(t => ZIO.sleep(t.millis))\\n              _ <- log.info(\\\"Releasing resources.\\\")\\n            } yield ()\\n          }\\n\\n        }\\n    } yield ()\\n\\n  type UserId = String\\n  def UserId: LogAnnotation[Option[UserId]] = LogAnnotation[Option[UserId]](\\n    name = \\\"user-id\\\",\\n    initialValue = None,\\n    combine = (_, r) => r,\\n    render = _.map(userId => s\\\"[user-id: $userId]\\\")\\n      .getOrElse(\\\"undefined-user-id\\\")\\n  )\\n\\n  val env =\\n    Logging.console(\\n      logLevel = LogLevel.Info,\\n      format =\\n        LogFormat.ColoredLogFormat((ctx, line) => s\\\"${ctx(UserId)} $line\\\")\\n    ) >>> Logging.withRootLoggerName(\\\"MyZIOApp\\\")\\n\\n  override def run(args: List[String]) =\\n    myApp.provideCustomLayer(env).as(ExitCode.success)\\n}\\n\")), mdx(\"p\", null, \"The output should be something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"2021-07-09 00:14:47.457+0000  info [MyZIOApp] undefined-user-id Hello from ZIO logger\\n2021-07-09 00:14:47.807+0000  info [MyZIOApp] [user-id: UserA] User validation\\n2021-07-09 00:14:47.808+0000  info [MyZIOApp] [user-id: UserC] User validation\\n2021-07-09 00:14:47.818+0000  info [MyZIOApp] [user-id: UserB] User validation\\n2021-07-09 00:14:48.290+0000  info [MyZIOApp] [user-id: UserC] Connecting to the database\\n2021-07-09 00:14:48.299+0000  info [MyZIOApp] [user-id: UserA] Connecting to the database\\n2021-07-09 00:14:48.321+0000  info [MyZIOApp] [user-id: UserA] Releasing resources.\\n2021-07-09 00:14:48.352+0000  info [MyZIOApp] [user-id: UserC] Releasing resources.\\n2021-07-09 00:14:48.820+0000  info [MyZIOApp] [user-id: UserB] Connecting to the database\\n2021-07-09 00:14:48.882+0000  info [MyZIOApp] [user-id: UserB] Releasing resources.\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-metrics\"\n  }, \"ZIO Metrcis\"), \" is a high-performance, purely-functional library for adding instrumentation to any application, with a simple web client and JMX support.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Metrics is a pure-ZIO StatsD/DogStatsD client and a thin wrapper over both \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/prometheus/client_java\"\n  }, \"Prometheus\")), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://metrics.dropwizard.io/4.2.0/manual/core.html\"\n  }, \"Dropwizard\")), \" instrumentation libraries allowing us to measure the behavior of our application in a performant purely functional manner.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to one of the following lines in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"// Prometheus\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-prometheus\\\" % \\\"1.0.12\\\"\\n\\n// Dropwizard\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-dropwizard\\\" % \\\"1.0.12\\\"\\n\\n// StatsD/DogStatsD\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-metrics-statsd\\\" % \\\"1.0.12\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example we are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio-metrics-prometheus\"), \" module. Other that initializing default exporters, we register a counter to the registry:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.Runtime\\nimport zio.console.{Console, putStrLn}\\nimport zio.metrics.prometheus._\\nimport zio.metrics.prometheus.exporters._\\nimport zio.metrics.prometheus.helpers._\\n\\nobject ZIOMetricsExample extends scala.App {\\n\\n  val myApp =\\n    for {\\n      r <- getCurrentRegistry()\\n      _ <- initializeDefaultExports(r)\\n      c <- counter.register(\\\"ServiceA\\\", Array(\\\"Request\\\", \\\"Region\\\"))\\n      _ <- c.inc(1.0, Array(\\\"GET\\\", \\\"us-west-*\\\"))\\n      _ <- c.inc(2.0, Array(\\\"POST\\\", \\\"eu-south-*\\\"))\\n      _ <- c.inc(3.0, Array(\\\"GET\\\", \\\"eu-south-*\\\"))\\n      s <- http(r, 9090)\\n      _ <- putStrLn(s\\\"The application's metric endpoint: http://localhost:${s.getPort}/\\\")\\n    } yield s\\n\\n  Runtime\\n    .unsafeFromLayer(\\n      Registry.live ++ Exporters.live ++ Console.live\\n    )\\n    .unsafeRun(myApp)\\n}\\n\")), mdx(\"p\", null, \"Now, the application's metrics are accessible via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:9090\"), \" endpoint.\"), mdx(\"h2\", null, \"ZIO NIO\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zio.github.io/zio-nio/\"\n  }, \"ZIO NIO\"), \" is a small, unopinionated ZIO interface to NIO.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"In Java, there are two packages for I/O operations:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Java IO (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.io\"), \")\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard Java IO API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Introduced since Java 1.0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stream-based API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Blocking I/O operation\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Java NIO (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.nio\"), \")\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Introduced since Java 1.4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NIO means \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"New IO\"), \", an alternative to the standard Java IO API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It can operate in a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"non-blocking mode\"), \" if possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buffer-based API\")))), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html\"\n  }, \"Java NIO\"), \" is an alternative to the Java IO API. Because it supports non-blocking IO, it can be more performant in concurrent environments like web services.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"ZIO NIO is a ZIO wrapper on Java NIO. It comes in two flavors:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"zio.nio.core\")), \" \\u2014 a small and unopionanted ZIO interface to NIO that just wraps NIO API in ZIO effects,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"zio.nio\")), \" \\u2014 an opinionated interface with deeper ZIO integration that provides more type and resource safety.\")), mdx(\"p\", null, \"In order to use this library, we need to add one of the following lines in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-nio-core\\\" % \\\"1.0.0-RC11\\\"\\nlibraryDependencies += \\\"dev.zio\\\" %% \\\"zio-nio\\\"      % \\\"1.0.0-RC11\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's try writing a simple server using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio-nio\"), \" module: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio._\\nimport zio.console._\\nimport zio.nio.channels._\\nimport zio.nio.core._\\nimport zio.stream._\\n\\nobject ZIONIOServerExample extends zio.App {\\n  val myApp =\\n    AsynchronousServerSocketChannel()\\n      .use(socket =>\\n        for {\\n          addr <- InetSocketAddress.hostName(\\\"localhost\\\", 8080)\\n          _ <- socket.bindTo(addr)\\n          _ <- putStrLn(s\\\"Waiting for incoming connections on $addr endpoint\\\").orDie\\n          _ <- ZStream\\n            .repeatEffect(socket.accept.preallocate)\\n            .map(_.withEarlyRelease)\\n            .mapMPar(16) {\\n              _.use { case (closeConn, channel) =>\\n                for {\\n                  _ <- putStrLn(\\\"Received connection\\\").orDie\\n                  data <- ZStream\\n                    .repeatEffectOption(\\n                      channel.readChunk(64).eofCheck.orElseFail(None)\\n                    )\\n                    .flattenChunks\\n                    .transduce(ZTransducer.utf8Decode)\\n                    .run(Sink.foldLeft(\\\"\\\")(_ + _))\\n                  _ <- closeConn\\n                  _ <- putStrLn(s\\\"Request Received:\\\\n${data.mkString}\\\").orDie\\n                } yield ()\\n              }\\n            }.runDrain\\n        } yield ()\\n      ).orDie\\n   \\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")), mdx(\"p\", null, \"Now we can send our requests to the server using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"curl\"), \" command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"curl -X POST localhost:8080 -d \\\"Hello, ZIO NIO!\\\"\\n\")), mdx(\"h2\", null, \"ZIO Optics\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-optics\"\n  }, \"ZIO Optics\"), \" is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"When we are working with immutable nested data structures, updating and reading operations could be tedious with lots of boilerplates. Optics is a functional programming construct that makes these operations more clear and readable.\"), mdx(\"p\", null, \"Key features of ZIO Optics:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Unified Optic Data Type\"), \" \\u2014 All the data types like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Lens\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Prism\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optional\"), \", and so forth are type aliases for the core \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optic\"), \" data type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Composability\"), \" \\u2014 We can compose optics to create more advanced ones.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Embracing the Tremendous Power of Concretion\"), \" \\u2014 Using concretion instead of unnecessary abstractions, makes the API more ergonomic and easy to use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Integration with ZIO Data Types\"), \" \\u2014 It supports effectful and transactional optics that works with ZIO data structures like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ref\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TMap\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Helpful Error Channel\"), \" \\u2014 Like ZIO, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optics\"), \" data type has error channels to include failure details.\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-optics\\\" % \\\"0.1.0\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example, we are going to update a nested data structure using ZIO Optics:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.optics._\\n\\ncase class Developer(name: String, manager: Manager)\\ncase class Manager(name: String, rating: Rating)\\ncase class Rating(upvotes: Int, downvotes: Int)\\n\\nval developerLens = Lens[Developer, Manager](\\n  get = developer => Right(developer.manager),\\n  set = manager => developer => Right(developer.copy(manager = manager))\\n)\\n\\nval managerLens = Lens[Manager, Rating](\\n  get = manager => Right(manager.rating),\\n  set = rating => manager => Right(manager.copy(rating = rating))\\n)\\n\\nval ratingLens = Lens[Rating, Int](\\n  get = rating => Right(rating.upvotes),\\n  set = upvotes => rating => Right(rating.copy(upvotes = upvotes))\\n)\\n\\n// Composing lenses\\nval optic = developerLens >>> managerLens >>> ratingLens\\n\\nval jane    = Developer(\\\"Jane\\\", Manager(\\\"Steve\\\", Rating(0, 0)))\\nval updated = optic.update(jane)(_ + 1)\\n\\nprintln(updated)\\n\")), mdx(\"h2\", null, \"ZIO Prelude\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-prelude\"\n  }, \"ZIO Prelude\"), \" is a lightweight, distinctly Scala take on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"functional abstractions\"), \", with tight ZIO integration.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Prelude is a small library that brings common, useful algebraic abstractions and data types to scala developers.\"), mdx(\"p\", null, \"It is an alternative to libraries like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Scalaz\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Cats\"), \" based on radical ideas that embrace \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"modularity\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"subtyping\"), \" in Scala and offer \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new levels of power and ergonomics\"), \". It throws out the classic functor hierarchy in favor of a modular algebraic approach that is smaller, easier to understand and teach, and more expressive.\"), mdx(\"p\", null, \"Design principles behind ZIO Prelude:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Radical\"), \" \\u2014 So basically it ignores all dogma and it is completely written with a new mindset.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Orthogonality\"), \" \\u2014 The goal for ZIO Prelude is to have no overlap. Type classes should do one thing and fit it well. So there is not any duplication to describe type classes.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Principled\"), \" \\u2014 All type classes in ZIO Prelude include a set of laws that instances must obey.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pragmatic\"), \" \\u2014 If we have data types that don't satisfy laws but that are still useful to use in most cases, we can go ahead and provide instances for them.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Scala-First\"), \" - It embraces subtyping and benefit from object-oriented features of Scala.\")), mdx(\"p\", null, \"ZIO Prelude gives us:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data Types\"), \" that complements the Scala Standard Library:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NonEmptyList\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NonEmptySet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZSet\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZNonEmptySet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Validation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZPure\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Type Classes\"), \" to describe similarities across different types to eliminate duplications and boilerplates:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Business entities (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Person\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ShoppingCart\"), \", etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effect-like structures (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Try\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Future\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Either\"), \", etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collection-like structures (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"List\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Tree\"), \", etc.)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"New Types\"), \" that allow to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"increase type safety\"), \" in domain modeling. Wrapping existing type adding no runtime overhead.\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-prelude\\\" % \\\"1.0.0-RC5\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example, we are going to create a simple voting application. We will use two features of ZIO Prelude:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To become more type safety we are going to use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"New Types\"), \" and introducing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Topic\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Votes\"), \" data types.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Providing instance of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Associative\"), \" type class for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Votes\"), \" data type which helps us to combine \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Votes\"), \" values.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.prelude._\\n\\nobject VotingExample extends scala.App {\\n\\n  object Votes extends Subtype[Int] {\\n    implicit val associativeVotes: Associative[Votes] =\\n      new Associative[Votes] {\\n        override def combine(l: => Votes, r: => Votes): Votes =\\n          Votes(l + r)\\n      }\\n  }\\n  type Votes = Votes.Type\\n\\n  object Topic extends Subtype[String]\\n  type Topic = Topic.Type\\n\\n  final case class VoteState(map: Map[Topic, Votes]) { self =>\\n    def combine(that: VoteState): VoteState =\\n      VoteState(self.map combine that.map)\\n  }\\n\\n  val zioHttp    = Topic(\\\"zio-http\\\")\\n  val uziHttp    = Topic(\\\"uzi-http\\\")\\n  val zioTlsHttp = Topic(\\\"zio-tls-http\\\")\\n\\n  val leftVotes  = VoteState(Map(zioHttp -> Votes(4), uziHttp -> Votes(2)))\\n  val rightVotes = VoteState(Map(zioHttp -> Votes(2), zioTlsHttp -> Votes(2)))\\n\\n  println(leftVotes combine rightVotes)\\n  // Output: VoteState(Map(zio-http -> 6, uzi-http -> 2, zio-tls-http -> 2))\\n}\\n\")), mdx(\"h2\", null, \"ZIO Process\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-process\"\n  }, \"ZIO Process\"), \" is a simple ZIO library for interacting with external processes and command-line programs.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Process provides a principled way to call out to external programs from within a ZIO application while leveraging ZIO's capabilities like interruptions and offloading blocking operations to a separate thread pool. We don't need to worry about avoiding these common pitfalls as we would if we were to use Java's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProcessBuilder\"), \" or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scala.sys.process\"), \" API since it is already taken care of for you.\"), mdx(\"p\", null, \"Key features of the ZIO Process:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Deep ZIO Integration\"), \" \\u2014 Leverages ZIO to handle interruption and offload blocking operations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Streams\"), \" \\u2014 ZIO Process is backed by ZIO Streams, which enables us to obtain the command output as streams of bytes or lines. So we can work with processes that output gigabytes of data without worrying about exceeding memory constraints.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Descriptive Errors\"), \" \\u2014 In case of command failure, it has a descriptive category of errors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Piping\"), \" \\u2014 It has a simple DSL for piping the output of one command as the input of another.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Blocking Operations\"), \" \\u2014\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-process\\\" % \\\"0.5.0\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Here is a simple example of using ZIO Process:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.putStrLn\\nimport zio.process.Command\\nimport zio.{ExitCode, URIO}\\n\\nimport java.io.File\\n\\nobject ZIOProcessExample extends zio.App {\\n\\n  val myApp = for {\\n    fiber <- Command(\\\"dmesg\\\", \\\"--follow\\\").linesStream\\n      .foreach(putStrLn(_))\\n      .fork\\n    cpuModel <- (Command(\\\"cat\\\", \\\"/proc/cpuinfo\\\") |\\n      Command(\\\"grep\\\", \\\"model name\\\") |\\n      Command(\\\"head\\\", \\\"-n\\\", \\\"1\\\") |\\n      Command(\\\"cut\\\", \\\"-d\\\", \\\":\\\", \\\"-f\\\", \\\"2\\\")).string\\n    _ <- putStrLn(s\\\"CPU Model: $cpuModel\\\")\\n    _ <- (Command(\\\"pg_dump\\\", \\\"my_database\\\") > new File(\\\"dump.sql\\\")).exitCode\\n    _ <- fiber.join\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO Query\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-query\"\n  }, \"ZIO Query\"), \" is a library for writing optimized queries to data sources in a high-level compositional style. It can add efficient pipelining, batching, and caching to any data source.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Some key features of ZIO Query:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Batching\"), \" \\u2014 ZIO Query detects parts of composite queries that can be executed in parallel without changing the semantics of the query.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pipelining\"), \" \\u2014 ZIO Query detects parts of composite queries that can be combined together for fewer individual requests to the data source.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Caching\"), \" \\u2014 ZIO Query can transparently cache read queries to minimize the cost of fetching the same item repeatedly in the scope of a query.\"))), mdx(\"p\", null, \"Assume we have the following database access layer APIs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def getAllUserIds: ZIO[Any, Nothing, List[Int]] = {\\n  // Get all user IDs e.g. SELECT id FROM users\\n  ZIO.succeed(???)\\n}\\n\\ndef getUserNameById(id: Int): ZIO[Any, Nothing, String] = {\\n  // Get user by ID e.g. SELECT name FROM users WHERE id = $id\\n  ZIO.succeed(???)\\n}\\n\")), mdx(\"p\", null, \"We can get their corresponding usernames from the database by the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val userNames = for {\\n  ids   <- getAllUserIds\\n  names <- ZIO.foreachPar(ids)(getUserNameById)\\n} yield names\\n\")), mdx(\"p\", null, \"It works, but this is not performant. It is going to query the underlying database \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"N + 1\"), \" times.\"), mdx(\"p\", null, \"In this case, ZIO Query helps us to write an optimized query that is going to perform two queries (one for getting user IDs and one for getting all usernames).\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-query\\\" % \\\"0.2.9\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Here is an example of using ZIO Query, which optimizes multiple database queries by batching all of them in one query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.putStrLn\\nimport zio.query.{CompletedRequestMap, DataSource, Request, ZQuery}\\nimport zio.{Chunk, ExitCode, Task, URIO, ZIO}\\n\\nimport scala.collection.immutable.AbstractSeq\\n\\nobject ZQueryExample extends zio.App {\\n  case class GetUserName(id: Int) extends Request[Nothing, String]\\n\\n  lazy val UserDataSource: DataSource.Batched[Any, GetUserName] =\\n    new DataSource.Batched[Any, GetUserName] {\\n      val identifier: String = \\\"UserDataSource\\\"\\n\\n      def run(requests: Chunk[GetUserName]): ZIO[Any, Nothing, CompletedRequestMap] = {\\n        val resultMap = CompletedRequestMap.empty\\n        requests.toList match {\\n          case request :: Nil =>\\n            val result: Task[String] = {\\n              // get user by ID e.g. SELECT name FROM users WHERE id = $id\\n              ZIO.succeed(???)\\n            }\\n\\n            result.either.map(resultMap.insert(request))\\n\\n          case batch: Seq[GetUserName] =>\\n            val result: Task[List[(Int, String)]] = {\\n              // get multiple users at once e.g. SELECT id, name FROM users WHERE id IN ($ids)\\n              ZIO.succeed(???)\\n            }\\n\\n            result.fold(\\n              err =>\\n                requests.foldLeft(resultMap) { case (map, req) =>\\n                  map.insert(req)(Left(err))\\n                },\\n              _.foldLeft(resultMap) { case (map, (id, name)) =>\\n                map.insert(GetUserName(id))(Right(name))\\n              }\\n            )\\n        }\\n      }\\n    }\\n\\n  def getUserNameById(id: Int): ZQuery[Any, Nothing, String] =\\n    ZQuery.fromRequest(GetUserName(id))(UserDataSource)\\n\\n  val query: ZQuery[Any, Nothing, List[String]] =\\n    for {\\n      ids <- ZQuery.succeed(1 to 10)\\n      names <- ZQuery.foreachPar(ids)(id => getUserNameById(id)).map(_.toList)\\n    } yield (names)\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    query.run\\n      .tap(usernames => putStrLn(s\\\"Usernames: $usernames\\\"))\\n      .exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO Redis\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-redis\"\n  }, \"ZIO Redis\"), \" is a ZIO native Redis client.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO Redis is in the experimental phase of development, but its goals are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Type Safety\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Minimum Dependency\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ZIO Native\"))), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"Since the ZIO Redis is in the experimental phase, it is not released yet.\"), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"To execute our ZIO Redis effect, we should provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RedisExecutor\"), \" layer to that effect. To create this layer we should also provide the following layers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Logging\"), \" \\u2014 For simplicity, we ignored the logging functionality.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"RedisConfig\"), \" \\u2014 Using default one, will connect to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"localhost:6379\"), \" Redis instance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Codec\"), \" \\u2014 In this example, we are going to use the built-in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"StringUtf8Codec\"), \" codec.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.{Console, putStrLn}\\nimport zio.duration._\\nimport zio.logging.Logging\\nimport zio.redis._\\nimport zio.redis.codec.StringUtf8Codec\\nimport zio.schema.codec.Codec\\nimport zio.{ExitCode, URIO, ZIO, ZLayer}\\n\\nobject ZIORedisExample extends zio.App {\\n\\n  val myApp: ZIO[Console with RedisExecutor, RedisError, Unit] = for {\\n    _ <- set(\\\"myKey\\\", 8L, Some(1.minutes))\\n    v <- get[String, Long](\\\"myKey\\\")\\n    _ <- putStrLn(s\\\"Value of myKey: $v\\\").orDie\\n    _ <- hSet(\\\"myHash\\\", (\\\"k1\\\", 6), (\\\"k2\\\", 2))\\n    _ <- rPush(\\\"myList\\\", 1, 2, 3, 4)\\n    _ <- sAdd(\\\"mySet\\\", \\\"a\\\", \\\"b\\\", \\\"a\\\", \\\"c\\\")\\n  } yield ()\\n\\n  val layer: ZLayer[Any, RedisError.IOError, RedisExecutor] =\\n    Logging.ignore ++ ZLayer.succeed(RedisConfig.Default) ++ ZLayer.succeed(StringUtf8Codec) >>> RedisExecutor.live\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp.provideCustomLayer(layer).exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO RocksDB\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-rocksdb\"\n  }, \"ZIO RocksDB\"), \" is a ZIO-based interface to RocksDB.\"), mdx(\"p\", null, \"Rocksdb is an embeddable persistent key-value store that is optimized for fast storage. ZIO RocksDB provides us a functional ZIO wrapper around its Java API. \"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-rocksdb\\\" % \\\"0.3.0\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"An example of writing and reading key/value pairs and also using transactional operations when using RocksDB:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console._\\nimport zio.rocksdb.{RocksDB, Transaction, TransactionDB}\\nimport zio.{URIO, ZIO}\\n\\nimport java.nio.charset.StandardCharsets._\\n\\nobject ZIORocksDBExample extends zio.App {\\n\\n  private def bytesToString(bytes: Array[Byte]): String = new String(bytes, UTF_8)\\n  private def bytesToInt(bytes: Array[Byte]): Int = bytesToString(bytes).toInt\\n\\n  val job1: ZIO[Console with RocksDB, Throwable, Unit] =\\n    for {\\n      _ <- RocksDB.put(\\n        \\\"Key\\\".getBytes(UTF_8),\\n        \\\"Value\\\".getBytes(UTF_8)\\n      )\\n      result <- RocksDB.get(\\\"Key\\\".getBytes(UTF_8))\\n      stringResult = result.map(bytesToString)\\n      _ <- putStrLn(s\\\"value: $stringResult\\\")\\n    } yield ()\\n\\n\\n  val job2: ZIO[Console with TransactionDB, Throwable, Unit] =\\n    for {\\n      key <- ZIO.succeed(\\\"COUNT\\\".getBytes(UTF_8))\\n      _ <- TransactionDB.put(key, 0.toString.getBytes(UTF_8))\\n      _ <- ZIO.foreachPar(0 until 10) { _ =>\\n        TransactionDB.atomically {\\n          Transaction.getForUpdate(key, exclusive = true) >>= { iCount =>\\n            Transaction.put(key, iCount.map(bytesToInt).map(_ + 1).getOrElse(-1).toString.getBytes(UTF_8))\\n          }\\n        }\\n      }\\n      value <- TransactionDB.get(key)\\n      counterValue = value.map(bytesToInt)\\n      _ <- putStrLn(s\\\"The value of counter: $counterValue\\\") // Must be 10\\n    } yield ()\\n\\n  private val transactional_db =\\n    TransactionDB.live(new org.rocksdb.Options().setCreateIfMissing(true), \\\"tr_db\\\")\\n\\n  private val rocks_db =\\n    RocksDB.live(new org.rocksdb.Options().setCreateIfMissing(true), \\\"rocks_db\\\")\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, Int] =\\n    (job1 <*> job2)\\n      .provideCustomLayer(transactional_db ++ rocks_db)\\n      .foldCauseM(cause => putStrLn(cause.prettyPrint) *> ZIO.succeed(1), _ => ZIO.succeed(0))\\n}\\n\")), mdx(\"h2\", null, \"ZIO S3\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-s3\"\n  }, \"ZIO S3\"), \" is an S3 client for ZIO.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-s3\\\" % \\\"0.3.5\\\" \\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Let's try an example of creating a bucket and adding an object into it. To run this example, we need to run an instance of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Minio\"), \" which is object storage compatible with S3:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker run -p 9000:9000 -e MINIO_ACCESS_KEY=MyKey -e MINIO_SECRET_KEY=MySecret minio/minio  server --compat /data\\n\")), mdx(\"p\", null, \"In this example we create a bucket and then add a JSON object to it and then retrieve that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\\nimport software.amazon.awssdk.regions.Region\\nimport zio.console.putStrLn\\nimport zio.s3._\\nimport zio.stream.{ZStream, ZTransducer}\\nimport zio.{Chunk, ExitCode, URIO}\\n\\nimport java.net.URI\\n\\nobject ZIOS3Example extends zio.App {\\n\\n  val myApp = for {\\n    _ <- createBucket(\\\"docs\\\")\\n    json = Chunk.fromArray(\\\"\\\"\\\"{  \\\"id\\\" : 1 , \\\"name\\\" : \\\"A1\\\" }\\\"\\\"\\\".getBytes)\\n    _ <- putObject(\\n      bucketName = \\\"docs\\\",\\n      key = \\\"doc1\\\",\\n      contentLength = json.length,\\n      content = ZStream.fromChunk(json),\\n      options = UploadOptions.fromContentType(\\\"application/json\\\")\\n    )\\n    _ <- getObject(\\\"docs\\\", \\\"doc1\\\")\\n      .transduce(ZTransducer.utf8Decode)\\n      .foreach(putStrLn(_))\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    myApp\\n      .provideCustomLayer(\\n        live(\\n          Region.CA_CENTRAL_1,\\n          AwsBasicCredentials.create(\\\"MyKey\\\", \\\"MySecret\\\"),\\n          Some(URI.create(\\\"http://localhost:9000\\\"))\\n        )\\n      )\\n      .exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO Schema\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-schema\"\n  }, \"ZIO Schema\"), \" is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zio.dev\"\n  }, \"ZIO\"), \"-based library for modeling the schema of data structures as first-class values.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them as first-class values.\"), mdx(\"p\", null, \"Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth.\"), mdx(\"p\", null, \"With schema descriptions that can be automatically derived for case classes and sealed traits, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Schema\"), \" will be going to provide powerful features for free (Note that the project is in the development stage and all these features are not supported yet):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Codecs for any supported protocol (JSON, protobuf, etc.), so data structures can be serialized and deserialized in a principled way\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Diffing, patching, merging, and other generic-data-based operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Migration of data structures from one schema to another compatible schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Derivation of arbitrary type classes (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Eq\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Show\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ord\"), \", etc.) from the structure of the data\")), mdx(\"p\", null, \"When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ZIO Schema\"), \" lets us focus on data modeling and automatically tackle all the low-level, messy details for us.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-schema\\\" % \\\"0.0.6\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this simple example first, we create a schema for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" and then run the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"diff\"), \" operation on two instances of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" data type, and finally we encode a Person instance using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Protobuf\"), \" protocol:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zio.console.putStrLn\\nimport zio.schema.codec.ProtobufCodec._\\nimport zio.schema.{DeriveSchema, Schema}\\nimport zio.stream.ZStream\\nimport zio.{Chunk, ExitCode, URIO}\\n\\nfinal case class Person(name: String, age: Int, id: String)\\nobject Person {\\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\\n}\\n\\nPerson.schema\\n// res5: Schema[Person] = CaseClass3(\\n//   annotations = IndexedSeq(),\\n//   field1 = Field(\\n//     label = \\\"name\\\",\\n//     schema = Lazy(\\n//       schema0 = zio.schema.DeriveSchema$$$Lambda$4682/0x0000000801750440@72f0655\\n//     ),\\n//     annotations = IndexedSeq()\\n//   ),\\n//   field2 = Field(\\n//     label = \\\"age\\\",\\n//     schema = Lazy(\\n//       schema0 = zio.schema.DeriveSchema$$$Lambda$4683/0x0000000801757840@2e7ea5cb\\n//     ),\\n//     annotations = IndexedSeq()\\n//   ),\\n//   field3 = Field(\\n//     label = \\\"id\\\",\\n//     schema = Lazy(\\n//       schema0 = zio.schema.DeriveSchema$$$Lambda$4684/0x0000000801757c40@3617969f\\n//     ),\\n//     annotations = IndexedSeq()\\n//   ),\\n//   construct = zio.schema.DeriveSchema$$$Lambda$4685/0x0000000801757040@53dc8fb6,\\n//   extractField1 = zio.schema.DeriveSchema$$$Lambda$4686/0x0000000801756840@2cbe3636,\\n//   extractField2 = zio.schema.DeriveSchema$$$Lambda$4687/0x0000000801755840@77359e97,\\n//   extractField3 = zio.schema.DeriveSchema$$$Lambda$4688/0x0000000801755040@7d9c4d80\\n// )\\n\\nimport zio.schema.syntax._\\n\\nPerson(\\\"Alex\\\", 31, \\\"0123\\\").diff(Person(\\\"Alex\\\", 31, \\\"124\\\"))\\n// res6: schema.Diff = Record(\\n//   differences = ListMap(\\n//     \\\"name\\\" -> Identical,\\n//     \\\"age\\\" -> Identical,\\n//     \\\"id\\\" -> Myers(\\n//       edits = IndexedSeq(\\n//         Delete(s = \\\"0\\\"),\\n//         Keep(s = \\\"1\\\"),\\n//         Keep(s = \\\"2\\\"),\\n//         Insert(s = \\\"4\\\"),\\n//         Delete(s = \\\"3\\\")\\n//       )\\n//     )\\n//   )\\n// )\\n\\ndef toHex(chunk: Chunk[Byte]): String =\\n  chunk.toArray.map(\\\"%02X\\\".format(_)).mkString\\n\\nzio.Runtime.default.unsafeRun(\\n  ZStream\\n    .succeed(Person(\\\"Thomas\\\", 23, \\\"2354\\\"))\\n    .transduce(\\n      encoder(Person.schema)\\n    )\\n    .runCollect\\n    .flatMap(x => putStrLn(s\\\"Encoded data with protobuf codec: ${toHex(x)}\\\"))\\n)\\n// Encoded data with protobuf codec: 0A0654686F6D617310171A0432333534\\n\")), mdx(\"h2\", null, \"ZIO SQS\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-sqs\"\n  }, \"ZIO SQS\"), \" is a ZIO-powered client for AWS SQS. It is built on top of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics.html\"\n  }, \"AWS SDK for Java 2.0\"), \" via the automatically generated wrappers from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gaithub.com/vigoo/zio-aws\"\n  }, \"zio-aws\"), \".\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"ZIO SQS enables us to produce and consume elements to/from the Amazon SQS service. It is integrated with ZIO Streams, so we can produce and consume elements in a streaming fashion, element by element or micro-batching.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-sqs\\\" % \\\"0.4.2\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example we produce a stream of events to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyQueue\"), \" and then consume them from that queue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.github.vigoo.zioaws\\nimport io.github.vigoo.zioaws.core.config.CommonAwsConfig\\nimport io.github.vigoo.zioaws.sqs.Sqs\\nimport software.amazon.awssdk.auth.credentials.{\\n  AwsBasicCredentials,\\n  StaticCredentialsProvider\\n}\\nimport software.amazon.awssdk.regions.Region\\nimport zio.clock.Clock\\nimport zio.sqs.producer.{Producer, ProducerEvent}\\nimport zio.sqs.serialization.Serializer\\nimport zio.sqs.{SqsStream, SqsStreamSettings, Utils}\\nimport zio.stream.ZStream\\nimport zio.{ExitCode, RIO, URIO, ZLayer, _}\\n\\nobject ProducerConsumerExample extends zio.App {\\n  val queueName = \\\"MyQueue\\\"\\n\\n  val client: ZLayer[Any, Throwable, Sqs] = zioaws.netty.default ++\\n    ZLayer.succeed(\\n      CommonAwsConfig(\\n        region = Some(Region.of(\\\"ap-northeast-2\\\")),\\n        credentialsProvider = StaticCredentialsProvider.create(\\n          AwsBasicCredentials.create(\\\"key\\\", \\\"key\\\")\\n        ),\\n        endpointOverride = None,\\n        commonClientConfig = None\\n      )\\n    ) >>>\\n    zioaws.core.config.configured() >>>\\n    zioaws.sqs.live\\n\\n  val stream: ZStream[Any, Nothing, ProducerEvent[String]] =\\n    ZStream.iterate(0)(_ + 1).map(_.toString).map(ProducerEvent(_))\\n\\n  val program: RIO[Sqs with Clock, Unit] = for {\\n    _        <- Utils.createQueue(queueName)\\n    queueUrl <- Utils.getQueueUrl(queueName)\\n    producer = Producer.make(queueUrl, Serializer.serializeString)\\n    _ <- producer.use { p =>\\n      p.sendStream(stream).runDrain\\n    }\\n    _ <- SqsStream(\\n      queueUrl,\\n      SqsStreamSettings(stopWhenQueueEmpty = true, waitTimeSeconds = Some(3))\\n    ).foreach(msg => UIO(println(msg.body)))\\n  } yield ()\\n\\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\\n    program.provideCustomLayer(client).exitCode\\n}\\n\")), mdx(\"h2\", null, \"ZIO Telemetry\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-telemetry\"\n  }, \"ZIO telemetry\"), \" is purely-functional and type-safe. It provides clients for OpenTracing and OpenTelemetry.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"In monolithic architecture, everything is in one place, and we know when a request starts and then how it goes through the components and when it finishes. We can obviously see what is happening with our request and where is it going. But, in distributed systems like microservice architecture, we cannot find out the story of a request through various services easily. This is where distributed tracing comes into play.\"), mdx(\"p\", null, \"ZIO Telemetry is a purely functional client which helps up propagate context between services in a distributed environment.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file if we want to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/\"\n  }, \"OpenTelemetry\"), \" client:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-telemetry\\\" % \\\"0.8.1\\\"\\n\")), mdx(\"p\", null, \"And for using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentracing.io/\"\n  }, \"OpenTracing\"), \" client we should add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-opentracing\\\" % \\\"0.8.1\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"In this example, we create two services, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProxyServer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BackendServer\"), \". When we call ProxyServer, the BackendServer will be called.\"), mdx(\"p\", null, \"Note that we are going to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"OpenTracing\"), \" client for this example.\"), mdx(\"p\", null, \"Here is a simplified diagram of our services:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"                               \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                               \\u2502                \\u2502\\n                        \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u25BA\\u2502 Jaeger Backend \\u2502\\u25C4\\u2500\\u2500\\u2500\\u2500\\u2510\\n                        \\u2502      \\u2502                \\u2502     \\u2502\\n           Tracing Data \\u2502      \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518     \\u2502 Tracing Data\\n                        \\u2502                             \\u2502\\n               \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510         \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n               \\u2502                  \\u2502         \\u2502                  \\u2502\\nUser Request\\u2500\\u2500\\u25BA\\u2502   Proxy Server   \\u251C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u25BA|  Backend Server  \\u2502\\n               \\u2502                  \\u2502         \\u2502                  \\u2502\\n               \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518         \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\")), mdx(\"p\", null, \"First of all we should add following dependencies to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"object Versions {\\n  val http4s         = \\\"0.21.24\\\"\\n  val jaeger         = \\\"1.6.0\\\"\\n  val sttp           = \\\"2.2.9\\\"\\n  val opentracing    = \\\"0.33.0\\\"\\n  val opentelemetry  = \\\"1.4.1\\\"\\n  val opencensus     = \\\"0.28.3\\\"\\n  val zipkin         = \\\"2.16.3\\\"\\n  val zio            = \\\"1.0.9\\\"\\n  val zioInteropCats = \\\"2.5.1.0\\\"\\n}\\n\\nlazy val openTracingExample = Seq(\\n  \\\"org.typelevel\\\"                %% \\\"cats-core\\\"                     % \\\"2.6.1\\\",\\n  \\\"io.circe\\\"                     %% \\\"circe-generic\\\"                 % \\\"0.14.1\\\",\\n  \\\"org.http4s\\\"                   %% \\\"http4s-core\\\"                   % Versions.http4s,\\n  \\\"org.http4s\\\"                   %% \\\"http4s-blaze-server\\\"           % Versions.http4s,\\n  \\\"org.http4s\\\"                   %% \\\"http4s-dsl\\\"                    % Versions.http4s,\\n  \\\"org.http4s\\\"                   %% \\\"http4s-circe\\\"                  % Versions.http4s,\\n  \\\"io.jaegertracing\\\"              % \\\"jaeger-core\\\"                   % Versions.jaeger,\\n  \\\"io.jaegertracing\\\"              % \\\"jaeger-client\\\"                 % Versions.jaeger,\\n  \\\"io.jaegertracing\\\"              % \\\"jaeger-zipkin\\\"                 % Versions.jaeger,\\n  \\\"com.github.pureconfig\\\"        %% \\\"pureconfig\\\"                    % \\\"0.16.0\\\",\\n  \\\"com.softwaremill.sttp.client\\\" %% \\\"async-http-client-backend-zio\\\" % Versions.sttp,\\n  \\\"com.softwaremill.sttp.client\\\" %% \\\"circe\\\"                         % Versions.sttp,\\n  \\\"dev.zio\\\"                      %% \\\"zio-interop-cats\\\"              % Versions.zioInteropCats,\\n  \\\"io.zipkin.reporter2\\\"           % \\\"zipkin-reporter\\\"               % Versions.zipkin,\\n  \\\"io.zipkin.reporter2\\\"           % \\\"zipkin-sender-okhttp3\\\"         % Versions.zipkin\\n)\\n\")), mdx(\"p\", null, \"Let's create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZLayer\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTracing\"), \" which provides us Jaeger tracer. Each microservice uses this layer to send its tracing data to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Jaeger Backend\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.jaegertracing.Configuration\\nimport io.jaegertracing.internal.samplers.ConstSampler\\nimport io.jaegertracing.zipkin.ZipkinV2Reporter\\nimport org.apache.http.client.utils.URIBuilder\\nimport zio.ZLayer\\nimport zio.clock.Clock\\nimport zio.telemetry.opentracing.OpenTracing\\nimport zipkin2.reporter.AsyncReporter\\nimport zipkin2.reporter.okhttp3.OkHttpSender\\n\\nobject JaegerTracer {\\n  def makeJaegerTracer(host: String, serviceName: String): ZLayer[Clock, Throwable, Clock with OpenTracing] =\\n    OpenTracing.live(new Configuration(serviceName)\\n      .getTracerBuilder\\n      .withSampler(new ConstSampler(true))\\n      .withReporter(\\n        new ZipkinV2Reporter(\\n          AsyncReporter.create(\\n            OkHttpSender.newBuilder\\n              .compressionEnabled(true)\\n              .endpoint(\\n                new URIBuilder()\\n                  .setScheme(\\\"http\\\")\\n                  .setHost(host)\\n                  .setPath(\\\"/api/v2/spans\\\")\\n                  .build.toString\\n              )\\n              .build\\n          )\\n        )\\n      )\\n      .build\\n    ) ++ Clock.live\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"BackendServer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import io.opentracing.propagation.Format.Builtin.{HTTP_HEADERS => HttpHeadersFormat}\\nimport io.opentracing.propagation.TextMapAdapter\\nimport org.http4s._\\nimport org.http4s.dsl.Http4sDsl\\nimport org.http4s.server.Router\\nimport org.http4s.server.blaze.BlazeServerBuilder\\nimport org.http4s.syntax.kleisli._\\nimport zio.clock.Clock\\nimport zio.interop.catz._\\nimport zio.telemetry.opentracing._\\nimport JaegerTracer.makeJaegerTracer\\nimport zio.{ExitCode, ZEnv, ZIO}\\n\\nimport scala.jdk.CollectionConverters._\\n\\nobject BackendServer extends CatsApp {\\n  type AppTask[A] = ZIO[Clock, Throwable, A]\\n\\n  val dsl: Http4sDsl[AppTask] = Http4sDsl[AppTask]\\n  import dsl._\\n\\n  override def run(args: List[String]): ZIO[ZEnv, Nothing, ExitCode] =\\n    ZIO.runtime[Clock].flatMap { implicit runtime =>\\n      BlazeServerBuilder[AppTask](runtime.platform.executor.asEC)\\n        .bindHttp(port = 9000, host = \\\"0.0.0.0\\\")\\n        .withHttpApp(\\n          Router[AppTask](mappings = \\\"/\\\" ->\\n            HttpRoutes.of[AppTask] { case request@GET -> Root =>\\n              ZIO.unit\\n                .spanFrom(\\n                  format = HttpHeadersFormat,\\n                  carrier = new TextMapAdapter(request.headers.toList.map(h => h.name.value -> h.value).toMap.asJava),\\n                  operation = \\\"GET /\\\"\\n                )\\n                .provideLayer(makeJaegerTracer(host = \\\"0.0.0.0:9411\\\", serviceName = \\\"backend-service\\\")) *> Ok(\\\"Ok!\\\")\\n            }\\n          ).orNotFound\\n        )\\n        .serve\\n        .compile\\n        .drain\\n    }.exitCode\\n}\\n\")), mdx(\"p\", null, \"And the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ProxyServer\"), \" which calls the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"BackendServer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import cats.effect.{ExitCode => catsExitCode}\\nimport io.opentracing.propagation.Format.Builtin.{HTTP_HEADERS => HttpHeadersFormat}\\nimport io.opentracing.propagation.TextMapAdapter\\nimport io.opentracing.tag.Tags\\nimport org.http4s.HttpRoutes\\nimport org.http4s.dsl.Http4sDsl\\nimport org.http4s.server.Router\\nimport org.http4s.server.blaze.BlazeServerBuilder\\nimport org.http4s.syntax.kleisli._\\nimport sttp.client.asynchttpclient.zio.AsyncHttpClientZioBackend\\nimport sttp.client.basicRequest\\nimport sttp.model.Uri\\nimport zio.clock.Clock\\nimport zio.interop.catz._\\nimport zio.telemetry.opentracing.OpenTracing\\nimport JaegerTracer.makeJaegerTracer\\nimport zio.{ExitCode, UIO, ZEnv, ZIO}\\n\\nimport scala.collection.mutable\\nimport scala.jdk.CollectionConverters._\\n\\nobject ProxyServer extends CatsApp {\\n\\n  type AppTask[A] = ZIO[Clock, Throwable, A]\\n\\n  private val backend = AsyncHttpClientZioBackend()\\n\\n  override def run(args: List[String]): ZIO[ZEnv, Nothing, ExitCode] =\\n    ZIO.runtime[Clock].flatMap { implicit runtime =>\\n      implicit val ec = runtime.platform.executor.asEC\\n      BlazeServerBuilder[AppTask](ec)\\n        .bindHttp(port = 8080, host = \\\"0.0.0.0\\\")\\n        .withHttpApp(\\n          Router[AppTask](mappings = \\\"/\\\" -> {\\n            val dsl: Http4sDsl[AppTask] = Http4sDsl[AppTask]\\n            import dsl._\\n\\n            HttpRoutes.of[AppTask] { case GET -> Root =>\\n              (for {\\n                _ <- OpenTracing.tag(Tags.SPAN_KIND.getKey, Tags.SPAN_KIND_CLIENT)\\n                _ <- OpenTracing.tag(Tags.HTTP_METHOD.getKey, GET.name)\\n                _ <- OpenTracing.setBaggageItem(\\\"proxy-baggage-item-key\\\", \\\"proxy-baggage-item-value\\\")\\n                buffer = new TextMapAdapter(mutable.Map.empty[String, String].asJava)\\n                _ <- OpenTracing.inject(HttpHeadersFormat, buffer)\\n                headers <- extractHeaders(buffer)\\n                res <-\\n                  backend.flatMap { implicit backend =>\\n                    basicRequest.get(Uri(\\\"0.0.0.0\\\", 9000).path(\\\"/\\\")).headers(headers).send()\\n                  }.map(_.body)\\n                    .flatMap {\\n                      case Right(_) => Ok(\\\"Ok!\\\")\\n                      case Left(_) => Ok(\\\"Oops!\\\")\\n                    }\\n              } yield res)\\n                .root(operation = \\\"GET /\\\")\\n                .provideLayer(\\n                  makeJaegerTracer(host = \\\"0.0.0.0:9411\\\", serviceName = \\\"proxy-server\\\")\\n                )\\n            }\\n          }).orNotFound\\n        )\\n        .serve\\n        .compile[AppTask, AppTask, catsExitCode]\\n        .drain\\n        .as(ExitCode.success)\\n    }.exitCode\\n\\n  private def extractHeaders(adapter: TextMapAdapter): UIO[Map[String, String]] = {\\n    val m = mutable.Map.empty[String, String]\\n    UIO(adapter.forEach { entry =>\\n      m.put(entry.getKey, entry.getValue)\\n      ()\\n    }).as(m.toMap)\\n  }\\n\\n}\\n\")), mdx(\"p\", null, \"First, we run the following command to start Jaeger backend:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker run -d --name jaeger \\\\\\n  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\\\\n  -p 5775:5775/udp \\\\\\n  -p 6831:6831/udp \\\\\\n  -p 6832:6832/udp \\\\\\n  -p 5778:5778 \\\\\\n  -p 16686:16686 \\\\\\n  -p 14268:14268 \\\\\\n  -p 9411:9411 \\\\\\n  jaegertracing/all-in-one:1.6\\n\")), mdx(\"p\", null, \"It's time to run Backend and Proxy servers. After starting these two, we can start calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProxyServer\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"curl -X GET http://0.0.0.0:8080/\\n\")), mdx(\"p\", null, \"Now we can check the Jaeger service (http://localhost:16686/) to see the result.\"), mdx(\"h2\", null, \"ZIO ZMX\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/zio/zio-zmx\"\n  }, \"ZIO ZMX\"), \" is a monitoring, metrics, and diagnostics toolkit for ZIO applications.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"So ZIO ZMX is giving us a straightforward way to understand exactly what is going on in our ZIO application when we deploy that in production.\"), mdx(\"p\", null, \"ZIO ZMX key features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Easy Setup\"), \" \\u2014 It seamlessly integrates with an existing application. We don't need to change any line of the existing ZIO application, except a few lines of code at the top level.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Diagnostics\"), \" \\u2014  To track the activity of fibers in a ZIP application including fiber lifetimes and reason for termination.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Metrics\"), \" \\u2014 Tracking of user-defined metrics (Counter, Gauge, Histogram, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Integrations\"), \" \\u2014 Support for major metrics collection services including \", mdx(\"em\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/prometheus/prometheus\"\n  }, \"Prometheus\")), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/statsd/statsd\"\n  }, \"StatsD\")), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Zero Dependencies\"), \" - No dependencies other than ZIO itself.\")), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"In order to use this library, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"dev.zio\\\" %% \\\"zio-zmx\\\" % \\\"0.0.6\\\"\\n\")), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"To run this example, we also should add the following dependency in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sbt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"libraryDependencies += \\\"org.polynote\\\" %% \\\"uzhttp\\\" % \\\"0.2.7\\\"\\n\")), mdx(\"p\", null, \"In this example, we expose metric information using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \" protocol:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import uzhttp._\\nimport uzhttp.server.Server\\nimport zio._\\nimport zio.blocking.Blocking\\nimport zio.clock.Clock\\nimport zio.console._\\nimport zio.duration.durationInt\\nimport zio.zmx.metrics._\\nimport zio.zmx.prometheus.PrometheusClient\\n\\nimport java.io.IOException\\nimport java.lang\\nimport java.net.InetSocketAddress\\n\\nobject ZmxSampleApp extends zio.App {\\n\\n  val myApp: ZIO[Console with Clock with Has[PrometheusClient] with Blocking, IOException, Unit] =\\n    for {\\n      server <-\\n        Server\\n          .builder(new InetSocketAddress(\\\"localhost\\\", 8080))\\n          .handleSome { case request if request.uri.getPath == \\\"/\\\" =>\\n            PrometheusClient.snapshot.map(p => Response.plain(p.value))\\n          }\\n          .serve\\n          .use(_.awaitShutdown).fork\\n      program <-\\n        (for {\\n          _ <- (ZIO.sleep(1.seconds) *> request @@ MetricAspect.count(\\\"request_counts\\\")).forever.forkDaemon\\n          _ <- (ZIO.sleep(3.seconds) *>\\n            ZIO.succeed(\\n              lang.Runtime.getRuntime.totalMemory() - lang.Runtime.getRuntime.freeMemory()\\n            ).map(_ / (1024.0 * 1024.0)) @@ MetricAspect.setGauge(\\\"memory_usage\\\")).forever.forkDaemon\\n        } yield ()).fork\\n      _ <- putStrLn(\\\"Press Any Key\\\") *> getStrLn.catchAll(_ => ZIO.none) *> server.interrupt *> program.interrupt\\n    } yield ()\\n\\n  def run(args: List[String]): URIO[ZEnv, ExitCode] =\\n    myApp.provideCustomLayer(PrometheusClient.live).exitCode\\n\\n  private def request: UIO[Unit] = ZIO.unit\\n}\\n\")), mdx(\"p\", null, \"By calling the following API we can access metric information:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -X GET localhost:8080\\n\")), mdx(\"p\", null, \"Now we can config the Prometheus server to scrape metric information periodically.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-core/src/docs/resources/ecosystem/officials.md"}},"staticQueryHashes":[]}