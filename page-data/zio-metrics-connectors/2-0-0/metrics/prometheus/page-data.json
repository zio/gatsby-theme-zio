{"componentChunkName":"component---node-modules-atooni-gatsby-theme-ziodoc-src-components-simple-js","path":"/zio-metrics-connectors/2-0-0/metrics/prometheus","result":{"data":{"mdx":{"id":"66968df4-782e-5ad9-92b1-f7294afedf66","slug":"metrics/prometheus","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"id\": \"metrics_prometheus\",\n  \"title\": \"Prometheus Client\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In a normal prometheus setup we will find prometheus agents which query configured endpoints\\nat regular intervals. The endpoints are HTTP endpoints serving the current metric state in\\nan encoding defined by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\"\n  }, \"prometheus \"), \".\"), mdx(\"p\", null, \"ZMX provides the Prometheus encoding for the captured metrics out of the box. To avoid enforcing\\na particular HTTP implementation, an instrumented application needs to expose the encoded format\\nas an endpoint with the HTTP server of it\\xB4s choice. \"), mdx(\"h2\", null, \"ZMX Metrics in Prometheus\"), mdx(\"p\", null, \"Most of the ZMX metrics have a direct representation in the Prometheus encoding. \"), mdx(\"h3\", null, \"Counter\"), mdx(\"p\", null, \"A counter is represented as a prometheus counter. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE countAll counter\\n# HELP countAll \\ncountAll 460.0 1623586224730\\n\")), mdx(\"h3\", null, \"Gauge\"), mdx(\"p\", null, \"A gauge is represented as a prometheus gauge. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE adjustGauge gauge\\n# HELP adjustGauge \\nadjustGauge -1.2485836762095701 1623586224730\\n\")), mdx(\"h3\", null, \"Histogram\"), mdx(\"p\", null, \"A histogram is represented as a prometheus histogram. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE zmxHistogram histogram\\n# HELP zmxHistogram \\nzmxHistogram{le=\\\"0.0\\\"} 0.0 1623586224730\\nzmxHistogram{le=\\\"10.0\\\"} 8.0 1623586224730\\nzmxHistogram{le=\\\"20.0\\\"} 18.0 1623586224730\\nzmxHistogram{le=\\\"30.0\\\"} 30.0 1623586224730\\nzmxHistogram{le=\\\"40.0\\\"} 44.0 1623586224730\\nzmxHistogram{le=\\\"50.0\\\"} 51.0 1623586224730\\nzmxHistogram{le=\\\"60.0\\\"} 59.0 1623586224730\\nzmxHistogram{le=\\\"70.0\\\"} 65.0 1623586224730\\nzmxHistogram{le=\\\"80.0\\\"} 76.0 1623586224730\\nzmxHistogram{le=\\\"90.0\\\"} 88.0 1623586224730\\nzmxHistogram{le=\\\"100.0\\\"} 95.0 1623586224730\\nzmxHistogram{le=\\\"+Inf\\\"} 115.0 1623586224730\\nzmxHistogram_sum 6828.578655207023 1623586224730\\nzmxHistogram_count 115.0 1623586224730\\n\")), mdx(\"h3\", null, \"Summary\"), mdx(\"p\", null, \"A histogram is represented as a prometheus summary. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE mySummary summary\\n# HELP mySummary \\nmySummary{quantile=\\\"0.1\\\",error=\\\"0.03\\\"} 147.0 1623589839194\\nmySummary{quantile=\\\"0.5\\\",error=\\\"0.03\\\"} 286.0 1623589839194\\nmySummary{quantile=\\\"0.9\\\",error=\\\"0.03\\\"} 470.0 1623589839194\\nmySummary_sum 42582.0 1623589839194\\nmySummary_count 139.0 1623589839194\\n\")), mdx(\"h3\", null, \"Set\"), mdx(\"p\", null, \"A set is represented by a set of prometheus counters, distinguished from each other with an\\nextra label as configured in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"index.md#sets\"\n  }, \"aspect\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE mySet counter\\n# HELP mySet \\nmySet{token=\\\"myKey-17\\\"} 7.0 1623589839194\\nmySet{token=\\\"myKey-18\\\"} 9.0 1623589839194\\nmySet{token=\\\"myKey-19\\\"} 12.0 1623589839194\\nmySet{token=\\\"myKey-13\\\"} 6.0 1623589839194\\nmySet{token=\\\"myKey-14\\\"} 4.0 1623589839194\\nmySet{token=\\\"myKey-15\\\"} 6.0 1623589839194\\nmySet{token=\\\"myKey-16\\\"} 5.0 1623589839194\\nmySet{token=\\\"myKey-10\\\"} 10.0 1623589839194\\nmySet{token=\\\"myKey-11\\\"} 1.0 1623589839194\\nmySet{token=\\\"myKey-12\\\"} 10.0 1623589839194\\n\")), mdx(\"h2\", null, \"Serving Prometheus metrics\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"import zhttp.http._\\nimport zhttp.service.Server\\n\\nimport zio._\\nimport zio.console._\\nimport zio.zmx.MetricSnapshot.{ Json, Prometheus }\\nimport zio.zmx.prometheus.PrometheusClient\\nimport zhttp.service.server.ServerChannelFactory\\nimport zhttp.service.EventLoopGroup\\n\\nimport zio.zmx.example.InstrumentedSample\\n\\nval instrumentedSample = new InstrumentedSample() {}\\n\")), mdx(\"p\", null, \"ZMX provides a prometheus client that can be used to produce the prometheus encoded metric state\\nupon request. The state is encoded in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \" case class and the single attribute of\\ntype \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" holds the prometheus encoded metric state. \"), mdx(\"p\", null, \"So, to retrieve the prometheus encoded state, the application can simply use \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"val encoded = PrometheusClient.snapshot\\nval content = encoded.map(_.value)\\n\")), mdx(\"p\", null, \"In our example application we use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dream11/zio-http\"\n  }, \"zio-http\"), \" to serve the metrics. Other application might choose another HTTP server framework if required.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"private lazy val indexPage = HttpData.CompleteData(\\n  Chunk\\n    .fromArray(\\\"\\\"\\\"<html>\\n                  |<title>Simple Server</title>\\n                  |<body>\\n                  |<p><a href=\\\"/metrics\\\">Metrics</a></p>\\n                  |<p><a href=\\\"/json\\\">Json</a></p>\\n                  |</body\\n                  |</html>\\\"\\\"\\\".stripMargin.getBytes)\\n)\\n\\nprivate lazy val static     =\\n  Http.collect[Request] { case Method.GET -> Root => Response.http[Any, Nothing](content = indexPage) }\\n\\nprivate lazy val httpEffect = Http.collectM[Request] {\\n  case Method.GET -> Root / \\\"metrics\\\" =>\\n    PrometheusClient.snapshot.map { case Prometheus(value) => Response.text(value) }\\n}\\n\")), mdx(\"p\", null, \"Now, using the HTTP server and the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"example.md\"\n  }, \"instrumentation examples\"), \" we can create an effect\\nthat simply runs the sample effects with their instrumentation until the user presses any key. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"private lazy val execute =\\n  (for {\\n    s <- ((Server.port(8080) ++ Server.app(static +++ httpEffect)).start *> ZIO.never).forkDaemon\\n    p <- instrumentedSample.program.fork\\n    _ <- putStrLn(\\\"Press Any Key to stop the demo server\\\") *> getStrLn.catchAll(_ =>\\n            ZIO.none\\n          ) *> p.interrupt *> s.interrupt\\n  } yield ExitCode.success).orDie\\n\")), mdx(\"p\", null, \"Finally, within a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ZIO.App\"), \" we can override the run method, which is now simply the execute\\nmethod with a Prometheus client provided in it\\xB4s environment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scala\"\n  }, \"def run(args: List[String]): URIO[ZEnv, ExitCode] =\\n  execute.provideCustomLayer(\\n    PrometheusClient.live ++ ServerChannelFactory.auto ++ EventLoopGroup.auto(5)\\n  )\\n\")), mdx(\"h2\", null, \"Running the prometheus example\"), mdx(\"p\", null, \"Any of the examples can be run from a command line within the ZMX checkout directory with \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sbt examples/run\\n\")), mdx(\"p\", null, \"Out of the choices, select the option corresponding to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zio.zmx.PrometheusInstrumentedApp\"), \".\"), mdx(\"p\", null, \"If everything works, we should be able to use a web browser to go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/metrics\"), \" and should see something like \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# TYPE myCounter counter\\n# HELP myCounter\\nmyCounter{effect=\\\"count2\\\"} 46.0 1608982756235\\n# TYPE setGauge gauge\\n# HELP setGauge\\nsetGauge 8.66004641453435 1608982756235\\n# TYPE changeGauge gauge\\n# HELP changeGauge\\nchangeGauge 90.7178906485008 1608982756235\\n# TYPE myCounter counter\\n# HELP myCounter\\nmyCounter{effect=\\\"count1\\\"} 92.0 1608982756235\\n\")), mdx(\"p\", null, \"Once we see the metrics being served from our example, we can set up Prometheus and Grafana to create a simple dashboard displaying\\nour metrics. \"), mdx(\"h2\", null, \"Simple Prometheus setup\"), mdx(\"p\", null, \"The following steps have been tested on Ubuntu 18.04 running inside the Windows Subsystem for Linux.\\nEssentially, you need to download the prometheus binaries for your environment and start the server\\nwith our sample configuration located at \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"${PROJECT_HOME}/examples/prometheus/promcfg.yml\\n\")), mdx(\"p\", null, \"This will just configure a prometheus job that regular polls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/metrics\"), \" for prometheus\\nencoded metrics.\"), mdx(\"p\", null, \"In addition, you need to download the Grafana binaries for your installation, start the Grafana server and configure\\nprometheus as a single data source. \"), mdx(\"p\", null, \"Finally, you can import our example dashboard at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/prometheus/ZmxDashboard.json\"), \" and enjoy the results.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"These steps are not intended to replace the Prometheus or Grafana documentation. Please refer to their web sites\\nfor guidelines towards a more sophisticated setup or an installation on different platforms. \")), mdx(\"hr\", null), mdx(\"h3\", null, \"Download and configure Prometheus\"), mdx(\"p\", null, \"In the steps below the ZMX checkout directory will be referred to as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ZMXDIR\"), \".\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/prometheus/prometheus/releases/download/v2.23.0/prometheus-2.23.0.linux-amd64.tar.gz\"\n  }, \"Download\"), \" prometheus\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Extract the downloaded archive to a directory of your choice, this will be referred to as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$PROMDIR\"), \". \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Within \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$PROMDIR\"), \" execute \", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"./prometheus --config.file $ZMXDIR/examples/prometheus/promcfg.yml\\n\")), \"This will start the prometheus server which regularly polls the HTTP endpoint of the example above for its metrics.\")), mdx(\"h3\", null, \"Download and configure Grafana\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dl.grafana.com/oss/release/grafana-7.3.6.linux-amd64.tar.gz\"\n  }, \"Download\"), \" grafana\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Extract the downloaded archive to a directory of your choice, this will be referred to as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$GRAFANADIR\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$GRAFANADIR\"), \" execute \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"./bin/grafana-server\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This will start a the Grafana server.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now you should be able to login to Grafana at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000' with the default user \"), \"admin\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with the default \\npassword\"), \"admin`. \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Upon the first login you will be asked to change the default password. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Within the Grafana menu on the left hand side you will find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Manage Dashboards\"), \" within that page, select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Import\"), \". \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can now either install a dashboard from grafana.com or use a text field to paste JSON. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Paste the content of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ZMXDIR/examples/prometheus/ZmxDashboard.json\"), \" into the text field and select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Load\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This will import our dashboard example. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now, under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Manage Dashboards\"), \" the just imported ZIO dashboard should be visible. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Navigate to the dashboard. \"))), mdx(\"h3\", null, \"Grafana dashboard\"), mdx(\"p\", null, \"Here is a screenshot of the Grafana dashboard produced with the setup above. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/zio-zmx/img/ZIOZmx-Grafana.png\",\n    \"alt\": \"A simple Grafana Dashboard\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"filePath":"/home/runner/work/gatsby-theme-zio/gatsby-theme-zio/example/node_modules/@atooni/zio-metrics-connectors/src/docs/metrics/prometheus.md"}},"staticQueryHashes":[]}