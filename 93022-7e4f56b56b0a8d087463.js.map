{"version":3,"file":"93022-7e4f56b56b0a8d087463.js","mappings":"yGAAA,SAAWA,GACT,IAAIC,EAAcD,EAAME,UAAUC,YAAc,CAC9C,UAAa,CACXC,QAAS,iEACTC,YAAY,GAEd,QAAW,CAGTD,QAAS,wDACTC,YAAY,GAEd,YAAe,QA4EjBC,OAAOC,eAAeN,EAAa,aAAc,CAC/CO,MAjBF,SAAoBN,EAAWO,GACJ,iBAAdP,IACTA,EAAY,CAACA,IAGfA,EAAUQ,SAAQ,SAAUC,IAxD9B,SAA2BA,EAAMC,GAC/B,IAAIC,EAAY,cACZC,EAAUd,EAAME,UAAUS,GAE9B,GAAKG,EAAL,CAIA,IAAIC,EAAQD,EAAQD,GAEpB,IAAKE,EAAO,CAEV,IAAIC,EAAa,CACjBA,cAAwB,CACtBZ,QAAS,wCACTC,YAAY,EACZY,MAAO,YAGTF,GADAD,EAAUd,EAAME,UAAUgB,aAAaP,EAAM,UAAWK,IACxCH,GAUlB,GAPIE,aAAiBI,SAEnBJ,EAAQD,EAAQD,GAAa,CAC3BT,QAASW,IAITK,MAAMC,QAAQN,GAChB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCP,EAAMO,aAAcH,SACtBJ,EAAMO,GAAK,CACTlB,QAASW,EAAMO,KAInBV,EAASG,EAAMO,SAGjBV,EAASG,IAiBTU,CAAkBd,GAAM,SAAUP,GAC3BA,EAAQsB,SACXtB,EAAQsB,OAAS,IAGnBtB,EAAQsB,OAAOC,KAAOlB,WAQ5BR,EAAY2B,WAAW,CAAC,OAAQ,aAAc,OAAQ3B,GA3FxD,CA4FGD","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-javadoclike.js"],"sourcesContent":["(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);"],"names":["Prism","javaDocLike","languages","javadoclike","pattern","lookbehind","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport"],"sourceRoot":""}