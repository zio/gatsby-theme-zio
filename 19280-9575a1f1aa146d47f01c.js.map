{"version":3,"file":"19280-9575a1f1aa146d47f01c.js","mappings":"yGAAA,SAAWA,GACT,IAAIC,EAAK,wCAAwCC,OAC7CC,EAAO,MAAQ,yCAAyCD,OAAS,IAAM,gDAAgDA,OAAS,IAAM,kCAAkCA,OAASD,EAAK,gCAAgCC,OAAS,IAAM,aAAaA,OAClPE,EAAa,GA4DjB,IAAK,IAAIC,KA3DTL,EAAMM,UAAU,WAAa,CAC3B,QAAW,CACTC,QAAS,0BACTC,QAAQ,GAEV,OAAU,CACRD,QAAS,UACTC,QAAQ,GAEV,UAAa,CACXD,QAASE,OAAO,mBAAmBP,OAASD,GAC5CS,YAAY,GAEd,aAAc,CAAC,CACbH,QAAS,iEACTG,YAAY,EACZC,OAAQP,GACP,CACDG,QAASE,OAAO,4DAA4DP,OAASC,GACrFO,YAAY,EACZC,OAAQP,GACP,CAEDG,QAASE,OAAO,IAAM,gBAAgBP,OAASD,EAAK,UAAUC,OAAS,IAAMC,GAC7EO,YAAY,EACZC,OAAQP,GACP,CAEDG,QAASE,OAAO,mBAAmBP,OAASC,GAC5CO,YAAY,EACZC,OAAQP,GACP,CACDG,QAASE,OAAO,sFAAsFP,OAASD,GAC/GS,YAAY,GACX,CAEDH,QAASE,OAAO,SAASP,OAASD,GAClCS,YAAY,GAEdD,OAAOR,EAAK,mCAAmCC,QAAS,CACtDK,QAASE,OAAO,iCAAiCP,OAASD,GAC1DS,YAAY,GACX,CAEDH,QAASE,OAAON,EAAO,MAAQ,mBAAmBD,OAASD,EAAK,aAAaC,OAAS,KACtFS,OAAQP,IAEV,QAAW,8OACX,QAAW,CAAC,oOACZ,gJACA,QAAW,qBACX,OAAU,CACRG,QAAS,2FACTG,YAAY,GAEd,SAAY,iBACZ,YAAe,gBAGDV,EAAMM,UAAU,WAClB,eAARD,IACFD,EAAWC,GAAOL,EAAMM,UAAU,WAAWD,IAIjDL,EAAMM,UAAkB,OAAIN,EAAMM,UAAU,WArE9C,CAsEGN","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-web-idl.js"],"sourcesContent":["(function (Prism) {\n  var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n  var type = '(?:' + /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source + '|' + /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source + '|' + /(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ')' + /(?:\\s*\\?)?/.source;\n  var typeInside = {};\n  Prism.languages['web-idl'] = {\n    'comment': {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    'string': {\n      pattern: /\"[^\"]*\"/,\n      greedy: true\n    },\n    'namespace': {\n      pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n      lookbehind: true\n    },\n    'class-name': [{\n      pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      pattern: RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // callback return type\n      pattern: RegExp('(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // typedef\n      pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      pattern: RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id),\n      lookbehind: true\n    }, {\n      // inheritance\n      pattern: RegExp(/(:\\s*)/.source + id),\n      lookbehind: true\n    }, // includes and implements\n    RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source), {\n      pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n      lookbehind: true\n    }, {\n      // function return type, parameter types, and dictionary members\n      pattern: RegExp(type + '(?=' + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + ')'),\n      inside: typeInside\n    }],\n    'builtin': /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n    'keyword': [/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n    /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/],\n    'boolean': /\\b(?:false|true)\\b/,\n    'number': {\n      pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n      lookbehind: true\n    },\n    'operator': /\\.{3}|[=:?<>-]/,\n    'punctuation': /[(){}[\\].,;]/\n  };\n\n  for (var key in Prism.languages['web-idl']) {\n    if (key !== 'class-name') {\n      typeInside[key] = Prism.languages['web-idl'][key];\n    }\n  }\n\n  Prism.languages['webidl'] = Prism.languages['web-idl'];\n})(Prism);"],"names":["Prism","id","source","type","typeInside","key","languages","pattern","greedy","RegExp","lookbehind","inside"],"sourceRoot":""}