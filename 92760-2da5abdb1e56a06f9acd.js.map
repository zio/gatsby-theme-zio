{"version":3,"file":"92760-2da5abdb1e56a06f9acd.js","mappings":"yGAAA,SAAWA,GAET,IAAIC,EAAuB,8MAC3BD,EAAME,UAAUC,KAAO,CACrB,QAAW,yCACX,OAAU,CAGRC,QAAS,kCACTC,QAAQ,GAEV,UAAa,CACXD,QAAS,yBACTE,YAAY,EACZC,MAAO,YAET,eAAgB,CACdH,QAASI,OAAO,IAAMP,EAAqBQ,OAAS,WAAWA,OAAS,IAAM,cAAcA,QAC5FH,YAAY,EACZC,MAAO,YAET,WAAc,CACZH,QAAS,uDACTE,YAAY,EACZI,OAAQ,CACN,WAAc,CACZN,QAAS,sDACTE,YAAY,EACZI,OAAQ,MAGV,SAAY,sBACZ,SAAY,IACZ,YAAe,YAGnB,QAAW,CAAC,CACVN,QAAS,sFACTG,MAAO,iBACN,mQACHN,GACA,SAAY,uBACZ,OAAU,8FACV,QAAW,qBACX,SAAY,8CACZ,YAAe,gBAEjBD,EAAME,UAAUC,KAAKQ,WAAWD,OAAOE,WAAWF,OAASV,EAAME,UAAUC,KA/C7E,CAgDGH","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-stan.js"],"sourcesContent":["(function (Prism) {\n  // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n  var higherOrderFunctions = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n  Prism.languages.stan = {\n    'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n    'string': {\n      // String literals can contain spaces and any printable ASCII characters except for \" and \\\n      // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n      pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n      greedy: true\n    },\n    'directive': {\n      pattern: /^([ \\t]*)#include\\b.*/m,\n      lookbehind: true,\n      alias: 'property'\n    },\n    'function-arg': {\n      pattern: RegExp('(' + higherOrderFunctions.source + /\\s*\\(\\s*/.source + ')' + /[a-zA-Z]\\w*/.source),\n      lookbehind: true,\n      alias: 'function'\n    },\n    'constraint': {\n      pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n      lookbehind: true,\n      inside: {\n        'expression': {\n          pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n        'operator': /=/,\n        'punctuation': /^<|>$|,/\n      }\n    },\n    'keyword': [{\n      pattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n      alias: 'program-block'\n    }, /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n    higherOrderFunctions],\n    'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n    'number': /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n    'punctuation': /[()\\[\\]{},;]/\n  };\n  Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n})(Prism);"],"names":["Prism","higherOrderFunctions","languages","stan","pattern","greedy","lookbehind","alias","RegExp","source","inside","constraint","expression"],"sourceRoot":""}