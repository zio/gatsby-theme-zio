{"version":3,"file":"54165-bbce0440493ac7349fa2.js","mappings":"yGAAC,SAAUA,GACT,IAAK,IAAIC,EAAI,sDAAuDC,EAAI,EAAGA,EAAI,EAAGA,IAChFD,EAAIA,EAAEE,QAAQ,WAAW,WACvB,OAAOF,KAIXA,EAAIA,EAAEE,QAAQ,UAAW,MAAOH,EAAEI,UAAUC,IAAM,CAChDC,QAASC,OAAON,GAChBO,OAAQ,CACNC,QAAS,sBACTC,QAAQ,GAEVC,UAAW,CAAC,CACVF,QAASF,OAAO,mEAAmEJ,QAAQ,cAAc,WACvG,OAAOF,MAETS,QAAQ,EACRE,MAAO,YACPC,OAAQ,CACNP,QAASC,OAAON,GAChBO,OAAQ,CACNC,QAAS,sBACTC,QAAQ,GAEVI,SAAU,IACVC,YAAa,mBAEd,CACDN,QAAS,wFACTG,MAAO,cAETI,QAAS,0/DACTC,OAAQ,6GACRC,MAAO,CACLT,QAAS,kBACTG,MAAO,eAETE,SAAU,8FACVC,YAAa,+CAvChB,CAyCCI","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-coq.min.js"],"sourcesContent":["!function (e) {\n  for (var t = \"\\\\(\\\\*(?:[^(*]|\\\\((?!\\\\*)|\\\\*(?!\\\\))|<self>)*\\\\*\\\\)\", i = 0; i < 2; i++) {\n    t = t.replace(/<self>/g, function () {\n      return t;\n    });\n  }\n\n  t = t.replace(/<self>/g, \"[]\"), e.languages.coq = {\n    comment: RegExp(t),\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: !0\n    },\n    attribute: [{\n      pattern: RegExp('#\\\\[(?:[^\\\\[\\\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\\\((?!\\\\*)|<comment>)*\\\\]'.replace(/<comment>/g, function () {\n        return t;\n      })),\n      greedy: !0,\n      alias: \"attr-name\",\n      inside: {\n        comment: RegExp(t),\n        string: {\n          pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n          greedy: !0\n        },\n        operator: /=/,\n        punctuation: /^#\\[|\\]$|[,()]/\n      }\n    }, {\n      pattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n      alias: \"attr-name\"\n    }],\n    keyword: /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n    number: /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n    punct: {\n      pattern: /@\\{|\\{\\||\\[=|:>/,\n      alias: \"punctuation\"\n    },\n    operator: /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n    punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n  };\n}(Prism);"],"names":["e","t","i","replace","languages","coq","comment","RegExp","string","pattern","greedy","attribute","alias","inside","operator","punctuation","keyword","number","punct","Prism"],"sourceRoot":""}