{"version":3,"file":"55475-e46fa15d7f8c9a0b505d.js","mappings":"yGAAA,SAAWA,GACTA,EAAMC,UAAUC,WAAaF,EAAMC,UAAUE,OAAO,aAAc,CAChE,aAAc,CACZC,QAAS,+KACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAGV,QAAW,0FAGbP,EAAMC,UAAUC,WAAWM,QAAQC,KAAK,qDACxC,2FACA,qCAEOT,EAAMC,UAAUC,WAAsB,iBACtCF,EAAMC,UAAUC,WAAW,oBAElC,IAAIQ,EAAaV,EAAMC,UAAUE,OAAO,aAAc,WAC/CO,EAAW,cAClBV,EAAMC,UAAUC,WAAW,cAAcK,OAASG,EAClDV,EAAMC,UAAUU,aAAa,aAAc,WAAY,CACrD,UAAa,CACXP,QAAS,qBACTG,OAAQ,CACN,GAAM,CACJH,QAAS,KACTQ,MAAO,YAET,SAAY,aAGhB,mBAAoB,CAElBR,QAAS,yGACTE,QAAQ,EACRC,OAAQ,CACN,SAAY,4DACZ,QAAW,CACTH,QAAS,WAETQ,MAAO,aACPL,OAAQG,OAKhBV,EAAMC,UAAUY,GAAKb,EAAMC,UAAUC,WAhDvC,CAiDGF","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-typescript.js"],"sourcesContent":["(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","keyword","push","typeInside","insertBefore","alias","ts"],"sourceRoot":""}