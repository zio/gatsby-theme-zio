{"version":3,"file":"8933-773424e5518061338b92.js","mappings":"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","sources":["webpack://zio-sample-site/./node_modules/prismjs/components/prism-php.js"],"sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n * Rewritten by Tom Pavelec\n *\n * Supports PHP 5.3 - 8.0\n */\n(function (Prism) {\n  var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n  var constant = [{\n    pattern: /\\b(?:false|true)\\b/i,\n    alias: 'boolean'\n  }, {\n    pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n    greedy: true,\n    lookbehind: true\n  }, {\n    pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n    greedy: true,\n    lookbehind: true\n  }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n  var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n  var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n  var punctuation = /[{}\\[\\](),:;]/;\n  Prism.languages.php = {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    },\n    'comment': comment,\n    'variable': /\\$+(?:\\w+\\b|(?=\\{))/,\n    'package': {\n      pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    },\n    'class-name-definition': {\n      pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function-definition': {\n      pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'keyword': [{\n      pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n      alias: 'type-casting',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n      alias: 'type-hint',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n      alias: 'return-type',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n      alias: 'type-declaration',\n      greedy: true\n    }, {\n      pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n      alias: 'type-declaration',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n      alias: 'static-context',\n      greedy: true\n    }, {\n      // yield from\n      pattern: /(\\byield\\s+)from\\b/i,\n      lookbehind: true\n    }, // `class` is always a keyword unlike other keywords\n    /\\bclass\\b/i, {\n      // https://www.php.net/manual/en/reserved.keywords.php\n      //\n      // keywords cannot be preceded by \"->\"\n      // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n      pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n      lookbehind: true\n    }],\n    'argument-name': {\n      pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      lookbehind: true\n    },\n    'class-name': [{\n      pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n      greedy: true\n    }, {\n      pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n      alias: 'type-declaration',\n      greedy: true\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n      alias: ['class-name-fully-qualified', 'type-declaration'],\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n      alias: 'static-context',\n      greedy: true\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n      alias: ['class-name-fully-qualified', 'static-context'],\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n      alias: 'type-hint',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n      alias: ['class-name-fully-qualified', 'type-hint'],\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      alias: 'return-type',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      alias: ['class-name-fully-qualified', 'return-type'],\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }],\n    'constant': constant,\n    'function': {\n      pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    },\n    'property': {\n      pattern: /(->\\s*)\\w+/,\n      lookbehind: true\n    },\n    'number': number,\n    'operator': operator,\n    'punctuation': punctuation\n  };\n  var string_interpolation = {\n    pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n    lookbehind: true,\n    inside: Prism.languages.php\n  };\n  var string = [{\n    pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n    alias: 'nowdoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<<'?|[';]$/\n        }\n      }\n    }\n  }, {\n    pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n    alias: 'heredoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<<\"?|[\";]$/\n        }\n      },\n      'interpolation': string_interpolation\n    }\n  }, {\n    pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n    alias: 'backtick-quoted-string',\n    greedy: true\n  }, {\n    pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n    alias: 'single-quoted-string',\n    greedy: true\n  }, {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n    alias: 'double-quoted-string',\n    greedy: true,\n    inside: {\n      'interpolation': string_interpolation\n    }\n  }];\n  Prism.languages.insertBefore('php', 'variable', {\n    'string': string,\n    'attribute': {\n      pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n      greedy: true,\n      inside: {\n        'attribute-content': {\n          pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n          lookbehind: true,\n          // inside can appear subset of php\n          inside: {\n            'comment': comment,\n            'string': string,\n            'attribute-class-name': [{\n              pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n              alias: 'class-name',\n              greedy: true,\n              lookbehind: true\n            }, {\n              pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n              alias: ['class-name', 'class-name-fully-qualified'],\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                'punctuation': /\\\\/\n              }\n            }],\n            'constant': constant,\n            'number': number,\n            'operator': operator,\n            'punctuation': punctuation\n          }\n        },\n        'delimiter': {\n          pattern: /^#\\[|\\]$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n  });\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);"],"names":["Prism","comment","constant","pattern","alias","greedy","lookbehind","number","operator","punctuation","languages","php","inside","string_interpolation","string","insertBefore","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders"],"sourceRoot":""}